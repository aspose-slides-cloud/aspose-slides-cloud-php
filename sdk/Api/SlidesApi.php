<?php
/**
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


namespace Aspose\Slides\Cloud\Sdk\Api;

use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7;
use GuzzleHttp\Psr7\Request;
use Aspose\Slides\Cloud\Sdk\Model\Requests;

/**
 * Aspose.Slides for Cloud API.
 */
class SlidesApi extends ApiBase
{
    /*
     * Initialize a new instance of SlidesApi
     * @param ClientInterface   $client client for calling api
     * @param Configuration   $config configuration info
     * @param HeaderSelector   $selector class for header selection
     */
    public function __construct(ClientInterface $client = null, Configuration $config = null, HeaderSelector $selector = null)
    {
        parent::__construct($client, $config, $selector);
    }

    /**
     */
    public function copyFile($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        try {
            $this->copyFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        }
        catch(RepeatRequestException $ex) {
            $this->copyFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        } 
    }

    /**
     */
    public function copyFileWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyFileAsync($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        return $this->copyFileAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyFileAsyncWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copyFile'
     *
     * @param  string $$srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $$destPath Destination file path (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     * @param  string $$versionId File version ID to copy (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyFileRequest($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        if (is_a($srcPath, '\Aspose\Slides\Cloud\Sdk\Model\Requests\CopyFileRequest')) {
            $requestObject = $srcPath;
            $srcPath = $requestObject->srcPath;
            $destPath = $requestObject->destPath;
            $srcStorageName = $requestObject->srcStorageName;
            $destStorageName = $requestObject->destStorageName;
            $versionId = $requestObject->versionId;
        }
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling copyFile');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling copyFile');
        }

        $resourcePath = '/slides/storage/file/copy/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function copyFolder($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        try {
            $this->copyFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        }
        catch(RepeatRequestException $ex) {
            $this->copyFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        } 
    }

    /**
     */
    public function copyFolderWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyFolderAsync($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        return $this->copyFolderAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyFolderAsyncWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copyFolder'
     *
     * @param  string $$srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $$destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyFolderRequest($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        if (is_a($srcPath, '\Aspose\Slides\Cloud\Sdk\Model\Requests\CopyFolderRequest')) {
            $requestObject = $srcPath;
            $srcPath = $requestObject->srcPath;
            $destPath = $requestObject->destPath;
            $srcStorageName = $requestObject->srcStorageName;
            $destStorageName = $requestObject->destStorageName;
        }
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling copyFolder');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling copyFolder');
        }

        $resourcePath = '/slides/storage/folder/copy/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function createFolder($path = null, $storageName = null)
    {
        try {
            $this->createFolderWithHttpInfo($path, $storageName);
        }
        catch(RepeatRequestException $ex) {
            $this->createFolderWithHttpInfo($path, $storageName);
        } 
    }

    /**
     */
    public function createFolderWithHttpInfo($path = null, $storageName = null)
    {
        $returnType = '';
        $httpRequest = $this->createFolderRequest($path, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createFolderAsync($path = null, $storageName = null)
    {
        return $this->createFolderAsyncWithHttpInfo($path, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createFolderAsyncWithHttpInfo($path = null, $storageName = null)
    {
        $returnType = '';
        $httpRequest = $this->createFolderRequest($path, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createFolder'
     *
     * @param  string $$path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createFolderRequest($path = null, $storageName = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\CreateFolderRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling createFolder');
        }

        $resourcePath = '/slides/storage/folder/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function deleteChartCategory($name = null, $slideIndex = null, $shapeIndex = null, $categoryIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteChartCategoryWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $categoryIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteChartCategoryAsync($name = null, $slideIndex = null, $shapeIndex = null, $categoryIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteChartCategoryAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $categoryIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteChartCategory'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$categoryIndex Category index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChartCategoryRequest($name = null, $slideIndex = null, $shapeIndex = null, $categoryIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteChartCategoryRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $categoryIndex = $requestObject->categoryIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteChartCategory');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteChartCategory');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteChartCategory');
        }
        // verify the required parameter 'category_index' is set
        if ($categoryIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $categoryIndex when calling deleteChartCategory');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "categoryIndex", $categoryIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteChartDataPoint($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $pointIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteChartDataPointWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $pointIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteChartDataPointAsync($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $pointIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteChartDataPointAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $pointIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteChartDataPoint'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  int $$pointIndex Data point index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChartDataPointRequest($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $pointIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteChartDataPointRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $seriesIndex = $requestObject->seriesIndex;
            $pointIndex = $requestObject->pointIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteChartDataPoint');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteChartDataPoint');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteChartDataPoint');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling deleteChartDataPoint');
        }
        // verify the required parameter 'point_index' is set
        if ($pointIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pointIndex when calling deleteChartDataPoint');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "pointIndex", $pointIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteChartSeries($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteChartSeriesWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteChartSeriesAsync($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteChartSeriesAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteChartSeries'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChartSeriesRequest($name = null, $slideIndex = null, $shapeIndex = null, $seriesIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteChartSeriesRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $seriesIndex = $requestObject->seriesIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteChartSeries');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteChartSeries');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteChartSeries');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling deleteChartSeries');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteFile($path = null, $storageName = null, $versionId = null)
    {
        try {
            $this->deleteFileWithHttpInfo($path, $storageName, $versionId);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteFileWithHttpInfo($path, $storageName, $versionId);
        } 
    }

    /**
     */
    public function deleteFileWithHttpInfo($path = null, $storageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFileRequest($path, $storageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteFileAsync($path = null, $storageName = null, $versionId = null)
    {
        return $this->deleteFileAsyncWithHttpInfo($path, $storageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteFileAsyncWithHttpInfo($path = null, $storageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFileRequest($path, $storageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteFile'
     *
     * @param  string $$path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  string $$versionId File version ID to delete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFileRequest($path = null, $storageName = null, $versionId = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteFileRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
            $versionId = $requestObject->versionId;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteFile');
        }

        $resourcePath = '/slides/storage/file/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteFolder($path = null, $storageName = null, $recursive = null)
    {
        try {
            $this->deleteFolderWithHttpInfo($path, $storageName, $recursive);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteFolderWithHttpInfo($path, $storageName, $recursive);
        } 
    }

    /**
     */
    public function deleteFolderWithHttpInfo($path = null, $storageName = null, $recursive = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFolderRequest($path, $storageName, $recursive);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteFolderAsync($path = null, $storageName = null, $recursive = null)
    {
        return $this->deleteFolderAsyncWithHttpInfo($path, $storageName, $recursive)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteFolderAsyncWithHttpInfo($path = null, $storageName = null, $recursive = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFolderRequest($path, $storageName, $recursive);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteFolder'
     *
     * @param  string $$path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  bool $$recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFolderRequest($path = null, $storageName = null, $recursive = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteFolderRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
            $recursive = $requestObject->recursive;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteFolder');
        }

        $resourcePath = '/slides/storage/folder/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = ObjectSerializer::toQueryValue($recursive);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlide($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlideWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->deleteNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlideAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlideAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->deleteNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlideRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlideRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlideParagraph($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlideParagraphWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlideParagraphAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlideParagraphAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlideParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlideParagraphRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlideParagraphRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlideParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlideParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteNotesSlideParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteNotesSlideParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlideParagraphs($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlideParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlideParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlideParagraphsWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteNotesSlideParagraphsRequest($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlideParagraphsAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlideParagraphsAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteNotesSlideParagraphsRequest($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlideParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  array $$paragraphs The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlideParagraphsRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlideParagraphsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphs = $requestObject->paragraphs;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlideParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlideParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteNotesSlideParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($paragraphs !== null) {
            $queryParams['paragraphs'] = ObjectSerializer::toQueryValue($paragraphs);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlidePortion($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlidePortionWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlidePortionAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlidePortionAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlidePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlidePortionRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlidePortionRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $portionIndex = $requestObject->portionIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlidePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlidePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteNotesSlidePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteNotesSlidePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling deleteNotesSlidePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlidePortions($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlidePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlidePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlidePortionsWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteNotesSlidePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlidePortionsAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlidePortionsAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteNotesSlidePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlidePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  array $$portions The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlidePortionsRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlidePortionsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $portions = $requestObject->portions;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlidePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlidePortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteNotesSlidePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteNotesSlidePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($portions !== null) {
            $queryParams['portions'] = ObjectSerializer::toQueryValue($portions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlideShape($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlideShapeWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlideShapeAsync($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlideShapeAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlideShapeRequest($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlideShapeRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlideShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteNotesSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlideShapes($name = null, $slideIndex = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlideShapesWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlideShapesWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlideShapesWithHttpInfo($name = null, $slideIndex = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteNotesSlideShapesRequest($name, $slideIndex, $shapes, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlideShapesAsync($name = null, $slideIndex = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlideShapesAsyncWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlideShapesAsyncWithHttpInfo($name = null, $slideIndex = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteNotesSlideShapesRequest($name, $slideIndex, $shapes, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  array $$shapes The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlideShapesRequest($name = null, $slideIndex = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteNotesSlideShapesRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapes = $requestObject->shapes;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlideShapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteParagraph($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteParagraphWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteParagraphAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteParagraphAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParagraphRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteParagraphRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteParagraphs($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteParagraphsWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphsRequest($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteParagraphsAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteParagraphsAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphsRequest($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  array $$paragraphs The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParagraphsRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteParagraphsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphs = $requestObject->paragraphs;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($paragraphs !== null) {
            $queryParams['paragraphs'] = ObjectSerializer::toQueryValue($paragraphs);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deletePortion($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deletePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deletePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deletePortionWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deletePortionAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deletePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deletePortionAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deletePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePortionRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeletePortionRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $portionIndex = $requestObject->portionIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deletePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deletePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deletePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deletePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling deletePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deletePortions($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deletePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deletePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deletePortionsWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deletePortionsAsync($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deletePortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deletePortionsAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deletePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  array $$portions The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePortionsRequest($name = null, $slideIndex = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeletePortionsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $portions = $requestObject->portions;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deletePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deletePortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deletePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deletePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($portions !== null) {
            $queryParams['portions'] = ObjectSerializer::toQueryValue($portions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSection($name = null, $sectionIndex = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSectionWithHttpInfo($name, $sectionIndex, $withSlides, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSectionWithHttpInfo($name, $sectionIndex, $withSlides, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSectionWithHttpInfo($name = null, $sectionIndex = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionRequest($name, $sectionIndex, $withSlides, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSectionAsync($name = null, $sectionIndex = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSectionAsyncWithHttpInfo($name, $sectionIndex, $withSlides, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSectionAsyncWithHttpInfo($name = null, $sectionIndex = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionRequest($name, $sectionIndex, $withSlides, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSection'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$sectionIndex Section index. (required)
     * @param  bool $$withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSectionRequest($name = null, $sectionIndex = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteSectionRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $sectionIndex = $requestObject->sectionIndex;
            $withSlides = $requestObject->withSlides;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSection');
        }
        // verify the required parameter 'section_index' is set
        if ($sectionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionIndex when calling deleteSection');
        }

        $resourcePath = '/slides/{name}/sections/{sectionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withSlides !== null) {
            $queryParams['withSlides'] = ObjectSerializer::toQueryValue($withSlides);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sectionIndex", $sectionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSections($name = null, $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSectionsWithHttpInfo($name, $sections, $withSlides, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSectionsWithHttpInfo($name, $sections, $withSlides, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSectionsWithHttpInfo($name = null, $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionsRequest($name, $sections, $withSlides, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSectionsAsync($name = null, $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSectionsAsyncWithHttpInfo($name, $sections, $withSlides, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSectionsAsyncWithHttpInfo($name = null, $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionsRequest($name, $sections, $withSlides, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSections'
     *
     * @param  string $$name Document name. (required)
     * @param  array $$sections The indices of the sections to be deleted; delete all by default. (optional)
     * @param  bool $$withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSectionsRequest($name = null, $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteSectionsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $sections = $requestObject->sections;
            $withSlides = $requestObject->withSlides;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSections');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sections !== null) {
            $queryParams['sections'] = ObjectSerializer::toQueryValue($sections);
        }
        // query params
        if ($withSlides !== null) {
            $queryParams['withSlides'] = ObjectSerializer::toQueryValue($withSlides);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteAnimation($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimation(Requests\DeleteSlideAnimationRequest $request)
    {
        return $this->deleteAnimation($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationWithHttpInfo(Requests\DeleteSlideAnimationRequest $request)
    {
        return $this->deleteAnimationWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationAsync(Requests\DeleteSlideAnimationRequest $request)
    {
        return $this->deleteAnimationAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationAsyncWithHttpInfo(Requests\DeleteSlideAnimationRequest $request)
    {
        return $this->deleteAnimationAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteAnimationEffect($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationEffectRequest($name, $slideIndex, $effectIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationEffectAsync($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationEffectRequest($name, $slideIndex, $effectIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$effectIndex Index of the effect to be removed. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationEffectRequest($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideAnimationEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling deleteSlideAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationEffect(Requests\DeleteSlideAnimationEffectRequest $request)
    {
        return $this->deleteAnimationEffect($request->name, $request->slideIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationEffectWithHttpInfo(Requests\DeleteSlideAnimationEffectRequest $request)
    {
        return $this->deleteAnimationEffectWithHttpInfo($request->name, $request->slideIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationEffectAsync(Requests\DeleteSlideAnimationEffectRequest $request)
    {
        return $this->deleteAnimationEffectAsync($request->name, $request->slideIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationEffectAsyncWithHttpInfo(Requests\DeleteSlideAnimationEffectRequest $request)
    {
        return $this->deleteAnimationEffectAsyncWithHttpInfo($request->name, $request->slideIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteAnimationInteractiveSequence($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceRequest($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceAsync($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceRequest($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideAnimationInteractiveSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationInteractiveSequenceRequest($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling deleteSlideAnimationInteractiveSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequence(Requests\DeleteSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->deleteAnimationInteractiveSequence($request->name, $request->slideIndex, $request->sequenceIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceWithHttpInfo(Requests\DeleteSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceAsync(Requests\DeleteSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceAsync($request->name, $request->slideIndex, $request->sequenceIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceAsyncWithHttpInfo(Requests\DeleteSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceAsyncWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteAnimationInteractiveSequenceEffect($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex Interactive sequence index. (required)
     * @param  int $$effectIndex Index of the effect to be removed. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling deleteSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling deleteSlideAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceEffect(Requests\DeleteSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceEffect($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceEffectWithHttpInfo(Requests\DeleteSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceEffectWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceEffectAsync(Requests\DeleteSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceEffectAsync($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo(Requests\DeleteSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->deleteAnimationInteractiveSequenceEffectAsyncWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteAnimationInteractiveSequences($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequencesRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationInteractiveSequencesAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationInteractiveSequencesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationInteractiveSequencesAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequencesRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideAnimationInteractiveSequences'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationInteractiveSequencesRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideAnimationInteractiveSequences');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideAnimationInteractiveSequences');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequences(Requests\DeleteSlideAnimationInteractiveSequencesRequest $request)
    {
        return $this->deleteAnimationInteractiveSequences($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequencesWithHttpInfo(Requests\DeleteSlideAnimationInteractiveSequencesRequest $request)
    {
        return $this->deleteAnimationInteractiveSequencesWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequencesAsync(Requests\DeleteSlideAnimationInteractiveSequencesRequest $request)
    {
        return $this->deleteAnimationInteractiveSequencesAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationInteractiveSequencesAsyncWithHttpInfo(Requests\DeleteSlideAnimationInteractiveSequencesRequest $request)
    {
        return $this->deleteAnimationInteractiveSequencesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteAnimationMainSequence($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationMainSequenceWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationMainSequenceWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationMainSequenceWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationMainSequenceRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationMainSequenceAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationMainSequenceAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationMainSequenceAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationMainSequenceRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideAnimationMainSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationMainSequenceRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideAnimationMainSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideAnimationMainSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationMainSequence(Requests\DeleteSlideAnimationMainSequenceRequest $request)
    {
        return $this->deleteAnimationMainSequence($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationMainSequenceWithHttpInfo(Requests\DeleteSlideAnimationMainSequenceRequest $request)
    {
        return $this->deleteAnimationMainSequenceWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationMainSequenceAsync(Requests\DeleteSlideAnimationMainSequenceRequest $request)
    {
        return $this->deleteAnimationMainSequenceAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideAnimationMainSequenceAsyncWithHttpInfo(Requests\DeleteSlideAnimationMainSequenceRequest $request)
    {
        return $this->deleteAnimationMainSequenceAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideByIndex'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideByIndex');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideByIndex');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideByIndex(Requests\DeleteSlideByIndexRequest $request)
    {
        return $this->deleteSlide($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideByIndexWithHttpInfo(Requests\DeleteSlideByIndexRequest $request)
    {
        return $this->deleteSlideWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideByIndexAsync(Requests\DeleteSlideByIndexRequest $request)
    {
        return $this->deleteSlideAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideByIndexAsyncWithHttpInfo(Requests\DeleteSlideByIndexRequest $request)
    {
        return $this->deleteSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteShape($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteShapeAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShapeRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideShape(Requests\DeleteSlideShapeRequest $request)
    {
        return $this->deleteShape($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapeWithHttpInfo(Requests\DeleteSlideShapeRequest $request)
    {
        return $this->deleteShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapeAsync(Requests\DeleteSlideShapeRequest $request)
    {
        return $this->deleteShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapeAsyncWithHttpInfo(Requests\DeleteSlideShapeRequest $request)
    {
        return $this->deleteShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteShapes($name, $slideIndex, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteShapesWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteShapesWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteShapesWithHttpInfo($name, $slideIndex, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapesRequest($name, $slideIndex, $shapes, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteShapesAsync($name, $slideIndex, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteShapesAsyncWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteShapesAsyncWithHttpInfo($name, $slideIndex, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapesRequest($name, $slideIndex, $shapes, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  array $$shapes The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShapesRequest($name, $slideIndex, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideShapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapes(Requests\DeleteSlideShapesRequest $request)
    {
        return $this->deleteShapes($request->name, $request->slideIndex, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapesWithHttpInfo(Requests\DeleteSlideShapesRequest $request)
    {
        return $this->deleteShapesWithHttpInfo($request->name, $request->slideIndex, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapesAsync(Requests\DeleteSlideShapesRequest $request)
    {
        return $this->deleteShapesAsync($request->name, $request->slideIndex, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideShapesAsyncWithHttpInfo(Requests\DeleteSlideShapesRequest $request)
    {
        return $this->deleteShapesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapes, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteSubshape($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSubshapeAsync($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideSubshape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideSubshape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideSubshape');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteSlideSubshape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSlideSubshape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshape(Requests\DeleteSlideSubshapeRequest $request)
    {
        return $this->deleteSubshape($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapeWithHttpInfo(Requests\DeleteSlideSubshapeRequest $request)
    {
        return $this->deleteSubshapeWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapeAsync(Requests\DeleteSlideSubshapeRequest $request)
    {
        return $this->deleteSubshapeAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapeAsyncWithHttpInfo(Requests\DeleteSlideSubshapeRequest $request)
    {
        return $this->deleteSubshapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteSubshapes($name, $slideIndex, $path, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSubshapesWithHttpInfo($name, $slideIndex, $path, $shapes, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSubshapesWithHttpInfo($name, $slideIndex, $path, $shapes, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSubshapesWithHttpInfo($name, $slideIndex, $path, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSubshapesRequest($name, $slideIndex, $path, $shapes, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSubshapesAsync($name, $slideIndex, $path, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSubshapesAsyncWithHttpInfo($name, $slideIndex, $path, $shapes, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSubshapesAsyncWithHttpInfo($name, $slideIndex, $path, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSubshapesRequest($name, $slideIndex, $path, $shapes, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideSubshapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  array $$shapes The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubshapesRequest($name, $slideIndex, $path, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideSubshapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideSubshapes');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteSlideSubshapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapes(Requests\DeleteSlideSubshapesRequest $request)
    {
        return $this->deleteSubshapes($request->name, $request->slideIndex, $request->path, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapesWithHttpInfo(Requests\DeleteSlideSubshapesRequest $request)
    {
        return $this->deleteSubshapesWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapesAsync(Requests\DeleteSlideSubshapesRequest $request)
    {
        return $this->deleteSubshapesAsync($request->name, $request->slideIndex, $request->path, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlideSubshapesAsyncWithHttpInfo(Requests\DeleteSlideSubshapesRequest $request)
    {
        return $this->deleteSubshapesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapes, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteSlides($name, $slides = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSlidesWithHttpInfo($name, $slides, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSlidesWithHttpInfo($name, $slides, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSlidesWithHttpInfo($name, $slides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlidesRequest($name, $slides, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSlidesAsync($name, $slides = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSlidesAsyncWithHttpInfo($name, $slides, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSlidesAsyncWithHttpInfo($name, $slides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlidesRequest($name, $slides, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlidesCleanSlidesList'
     *
     * @param  string $$name Document name. (required)
     * @param  array $$slides The indices of the slides to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSlidesRequest($name, $slides = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlidesCleanSlidesList');
        }

        $resourcePath = '/slides/{name}/slides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($slides !== null) {
            $queryParams['slides'] = ObjectSerializer::toQueryValue($slides);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlidesCleanSlidesList(Requests\DeleteSlidesCleanSlidesListRequest $request)
    {
        return $this->deleteSlides($request->name, $request->slides, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesCleanSlidesListWithHttpInfo(Requests\DeleteSlidesCleanSlidesListRequest $request)
    {
        return $this->deleteSlidesWithHttpInfo($request->name, $request->slides, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesCleanSlidesListAsync(Requests\DeleteSlidesCleanSlidesListRequest $request)
    {
        return $this->deleteSlidesAsync($request->name, $request->slides, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesCleanSlidesListAsyncWithHttpInfo(Requests\DeleteSlidesCleanSlidesListRequest $request)
    {
        return $this->deleteSlidesAsyncWithHttpInfo($request->name, $request->slides, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteDocumentProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteDocumentPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteDocumentPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteDocumentPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteDocumentPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlidesDocumentProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDocumentPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlidesDocumentProperties');
        }

        $resourcePath = '/slides/{name}/documentproperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentProperties(Requests\DeleteSlidesDocumentPropertiesRequest $request)
    {
        return $this->deleteDocumentProperties($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentPropertiesWithHttpInfo(Requests\DeleteSlidesDocumentPropertiesRequest $request)
    {
        return $this->deleteDocumentPropertiesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentPropertiesAsync(Requests\DeleteSlidesDocumentPropertiesRequest $request)
    {
        return $this->deleteDocumentPropertiesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentPropertiesAsyncWithHttpInfo(Requests\DeleteSlidesDocumentPropertiesRequest $request)
    {
        return $this->deleteDocumentPropertiesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteDocumentProperty($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteDocumentPropertyWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteDocumentPropertyAsync($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlidesDocumentProperty'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$propertyName The property name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDocumentPropertyRequest($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlidesDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($propertyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $propertyName when calling deleteSlidesDocumentProperty');
        }

        $resourcePath = '/slides/{name}/documentproperties/{propertyName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "propertyName", $propertyName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentProperty(Requests\DeleteSlidesDocumentPropertyRequest $request)
    {
        return $this->deleteDocumentProperty($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentPropertyWithHttpInfo(Requests\DeleteSlidesDocumentPropertyRequest $request)
    {
        return $this->deleteDocumentPropertyWithHttpInfo($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentPropertyAsync(Requests\DeleteSlidesDocumentPropertyRequest $request)
    {
        return $this->deleteDocumentPropertyAsync($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesDocumentPropertyAsyncWithHttpInfo(Requests\DeleteSlidesDocumentPropertyRequest $request)
    {
        return $this->deleteDocumentPropertyAsyncWithHttpInfo($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteProtection($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteProtectionWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteProtectionWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteProtectionWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->deleteProtectionRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteProtectionAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteProtectionAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteProtectionAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->deleteProtectionRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlidesProtectionProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Presentation password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProtectionRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlidesProtectionProperties');
        }

        $resourcePath = '/slides/{name}/protection';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionProperties(Requests\DeleteSlidesProtectionPropertiesRequest $request)
    {
        return $this->deleteProtection($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesWithHttpInfo(Requests\DeleteSlidesProtectionPropertiesRequest $request)
    {
        return $this->deleteProtectionWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesAsync(Requests\DeleteSlidesProtectionPropertiesRequest $request)
    {
        return $this->deleteProtectionAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesAsyncWithHttpInfo(Requests\DeleteSlidesProtectionPropertiesRequest $request)
    {
        return $this->deleteProtectionAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteProtectionOnline($document, $password)
    {
        try {
            list($response) = $this->deleteProtectionOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteProtectionOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteProtectionOnlineWithHttpInfo($document, $password)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteProtectionOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteProtectionOnlineAsync($document, $password)
    {
        return $this->deleteProtectionOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteProtectionOnlineAsyncWithHttpInfo($document, $password)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteProtectionOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlidesProtectionPropertiesOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$password Presentation password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProtectionOnlineRequest($document, $password)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteSlidesProtectionPropertiesOnline');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling deleteSlidesProtectionPropertiesOnline');
        }

        $resourcePath = '/slides/protection/delete';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesOnline(Requests\DeleteSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->deleteProtectionOnline($request->document, $request->password);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesOnlineWithHttpInfo(Requests\DeleteSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->deleteProtectionOnlineWithHttpInfo($request->document, $request->password);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesOnlineAsync(Requests\DeleteSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->deleteProtectionOnlineAsync($request->document, $request->password);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesProtectionPropertiesOnlineAsyncWithHttpInfo(Requests\DeleteSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->deleteProtectionOnlineAsyncWithHttpInfo($request->document, $request->password);
    }
    /**
     */
    public function deleteBackground($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteBackgroundWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->deleteBackgroundRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteBackgroundAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteBackgroundAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteBackgroundAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->deleteBackgroundRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlidesSlideBackground'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteBackgroundRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlidesSlideBackground');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlidesSlideBackground');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/background';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }

    /**
     * @deprecated
     */
    public function deleteSlidesSlideBackground(Requests\DeleteSlidesSlideBackgroundRequest $request)
    {
        return $this->deleteBackground($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesSlideBackgroundWithHttpInfo(Requests\DeleteSlidesSlideBackgroundRequest $request)
    {
        return $this->deleteBackgroundWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesSlideBackgroundAsync(Requests\DeleteSlidesSlideBackgroundRequest $request)
    {
        return $this->deleteBackgroundAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function deleteSlidesSlideBackgroundAsyncWithHttpInfo(Requests\DeleteSlidesSlideBackgroundRequest $request)
    {
        return $this->deleteBackgroundAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteSubshapeParagraph($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSubshapeParagraphWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSubshapeParagraphAsync($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSubshapeParagraphAsyncWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSubshapeParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubshapeParagraphRequest($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteSubshapeParagraphRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $path = $requestObject->path;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSubshapeParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSubshapeParagraph');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteSubshapeParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSubshapeParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteSubshapeParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSubshapeParagraphs($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSubshapeParagraphsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphs, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSubshapeParagraphsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphs, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSubshapeParagraphsWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSubshapeParagraphsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphs, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSubshapeParagraphsAsync($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSubshapeParagraphsAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphs, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSubshapeParagraphsAsyncWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSubshapeParagraphsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphs, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSubshapeParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  array $$paragraphs The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubshapeParagraphsRequest($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphs = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteSubshapeParagraphsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $path = $requestObject->path;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphs = $requestObject->paragraphs;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSubshapeParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSubshapeParagraphs');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteSubshapeParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSubshapeParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($paragraphs !== null) {
            $queryParams['paragraphs'] = ObjectSerializer::toQueryValue($paragraphs);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSubshapePortion($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSubshapePortionWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSubshapePortionAsync($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSubshapePortionAsyncWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSubshapePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubshapePortionRequest($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portionIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteSubshapePortionRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $path = $requestObject->path;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $portionIndex = $requestObject->portionIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSubshapePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSubshapePortion');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteSubshapePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSubshapePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteSubshapePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling deleteSubshapePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSubshapePortions($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSubshapePortionsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSubshapePortionsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSubshapePortionsWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSubshapePortionsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSubshapePortionsAsync($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSubshapePortionsAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSubshapePortionsAsyncWithHttpInfo($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSubshapePortionsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSubshapePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  array $$portions The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubshapePortionsRequest($name = null, $slideIndex = null, $path = null, $shapeIndex = null, $paragraphIndex = null, $portions = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteSubshapePortionsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $path = $requestObject->path;
            $shapeIndex = $requestObject->shapeIndex;
            $paragraphIndex = $requestObject->paragraphIndex;
            $portions = $requestObject->portions;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSubshapePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSubshapePortions');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteSubshapePortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSubshapePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteSubshapePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($portions !== null) {
            $queryParams['portions'] = ObjectSerializer::toQueryValue($portions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteWatermark($name = null, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->deleteWatermarkWithHttpInfo($name, $shapeName, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteWatermarkWithHttpInfo($name, $shapeName, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function deleteWatermarkWithHttpInfo($name = null, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteWatermarkRequest($name, $shapeName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteWatermarkAsync($name = null, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteWatermarkAsyncWithHttpInfo($name, $shapeName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteWatermarkAsyncWithHttpInfo($name = null, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteWatermarkRequest($name, $shapeName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteWatermark'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$shapeName Name of the watermark shape. If null, default value \&quot;watermark\&quot;is used. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWatermarkRequest($name = null, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DeleteWatermarkRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $shapeName = $requestObject->shapeName;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteWatermark');
        }

        $resourcePath = '/slides/{name}/watermark/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeName !== null) {
            $queryParams['shapeName'] = ObjectSerializer::toQueryValue($shapeName);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function downloadFile($path = null, $storageName = null, $versionId = null)
    {
        try {
            list($response) = $this->downloadFileWithHttpInfo($path, $storageName, $versionId);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadFileWithHttpInfo($path, $storageName, $versionId);
            return $response;
        } 
    }

    /**
     */
    public function downloadFileWithHttpInfo($path = null, $storageName = null, $versionId = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadFileRequest($path, $storageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadFileAsync($path = null, $storageName = null, $versionId = null)
    {
        return $this->downloadFileAsyncWithHttpInfo($path, $storageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadFileAsyncWithHttpInfo($path = null, $storageName = null, $versionId = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadFileRequest($path, $storageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadFile'
     *
     * @param  string $$path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  string $$versionId File version ID to download (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadFileRequest($path = null, $storageName = null, $versionId = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\DownloadFileRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
            $versionId = $requestObject->versionId;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling downloadFile');
        }

        $resourcePath = '/slides/storage/file/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getDiscUsage($storageName = null)
    {
        try {
            list($response) = $this->getDiscUsageWithHttpInfo($storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getDiscUsageWithHttpInfo($storageName);
            return $response;
        } 
    }

    /**
     */
    public function getDiscUsageWithHttpInfo($storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DiscUsage';
        $httpRequest = $this->getDiscUsageRequest($storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DiscUsage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getDiscUsageAsync($storageName = null)
    {
        return $this->getDiscUsageAsyncWithHttpInfo($storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getDiscUsageAsyncWithHttpInfo($storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DiscUsage';
        $httpRequest = $this->getDiscUsageRequest($storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getDiscUsage'
     *
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscUsageRequest($storageName = null)
    {
        if (is_a($storageName, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetDiscUsageRequest')) {
            $requestObject = $storageName;
            $storageName = $requestObject->storageName;
        }

        $resourcePath = '/slides/storage/disc';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFileVersions($path = null, $storageName = null)
    {
        try {
            list($response) = $this->getFileVersionsWithHttpInfo($path, $storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFileVersionsWithHttpInfo($path, $storageName);
            return $response;
        } 
    }

    /**
     */
    public function getFileVersionsWithHttpInfo($path = null, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FileVersions';
        $httpRequest = $this->getFileVersionsRequest($path, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FileVersions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFileVersionsAsync($path = null, $storageName = null)
    {
        return $this->getFileVersionsAsyncWithHttpInfo($path, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFileVersionsAsyncWithHttpInfo($path = null, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FileVersions';
        $httpRequest = $this->getFileVersionsRequest($path, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFileVersions'
     *
     * @param  string $$path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFileVersionsRequest($path = null, $storageName = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetFileVersionsRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getFileVersions');
        }

        $resourcePath = '/slides/storage/version/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFilesList($path = null, $storageName = null)
    {
        try {
            list($response) = $this->getFilesListWithHttpInfo($path, $storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFilesListWithHttpInfo($path, $storageName);
            return $response;
        } 
    }

    /**
     */
    public function getFilesListWithHttpInfo($path = null, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesList';
        $httpRequest = $this->getFilesListRequest($path, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FilesList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFilesListAsync($path = null, $storageName = null)
    {
        return $this->getFilesListAsyncWithHttpInfo($path, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFilesListAsyncWithHttpInfo($path = null, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesList';
        $httpRequest = $this->getFilesListRequest($path, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFilesList'
     *
     * @param  string $$path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFilesListRequest($path = null, $storageName = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetFilesListRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getFilesList');
        }

        $resourcePath = '/slides/storage/folder/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getLayoutSlide($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getLayoutSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getLayoutSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getLayoutSlideWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->getLayoutSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getLayoutSlideAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getLayoutSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getLayoutSlideAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->getLayoutSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getLayoutSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLayoutSlideRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetLayoutSlideRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getLayoutSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getLayoutSlide');
        }

        $resourcePath = '/slides/{name}/layoutSlides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getLayoutSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getLayoutSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getLayoutSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getLayoutSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides';
        $httpRequest = $this->getLayoutSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getLayoutSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getLayoutSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getLayoutSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides';
        $httpRequest = $this->getLayoutSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getLayoutSlidesList'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLayoutSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getLayoutSlidesList');
        }

        $resourcePath = '/slides/{name}/layoutSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getLayoutSlidesList(Requests\GetLayoutSlidesListRequest $request)
    {
        return $this->getLayoutSlides($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getLayoutSlidesListWithHttpInfo(Requests\GetLayoutSlidesListRequest $request)
    {
        return $this->getLayoutSlidesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getLayoutSlidesListAsync(Requests\GetLayoutSlidesListRequest $request)
    {
        return $this->getLayoutSlidesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getLayoutSlidesListAsyncWithHttpInfo(Requests\GetLayoutSlidesListRequest $request)
    {
        return $this->getLayoutSlidesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getMasterSlide($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getMasterSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getMasterSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getMasterSlideWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->getMasterSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getMasterSlideAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getMasterSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getMasterSlideAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->getMasterSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getMasterSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMasterSlideRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetMasterSlideRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getMasterSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getMasterSlide');
        }

        $resourcePath = '/slides/{name}/masterSlides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getMasterSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getMasterSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getMasterSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getMasterSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides';
        $httpRequest = $this->getMasterSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getMasterSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getMasterSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getMasterSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides';
        $httpRequest = $this->getMasterSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getMasterSlidesList'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMasterSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getMasterSlidesList');
        }

        $resourcePath = '/slides/{name}/masterSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getMasterSlidesList(Requests\GetMasterSlidesListRequest $request)
    {
        return $this->getMasterSlides($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getMasterSlidesListWithHttpInfo(Requests\GetMasterSlidesListRequest $request)
    {
        return $this->getMasterSlidesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getMasterSlidesListAsync(Requests\GetMasterSlidesListRequest $request)
    {
        return $this->getMasterSlidesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getMasterSlidesListAsyncWithHttpInfo(Requests\GetMasterSlidesListRequest $request)
    {
        return $this->getMasterSlidesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getNotesSlide($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetNotesSlideRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function notesSlideExists($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->notesSlideExistsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->notesSlideExistsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function notesSlideExistsWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\EntityExists', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function notesSlideExistsAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->notesSlideExistsAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function notesSlideExistsAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideExists'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesSlideExistsRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideExists');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideExists');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/exist';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getNotesSlideExists(Requests\GetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExists($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideExistsWithHttpInfo(Requests\GetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideExistsAsync(Requests\GetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideExistsAsyncWithHttpInfo(Requests\GetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getNotesSlideHeaderFooter($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideHeaderFooterWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->getNotesSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideHeaderFooterAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideHeaderFooterAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->getNotesSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideHeaderFooterRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetNotesSlideHeaderFooterRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getNotesSlideShape($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideShapeWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideShapeAsync($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideShapeAsyncWithHttpInfo($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideShapeRequest($name = null, $slideIndex = null, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetNotesSlideShapeRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $shapeIndex = $requestObject->shapeIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getNotesSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getNotesSlideParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideShapeParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideShapeParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideShapeParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getNotesSlideShapeParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getNotesSlideShapeParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraph(Requests\GetNotesSlideShapeParagraphRequest $request)
    {
        return $this->getNotesSlideParagraph($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphWithHttpInfo(Requests\GetNotesSlideShapeParagraphRequest $request)
    {
        return $this->getNotesSlideParagraphWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphAsync(Requests\GetNotesSlideShapeParagraphRequest $request)
    {
        return $this->getNotesSlideParagraphAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphAsyncWithHttpInfo(Requests\GetNotesSlideShapeParagraphRequest $request)
    {
        return $this->getNotesSlideParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getNotesSlideParagraphs($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getNotesSlideParagraphsRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideParagraphsAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getNotesSlideParagraphsRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideShapeParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideParagraphsRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideShapeParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideShapeParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getNotesSlideShapeParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphs(Requests\GetNotesSlideShapeParagraphsRequest $request)
    {
        return $this->getNotesSlideParagraphs($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphsWithHttpInfo(Requests\GetNotesSlideShapeParagraphsRequest $request)
    {
        return $this->getNotesSlideParagraphsWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphsAsync(Requests\GetNotesSlideShapeParagraphsRequest $request)
    {
        return $this->getNotesSlideParagraphsAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapeParagraphsAsyncWithHttpInfo(Requests\GetNotesSlideShapeParagraphsRequest $request)
    {
        return $this->getNotesSlideParagraphsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getNotesSlidePortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlidePortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideShapePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideShapePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideShapePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getNotesSlideShapePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getNotesSlideShapePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getNotesSlideShapePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortion(Requests\GetNotesSlideShapePortionRequest $request)
    {
        return $this->getNotesSlidePortion($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortionWithHttpInfo(Requests\GetNotesSlideShapePortionRequest $request)
    {
        return $this->getNotesSlidePortionWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortionAsync(Requests\GetNotesSlideShapePortionRequest $request)
    {
        return $this->getNotesSlidePortionAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortionAsyncWithHttpInfo(Requests\GetNotesSlideShapePortionRequest $request)
    {
        return $this->getNotesSlidePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getNotesSlidePortions($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlidePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlidePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlidePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getNotesSlidePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlidePortionsAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getNotesSlidePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideShapePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlidePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideShapePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideShapePortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getNotesSlideShapePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getNotesSlideShapePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortions(Requests\GetNotesSlideShapePortionsRequest $request)
    {
        return $this->getNotesSlidePortions($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortionsWithHttpInfo(Requests\GetNotesSlideShapePortionsRequest $request)
    {
        return $this->getNotesSlidePortionsWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortionsAsync(Requests\GetNotesSlideShapePortionsRequest $request)
    {
        return $this->getNotesSlidePortionsAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideShapePortionsAsyncWithHttpInfo(Requests\GetNotesSlideShapePortionsRequest $request)
    {
        return $this->getNotesSlidePortionsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getNotesSlideShapes($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideShapesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideShapesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideShapesWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getNotesSlideShapesRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideShapesAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideShapesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideShapesAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getNotesSlideShapesRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideShapesRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetNotesSlideShapesRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideShapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function downloadNotesSlide($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadNotesSlideWithHttpInfo($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadNotesSlideWithHttpInfo($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadNotesSlideWithHttpInfo($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideRequest($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadNotesSlideAsync($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadNotesSlideAsyncWithHttpInfo($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadNotesSlideAsyncWithHttpInfo($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideRequest($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideWithFormat'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  int $$width Output file width. (optional)
     * @param  int $$height Output file height. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadNotesSlideRequest($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideWithFormat');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideWithFormat');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling getNotesSlideWithFormat');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getNotesSlideWithFormat(Requests\GetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlide($request->name, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideWithFormatWithHttpInfo(Requests\GetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideWithHttpInfo($request->name, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideWithFormatAsync(Requests\GetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideAsync($request->name, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function getNotesSlideWithFormatAsyncWithHttpInfo(Requests\GetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function getPortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getParagraphPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getParagraphPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getParagraphPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getParagraphPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getParagraphPortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getParagraphPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getParagraphPortion(Requests\GetParagraphPortionRequest $request)
    {
        return $this->getPortion($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getParagraphPortionWithHttpInfo(Requests\GetParagraphPortionRequest $request)
    {
        return $this->getPortionWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getParagraphPortionAsync(Requests\GetParagraphPortionRequest $request)
    {
        return $this->getPortionAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getParagraphPortionAsyncWithHttpInfo(Requests\GetParagraphPortionRequest $request)
    {
        return $this->getPortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getPortions($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getPortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPortionsAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getPortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getParagraphPortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getParagraphPortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getParagraphPortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getParagraphPortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getParagraphPortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getParagraphPortions(Requests\GetParagraphPortionsRequest $request)
    {
        return $this->getPortions($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getParagraphPortionsWithHttpInfo(Requests\GetParagraphPortionsRequest $request)
    {
        return $this->getPortionsWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getParagraphPortionsAsync(Requests\GetParagraphPortionsRequest $request)
    {
        return $this->getPortionsAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getParagraphPortionsAsyncWithHttpInfo(Requests\GetParagraphPortionsRequest $request)
    {
        return $this->getPortionsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSections($name = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSectionsWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSectionsWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSectionsWithHttpInfo($name = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->getSectionsRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSectionsAsync($name = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getSectionsAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSectionsAsyncWithHttpInfo($name = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->getSectionsRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSections'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSectionsRequest($name = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetSectionsRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSections');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getAnimation($name, $slideIndex, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getAnimationWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getAnimationWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getAnimationWithHttpInfo($name, $slideIndex, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->getAnimationRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getAnimationAsync($name, $slideIndex, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getAnimationAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getAnimationAsyncWithHttpInfo($name, $slideIndex, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->getAnimationRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. If specified, only effects related to that shape are returned. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAnimationRequest($name, $slideIndex, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeIndex !== null) {
            $queryParams['shapeIndex'] = ObjectSerializer::toQueryValue($shapeIndex);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideAnimation(Requests\GetSlideAnimationRequest $request)
    {
        return $this->getAnimation($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideAnimationWithHttpInfo(Requests\GetSlideAnimationRequest $request)
    {
        return $this->getAnimationWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideAnimationAsync(Requests\GetSlideAnimationRequest $request)
    {
        return $this->getAnimationAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideAnimationAsyncWithHttpInfo(Requests\GetSlideAnimationRequest $request)
    {
        return $this->getAnimationAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSlideHeaderFooter($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideHeaderFooterWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->getSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideHeaderFooterAsync($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideHeaderFooterAsyncWithHttpInfo($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->getSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideHeaderFooterRequest($name = null, $slideIndex = null, $password = null, $folder = null, $storage = null)
    {
        if (is_a($name, '\Aspose\Slides\Cloud\Sdk\Model\Requests\GetSlideHeaderFooterRequest')) {
            $requestObject = $name;
            $name = $requestObject->name;
            $slideIndex = $requestObject->slideIndex;
            $password = $requestObject->password;
            $folder = $requestObject->folder;
            $storage = $requestObject->storage;
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getShape($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getShapeAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShapeRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideShape(Requests\GetSlideShapeRequest $request)
    {
        return $this->getShape($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeWithHttpInfo(Requests\GetSlideShapeRequest $request)
    {
        return $this->getShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeAsync(Requests\GetSlideShapeRequest $request)
    {
        return $this->getShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeAsyncWithHttpInfo(Requests\GetSlideShapeRequest $request)
    {
        return $this->getShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideShapeParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideShapeParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideShapeParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSlideShapeParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSlideShapeParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraph(Requests\GetSlideShapeParagraphRequest $request)
    {
        return $this->getParagraph($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphWithHttpInfo(Requests\GetSlideShapeParagraphRequest $request)
    {
        return $this->getParagraphWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphAsync(Requests\GetSlideShapeParagraphRequest $request)
    {
        return $this->getParagraphAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphAsyncWithHttpInfo(Requests\GetSlideShapeParagraphRequest $request)
    {
        return $this->getParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getParagraphs($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getParagraphsRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getParagraphsAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getParagraphsRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideShapeParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParagraphsRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideShapeParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideShapeParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSlideShapeParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphs(Requests\GetSlideShapeParagraphsRequest $request)
    {
        return $this->getParagraphs($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphsWithHttpInfo(Requests\GetSlideShapeParagraphsRequest $request)
    {
        return $this->getParagraphsWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphsAsync(Requests\GetSlideShapeParagraphsRequest $request)
    {
        return $this->getParagraphsAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapeParagraphsAsyncWithHttpInfo(Requests\GetSlideShapeParagraphsRequest $request)
    {
        return $this->getParagraphsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getShapes($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getShapesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getShapesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getShapesWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getShapesRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getShapesAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getShapesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getShapesAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getShapesRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShapesRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideShapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideShapes(Requests\GetSlideShapesRequest $request)
    {
        return $this->getShapes($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapesWithHttpInfo(Requests\GetSlideShapesRequest $request)
    {
        return $this->getShapesWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapesAsync(Requests\GetSlideShapesRequest $request)
    {
        return $this->getShapesAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideShapesAsyncWithHttpInfo(Requests\GetSlideShapesRequest $request)
    {
        return $this->getShapesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSubshape($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSubshapeAsync($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideSubshape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideSubshape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideSubshape');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getSlideSubshape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSlideSubshape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideSubshape(Requests\GetSlideSubshapeRequest $request)
    {
        return $this->getSubshape($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeWithHttpInfo(Requests\GetSlideSubshapeRequest $request)
    {
        return $this->getSubshapeWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeAsync(Requests\GetSlideSubshapeRequest $request)
    {
        return $this->getSubshapeAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeAsyncWithHttpInfo(Requests\GetSlideSubshapeRequest $request)
    {
        return $this->getSubshapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSubshapeParagraph($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSubshapeParagraphAsync($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideSubshapeParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideSubshapeParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideSubshapeParagraph');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getSlideSubshapeParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSlideSubshapeParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSlideSubshapeParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraph(Requests\GetSlideSubshapeParagraphRequest $request)
    {
        return $this->getSubshapeParagraph($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphWithHttpInfo(Requests\GetSlideSubshapeParagraphRequest $request)
    {
        return $this->getSubshapeParagraphWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphAsync(Requests\GetSlideSubshapeParagraphRequest $request)
    {
        return $this->getSubshapeParagraphAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphAsyncWithHttpInfo(Requests\GetSlideSubshapeParagraphRequest $request)
    {
        return $this->getSubshapeParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSubshapeParagraphs($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSubshapeParagraphsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSubshapeParagraphsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSubshapeParagraphsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getSubshapeParagraphsRequest($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSubshapeParagraphsAsync($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSubshapeParagraphsAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSubshapeParagraphsAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getSubshapeParagraphsRequest($name, $slideIndex, $path, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideSubshapeParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubshapeParagraphsRequest($name, $slideIndex, $path, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideSubshapeParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideSubshapeParagraphs');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getSlideSubshapeParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSlideSubshapeParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphs(Requests\GetSlideSubshapeParagraphsRequest $request)
    {
        return $this->getSubshapeParagraphs($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphsWithHttpInfo(Requests\GetSlideSubshapeParagraphsRequest $request)
    {
        return $this->getSubshapeParagraphsWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphsAsync(Requests\GetSlideSubshapeParagraphsRequest $request)
    {
        return $this->getSubshapeParagraphsAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapeParagraphsAsyncWithHttpInfo(Requests\GetSlideSubshapeParagraphsRequest $request)
    {
        return $this->getSubshapeParagraphsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSubshapes($name, $slideIndex, $path, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSubshapesWithHttpInfo($name, $slideIndex, $path, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSubshapesWithHttpInfo($name, $slideIndex, $path, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSubshapesWithHttpInfo($name, $slideIndex, $path, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getSubshapesRequest($name, $slideIndex, $path, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSubshapesAsync($name, $slideIndex, $path, $password = null, $folder = null, $storage = null)
    {
        return $this->getSubshapesAsyncWithHttpInfo($name, $slideIndex, $path, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSubshapesAsyncWithHttpInfo($name, $slideIndex, $path, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getSubshapesRequest($name, $slideIndex, $path, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideSubshapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path (for smart art and group shapes). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubshapesRequest($name, $slideIndex, $path, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideSubshapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideSubshapes');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getSlideSubshapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapes(Requests\GetSlideSubshapesRequest $request)
    {
        return $this->getSubshapes($request->name, $request->slideIndex, $request->path, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapesWithHttpInfo(Requests\GetSlideSubshapesRequest $request)
    {
        return $this->getSubshapesWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapesAsync(Requests\GetSlideSubshapesRequest $request)
    {
        return $this->getSubshapesAsync($request->name, $request->slideIndex, $request->path, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlideSubshapesAsyncWithHttpInfo(Requests\GetSlideSubshapesRequest $request)
    {
        return $this->getSubshapesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getApiInfo()
    {
        try {
            list($response) = $this->getApiInfoWithHttpInfo();
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getApiInfoWithHttpInfo();
            return $response;
        } 
    }

    /**
     */
    public function getApiInfoWithHttpInfo()
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ApiInfo';
        $httpRequest = $this->getApiInfoRequest();
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ApiInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getApiInfoAsync()
    {
        return $this->getApiInfoAsyncWithHttpInfo()
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getApiInfoAsyncWithHttpInfo()
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ApiInfo';
        $httpRequest = $this->getApiInfoRequest();

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesApiInfo'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApiInfoRequest()
    {

        $resourcePath = '/slides/info';
        $queryParams = [];
        $headerParams = [];


        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesApiInfo()
    {
        return $this->getApiInfo();
    }

    /**
     * @deprecated
     */
    public function getSlidesApiInfoWithHttpInfo()
    {
        return $this->getApiInfoWithHttpInfo();
    }

    /**
     * @deprecated
     */
    public function getSlidesApiInfoAsync()
    {
        return $this->getApiInfoAsync();
    }

    /**
     * @deprecated
     */
    public function getSlidesApiInfoAsyncWithHttpInfo()
    {
        return $this->getApiInfoAsyncWithHttpInfo();
    }
    /**
     */
    public function getPresentation($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPresentationWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPresentationWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPresentationWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->getPresentationRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPresentationAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getPresentationAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPresentationAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->getPresentationRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesDocument'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPresentationRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesDocument');
        }

        $resourcePath = '/slides/{name}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesDocument(Requests\GetSlidesDocumentRequest $request)
    {
        return $this->getPresentation($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentWithHttpInfo(Requests\GetSlidesDocumentRequest $request)
    {
        return $this->getPresentationWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentAsync(Requests\GetSlidesDocumentRequest $request)
    {
        return $this->getPresentationAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentAsyncWithHttpInfo(Requests\GetSlidesDocumentRequest $request)
    {
        return $this->getPresentationAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getDocumentProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getDocumentPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->getDocumentPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getDocumentPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getDocumentPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getDocumentPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->getDocumentPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesDocumentProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesDocumentProperties');
        }

        $resourcePath = '/slides/{name}/documentproperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentProperties(Requests\GetSlidesDocumentPropertiesRequest $request)
    {
        return $this->getDocumentProperties($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentPropertiesWithHttpInfo(Requests\GetSlidesDocumentPropertiesRequest $request)
    {
        return $this->getDocumentPropertiesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentPropertiesAsync(Requests\GetSlidesDocumentPropertiesRequest $request)
    {
        return $this->getDocumentPropertiesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentPropertiesAsyncWithHttpInfo(Requests\GetSlidesDocumentPropertiesRequest $request)
    {
        return $this->getDocumentPropertiesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getDocumentProperty($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getDocumentPropertyWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->getDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getDocumentPropertyAsync($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        return $this->getDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->getDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesDocumentProperty'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$propertyName The property name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentPropertyRequest($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($propertyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $propertyName when calling getSlidesDocumentProperty');
        }

        $resourcePath = '/slides/{name}/documentproperties/{propertyName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "propertyName", $propertyName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentProperty(Requests\GetSlidesDocumentPropertyRequest $request)
    {
        return $this->getDocumentProperty($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentPropertyWithHttpInfo(Requests\GetSlidesDocumentPropertyRequest $request)
    {
        return $this->getDocumentPropertyWithHttpInfo($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentPropertyAsync(Requests\GetSlidesDocumentPropertyRequest $request)
    {
        return $this->getDocumentPropertyAsync($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesDocumentPropertyAsyncWithHttpInfo(Requests\GetSlidesDocumentPropertyRequest $request)
    {
        return $this->getDocumentPropertyAsyncWithHttpInfo($request->name, $request->propertyName, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadImageDefaultFormat($name, $index, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImageDefaultFormatWithHttpInfo($name, $index, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageDefaultFormatWithHttpInfo($name, $index, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageDefaultFormatWithHttpInfo($name, $index, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatRequest($name, $index, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageDefaultFormatAsync($name, $index, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImageDefaultFormatAsyncWithHttpInfo($name, $index, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageDefaultFormatAsyncWithHttpInfo($name, $index, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatRequest($name, $index, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesImageWithDefaultFormat'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageDefaultFormatRequest($name, $index, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesImageWithDefaultFormat');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling getSlidesImageWithDefaultFormat');
        }

        $resourcePath = '/slides/{name}/images/{index}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithDefaultFormat(Requests\GetSlidesImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormat($request->name, $request->index, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithDefaultFormatWithHttpInfo(Requests\GetSlidesImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatWithHttpInfo($request->name, $request->index, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithDefaultFormatAsync(Requests\GetSlidesImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatAsync($request->name, $request->index, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithDefaultFormatAsyncWithHttpInfo(Requests\GetSlidesImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatAsyncWithHttpInfo($request->name, $request->index, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadImage($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImageWithHttpInfo($name, $index, $format, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageWithHttpInfo($name, $index, $format, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageWithHttpInfo($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageRequest($name, $index, $format, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageAsync($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImageAsyncWithHttpInfo($name, $index, $format, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageAsyncWithHttpInfo($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageRequest($name, $index, $format, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesImageWithFormat'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageRequest($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesImageWithFormat');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling getSlidesImageWithFormat');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling getSlidesImageWithFormat');
        }

        $resourcePath = '/slides/{name}/images/{index}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithFormat(Requests\GetSlidesImageWithFormatRequest $request)
    {
        return $this->downloadImage($request->name, $request->index, $request->format, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithFormatWithHttpInfo(Requests\GetSlidesImageWithFormatRequest $request)
    {
        return $this->downloadImageWithHttpInfo($request->name, $request->index, $request->format, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithFormatAsync(Requests\GetSlidesImageWithFormatRequest $request)
    {
        return $this->downloadImageAsync($request->name, $request->index, $request->format, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImageWithFormatAsyncWithHttpInfo(Requests\GetSlidesImageWithFormatRequest $request)
    {
        return $this->downloadImageAsyncWithHttpInfo($request->name, $request->index, $request->format, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getPresentationImages($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPresentationImagesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPresentationImagesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPresentationImagesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getPresentationImagesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Images', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPresentationImagesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getPresentationImagesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPresentationImagesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getPresentationImagesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesImages'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPresentationImagesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesImages');
        }

        $resourcePath = '/slides/{name}/images';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesImages(Requests\GetSlidesImagesRequest $request)
    {
        return $this->getPresentationImages($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImagesWithHttpInfo(Requests\GetSlidesImagesRequest $request)
    {
        return $this->getPresentationImagesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImagesAsync(Requests\GetSlidesImagesRequest $request)
    {
        return $this->getPresentationImagesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesImagesAsyncWithHttpInfo(Requests\GetSlidesImagesRequest $request)
    {
        return $this->getPresentationImagesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getPlaceholder($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPlaceholderWithHttpInfo($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPlaceholderWithHttpInfo($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPlaceholderWithHttpInfo($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholder';
        $httpRequest = $this->getPlaceholderRequest($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Placeholder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPlaceholderAsync($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPlaceholderAsyncWithHttpInfo($name, $slideIndex, $placeholderIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPlaceholderAsyncWithHttpInfo($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholder';
        $httpRequest = $this->getPlaceholderRequest($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesPlaceholder'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$placeholderIndex Placeholder index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlaceholderRequest($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesPlaceholder');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesPlaceholder');
        }
        // verify the required parameter 'placeholder_index' is set
        if ($placeholderIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $placeholderIndex when calling getSlidesPlaceholder');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/placeholders/{placeholderIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "placeholderIndex", $placeholderIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholder(Requests\GetSlidesPlaceholderRequest $request)
    {
        return $this->getPlaceholder($request->name, $request->slideIndex, $request->placeholderIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholderWithHttpInfo(Requests\GetSlidesPlaceholderRequest $request)
    {
        return $this->getPlaceholderWithHttpInfo($request->name, $request->slideIndex, $request->placeholderIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholderAsync(Requests\GetSlidesPlaceholderRequest $request)
    {
        return $this->getPlaceholderAsync($request->name, $request->slideIndex, $request->placeholderIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholderAsyncWithHttpInfo(Requests\GetSlidesPlaceholderRequest $request)
    {
        return $this->getPlaceholderAsyncWithHttpInfo($request->name, $request->slideIndex, $request->placeholderIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getPlaceholders($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPlaceholdersWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPlaceholdersWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPlaceholdersWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholders';
        $httpRequest = $this->getPlaceholdersRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Placeholders', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPlaceholdersAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPlaceholdersAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPlaceholdersAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholders';
        $httpRequest = $this->getPlaceholdersRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesPlaceholders'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlaceholdersRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesPlaceholders');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesPlaceholders');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/placeholders';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholders(Requests\GetSlidesPlaceholdersRequest $request)
    {
        return $this->getPlaceholders($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholdersWithHttpInfo(Requests\GetSlidesPlaceholdersRequest $request)
    {
        return $this->getPlaceholdersWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholdersAsync(Requests\GetSlidesPlaceholdersRequest $request)
    {
        return $this->getPlaceholdersAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPlaceholdersAsyncWithHttpInfo(Requests\GetSlidesPlaceholdersRequest $request)
    {
        return $this->getPlaceholdersAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getPresentationTextItems($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPresentationTextItemsWithHttpInfo($name, $withEmpty, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPresentationTextItemsWithHttpInfo($name, $withEmpty, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPresentationTextItemsWithHttpInfo($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getPresentationTextItemsRequest($name, $withEmpty, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TextItems', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPresentationTextItemsAsync($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getPresentationTextItemsAsyncWithHttpInfo($name, $withEmpty, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPresentationTextItemsAsyncWithHttpInfo($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getPresentationTextItemsRequest($name, $withEmpty, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesPresentationTextItems'
     *
     * @param  string $$name Document name. (required)
     * @param  bool $$withEmpty True to incude empty items. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPresentationTextItemsRequest($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesPresentationTextItems');
        }

        $resourcePath = '/slides/{name}/textItems';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withEmpty !== null) {
            $queryParams['withEmpty'] = ObjectSerializer::toQueryValue($withEmpty);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesPresentationTextItems(Requests\GetSlidesPresentationTextItemsRequest $request)
    {
        return $this->getPresentationTextItems($request->name, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPresentationTextItemsWithHttpInfo(Requests\GetSlidesPresentationTextItemsRequest $request)
    {
        return $this->getPresentationTextItemsWithHttpInfo($request->name, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPresentationTextItemsAsync(Requests\GetSlidesPresentationTextItemsRequest $request)
    {
        return $this->getPresentationTextItemsAsync($request->name, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesPresentationTextItemsAsyncWithHttpInfo(Requests\GetSlidesPresentationTextItemsRequest $request)
    {
        return $this->getPresentationTextItemsAsyncWithHttpInfo($request->name, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getProtectionProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getProtectionPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getProtectionPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getProtectionPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->getProtectionPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getProtectionPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getProtectionPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getProtectionPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->getProtectionPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesProtectionProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProtectionPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesProtectionProperties');
        }

        $resourcePath = '/slides/{name}/protection';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesProtectionProperties(Requests\GetSlidesProtectionPropertiesRequest $request)
    {
        return $this->getProtectionProperties($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesProtectionPropertiesWithHttpInfo(Requests\GetSlidesProtectionPropertiesRequest $request)
    {
        return $this->getProtectionPropertiesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesProtectionPropertiesAsync(Requests\GetSlidesProtectionPropertiesRequest $request)
    {
        return $this->getProtectionPropertiesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesProtectionPropertiesAsyncWithHttpInfo(Requests\GetSlidesProtectionPropertiesRequest $request)
    {
        return $this->getProtectionPropertiesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->getSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->getSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlide(Requests\GetSlidesSlideRequest $request)
    {
        return $this->getSlide($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideWithHttpInfo(Requests\GetSlidesSlideRequest $request)
    {
        return $this->getSlideWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideAsync(Requests\GetSlidesSlideRequest $request)
    {
        return $this->getSlideAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideAsyncWithHttpInfo(Requests\GetSlidesSlideRequest $request)
    {
        return $this->getSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getBackground($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getBackgroundWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->getBackgroundRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getBackgroundAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getBackgroundAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getBackgroundAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->getBackgroundRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlideBackground'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBackgroundRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlideBackground');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesSlideBackground');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/background';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideBackground(Requests\GetSlidesSlideBackgroundRequest $request)
    {
        return $this->getBackground($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideBackgroundWithHttpInfo(Requests\GetSlidesSlideBackgroundRequest $request)
    {
        return $this->getBackgroundWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideBackgroundAsync(Requests\GetSlidesSlideBackgroundRequest $request)
    {
        return $this->getBackgroundAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideBackgroundAsyncWithHttpInfo(Requests\GetSlidesSlideBackgroundRequest $request)
    {
        return $this->getBackgroundAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getComments($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getCommentsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getCommentsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getCommentsWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->getCommentsRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideComments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getCommentsAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getCommentsAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getCommentsAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->getCommentsRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlideComments'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCommentsRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlideComments');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesSlideComments');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/comments';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideComments(Requests\GetSlidesSlideCommentsRequest $request)
    {
        return $this->getComments($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideCommentsWithHttpInfo(Requests\GetSlidesSlideCommentsRequest $request)
    {
        return $this->getCommentsWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideCommentsAsync(Requests\GetSlidesSlideCommentsRequest $request)
    {
        return $this->getCommentsAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideCommentsAsyncWithHttpInfo(Requests\GetSlidesSlideCommentsRequest $request)
    {
        return $this->getCommentsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSlideImages($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideImagesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideImagesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideImagesWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getSlideImagesRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Images', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideImagesAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideImagesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideImagesAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getSlideImagesRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlideImages'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideImagesRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlideImages');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesSlideImages');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/images';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideImages(Requests\GetSlidesSlideImagesRequest $request)
    {
        return $this->getSlideImages($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideImagesWithHttpInfo(Requests\GetSlidesSlideImagesRequest $request)
    {
        return $this->getSlideImagesWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideImagesAsync(Requests\GetSlidesSlideImagesRequest $request)
    {
        return $this->getSlideImagesAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideImagesAsyncWithHttpInfo(Requests\GetSlidesSlideImagesRequest $request)
    {
        return $this->getSlideImagesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSlideProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlidePropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlidePropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlidePropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->getSlidePropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlidePropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlidePropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlidePropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->getSlidePropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlideProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlidePropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlideProperties');
        }

        $resourcePath = '/slides/{name}/slideProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideProperties(Requests\GetSlidesSlidePropertiesRequest $request)
    {
        return $this->getSlideProperties($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidePropertiesWithHttpInfo(Requests\GetSlidesSlidePropertiesRequest $request)
    {
        return $this->getSlidePropertiesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidePropertiesAsync(Requests\GetSlidesSlidePropertiesRequest $request)
    {
        return $this->getSlidePropertiesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidePropertiesAsyncWithHttpInfo(Requests\GetSlidesSlidePropertiesRequest $request)
    {
        return $this->getSlidePropertiesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSlideTextItems($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideTextItemsWithHttpInfo($name, $slideIndex, $withEmpty, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideTextItemsWithHttpInfo($name, $slideIndex, $withEmpty, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideTextItemsWithHttpInfo($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getSlideTextItemsRequest($name, $slideIndex, $withEmpty, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TextItems', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideTextItemsAsync($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideTextItemsAsyncWithHttpInfo($name, $slideIndex, $withEmpty, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideTextItemsAsyncWithHttpInfo($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getSlideTextItemsRequest($name, $slideIndex, $withEmpty, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlideTextItems'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  bool $$withEmpty True to include empty items. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideTextItemsRequest($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlideTextItems');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesSlideTextItems');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/textItems';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withEmpty !== null) {
            $queryParams['withEmpty'] = ObjectSerializer::toQueryValue($withEmpty);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideTextItems(Requests\GetSlidesSlideTextItemsRequest $request)
    {
        return $this->getSlideTextItems($request->name, $request->slideIndex, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideTextItemsWithHttpInfo(Requests\GetSlidesSlideTextItemsRequest $request)
    {
        return $this->getSlideTextItemsWithHttpInfo($request->name, $request->slideIndex, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideTextItemsAsync(Requests\GetSlidesSlideTextItemsRequest $request)
    {
        return $this->getSlideTextItemsAsync($request->name, $request->slideIndex, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlideTextItemsAsyncWithHttpInfo(Requests\GetSlidesSlideTextItemsRequest $request)
    {
        return $this->getSlideTextItemsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->withEmpty, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->getSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->getSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesSlidesList'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesSlidesList');
        }

        $resourcePath = '/slides/{name}/slides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidesList(Requests\GetSlidesSlidesListRequest $request)
    {
        return $this->getSlides($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidesListWithHttpInfo(Requests\GetSlidesSlidesListRequest $request)
    {
        return $this->getSlidesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidesListAsync(Requests\GetSlidesSlidesListRequest $request)
    {
        return $this->getSlidesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesSlidesListAsyncWithHttpInfo(Requests\GetSlidesSlidesListRequest $request)
    {
        return $this->getSlidesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getTheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getThemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getThemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getThemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Theme';
        $httpRequest = $this->getThemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Theme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getThemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getThemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getThemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Theme';
        $httpRequest = $this->getThemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesTheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesTheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesTheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesTheme(Requests\GetSlidesThemeRequest $request)
    {
        return $this->getTheme($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeWithHttpInfo(Requests\GetSlidesThemeRequest $request)
    {
        return $this->getThemeWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeAsync(Requests\GetSlidesThemeRequest $request)
    {
        return $this->getThemeAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeAsyncWithHttpInfo(Requests\GetSlidesThemeRequest $request)
    {
        return $this->getThemeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getColorScheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getColorSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getColorSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getColorSchemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ColorScheme';
        $httpRequest = $this->getColorSchemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ColorScheme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getColorSchemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getColorSchemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getColorSchemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ColorScheme';
        $httpRequest = $this->getColorSchemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesThemeColorScheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getColorSchemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesThemeColorScheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesThemeColorScheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme/colorScheme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeColorScheme(Requests\GetSlidesThemeColorSchemeRequest $request)
    {
        return $this->getColorScheme($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeColorSchemeWithHttpInfo(Requests\GetSlidesThemeColorSchemeRequest $request)
    {
        return $this->getColorSchemeWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeColorSchemeAsync(Requests\GetSlidesThemeColorSchemeRequest $request)
    {
        return $this->getColorSchemeAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeColorSchemeAsyncWithHttpInfo(Requests\GetSlidesThemeColorSchemeRequest $request)
    {
        return $this->getColorSchemeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getFontScheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getFontSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFontSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getFontSchemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontScheme';
        $httpRequest = $this->getFontSchemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontScheme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFontSchemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getFontSchemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFontSchemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontScheme';
        $httpRequest = $this->getFontSchemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesThemeFontScheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFontSchemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesThemeFontScheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesThemeFontScheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme/fontScheme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFontScheme(Requests\GetSlidesThemeFontSchemeRequest $request)
    {
        return $this->getFontScheme($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFontSchemeWithHttpInfo(Requests\GetSlidesThemeFontSchemeRequest $request)
    {
        return $this->getFontSchemeWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFontSchemeAsync(Requests\GetSlidesThemeFontSchemeRequest $request)
    {
        return $this->getFontSchemeAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFontSchemeAsyncWithHttpInfo(Requests\GetSlidesThemeFontSchemeRequest $request)
    {
        return $this->getFontSchemeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getFormatScheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getFormatSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFormatSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getFormatSchemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FormatScheme';
        $httpRequest = $this->getFormatSchemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FormatScheme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFormatSchemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getFormatSchemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFormatSchemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FormatScheme';
        $httpRequest = $this->getFormatSchemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesThemeFormatScheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFormatSchemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesThemeFormatScheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlidesThemeFormatScheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme/formatScheme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFormatScheme(Requests\GetSlidesThemeFormatSchemeRequest $request)
    {
        return $this->getFormatScheme($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFormatSchemeWithHttpInfo(Requests\GetSlidesThemeFormatSchemeRequest $request)
    {
        return $this->getFormatSchemeWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFormatSchemeAsync(Requests\GetSlidesThemeFormatSchemeRequest $request)
    {
        return $this->getFormatSchemeAsync($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesThemeFormatSchemeAsyncWithHttpInfo(Requests\GetSlidesThemeFormatSchemeRequest $request)
    {
        return $this->getFormatSchemeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getViewProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getViewPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getViewPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getViewPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->getViewPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getViewPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getViewPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getViewPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->getViewPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlidesViewProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getViewPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlidesViewProperties');
        }

        $resourcePath = '/slides/{name}/viewProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSlidesViewProperties(Requests\GetSlidesViewPropertiesRequest $request)
    {
        return $this->getViewProperties($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesViewPropertiesWithHttpInfo(Requests\GetSlidesViewPropertiesRequest $request)
    {
        return $this->getViewPropertiesWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesViewPropertiesAsync(Requests\GetSlidesViewPropertiesRequest $request)
    {
        return $this->getViewPropertiesAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSlidesViewPropertiesAsyncWithHttpInfo(Requests\GetSlidesViewPropertiesRequest $request)
    {
        return $this->getViewPropertiesAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSubshapePortion($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSubshapePortionAsync($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSubshapeParagraphPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSubshapeParagraphPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSubshapeParagraphPortion');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getSubshapeParagraphPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSubshapeParagraphPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSubshapeParagraphPortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getSubshapeParagraphPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortion(Requests\GetSubshapeParagraphPortionRequest $request)
    {
        return $this->getSubshapePortion($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortionWithHttpInfo(Requests\GetSubshapeParagraphPortionRequest $request)
    {
        return $this->getSubshapePortionWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortionAsync(Requests\GetSubshapeParagraphPortionRequest $request)
    {
        return $this->getSubshapePortionAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortionAsyncWithHttpInfo(Requests\GetSubshapeParagraphPortionRequest $request)
    {
        return $this->getSubshapePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function getSubshapePortions($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSubshapePortionsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSubshapePortionsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSubshapePortionsWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getSubshapePortionsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSubshapePortionsAsync($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSubshapePortionsAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSubshapePortionsAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getSubshapePortionsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSubshapeParagraphPortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubshapePortionsRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSubshapeParagraphPortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSubshapeParagraphPortions');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getSubshapeParagraphPortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSubshapeParagraphPortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSubshapeParagraphPortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortions(Requests\GetSubshapeParagraphPortionsRequest $request)
    {
        return $this->getSubshapePortions($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortionsWithHttpInfo(Requests\GetSubshapeParagraphPortionsRequest $request)
    {
        return $this->getSubshapePortionsWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortionsAsync(Requests\GetSubshapeParagraphPortionsRequest $request)
    {
        return $this->getSubshapePortionsAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function getSubshapeParagraphPortionsAsyncWithHttpInfo(Requests\GetSubshapeParagraphPortionsRequest $request)
    {
        return $this->getSubshapePortionsAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function moveFile($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        try {
            $this->moveFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        }
        catch(RepeatRequestException $ex) {
            $this->moveFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        } 
    }

    /**
     */
    public function moveFileWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveFileAsync($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        return $this->moveFileAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveFileAsyncWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'moveFile'
     *
     * @param  string $$srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $$destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     * @param  string $$versionId File version ID to move (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveFileRequest($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        if (is_a($srcPath, '\Aspose\Slides\Cloud\Sdk\Model\Requests\MoveFileRequest')) {
            $requestObject = $srcPath;
            $srcPath = $requestObject->srcPath;
            $destPath = $requestObject->destPath;
            $srcStorageName = $requestObject->srcStorageName;
            $destStorageName = $requestObject->destStorageName;
            $versionId = $requestObject->versionId;
        }
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling moveFile');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling moveFile');
        }

        $resourcePath = '/slides/storage/file/move/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function moveFolder($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        try {
            $this->moveFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        }
        catch(RepeatRequestException $ex) {
            $this->moveFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        } 
    }

    /**
     */
    public function moveFolderWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveFolderAsync($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        return $this->moveFolderAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveFolderAsyncWithHttpInfo($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'moveFolder'
     *
     * @param  string $$srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $$destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveFolderRequest($srcPath = null, $destPath = null, $srcStorageName = null, $destStorageName = null)
    {
        if (is_a($srcPath, '\Aspose\Slides\Cloud\Sdk\Model\Requests\MoveFolderRequest')) {
            $requestObject = $srcPath;
            $srcPath = $requestObject->srcPath;
            $destPath = $requestObject->destPath;
            $srcStorageName = $requestObject->srcStorageName;
            $destStorageName = $requestObject->destStorageName;
        }
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling moveFolder');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling moveFolder');
        }

        $resourcePath = '/slides/storage/folder/move/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function objectExists($path = null, $storageName = null, $versionId = null)
    {
        try {
            list($response) = $this->objectExistsWithHttpInfo($path, $storageName, $versionId);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->objectExistsWithHttpInfo($path, $storageName, $versionId);
            return $response;
        } 
    }

    /**
     */
    public function objectExistsWithHttpInfo($path = null, $storageName = null, $versionId = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ObjectExist';
        $httpRequest = $this->objectExistsRequest($path, $storageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ObjectExist', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function objectExistsAsync($path = null, $storageName = null, $versionId = null)
    {
        return $this->objectExistsAsyncWithHttpInfo($path, $storageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function objectExistsAsyncWithHttpInfo($path = null, $storageName = null, $versionId = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ObjectExist';
        $httpRequest = $this->objectExistsRequest($path, $storageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'objectExists'
     *
     * @param  string $$path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  string $$versionId File version ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function objectExistsRequest($path = null, $storageName = null, $versionId = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\ObjectExistsRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $storageName = $requestObject->storageName;
            $versionId = $requestObject->versionId;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling objectExists');
        }

        $resourcePath = '/slides/storage/exist/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function createParagraph($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createParagraphRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createParagraphAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createParagraphRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNewParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  int $$position Position of the new paragraph in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createParagraphRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNewParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNewParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postAddNewParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postAddNewParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNewParagraph(Requests\PostAddNewParagraphRequest $request)
    {
        return $this->createParagraph($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewParagraphWithHttpInfo(Requests\PostAddNewParagraphRequest $request)
    {
        return $this->createParagraphWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewParagraphAsync(Requests\PostAddNewParagraphRequest $request)
    {
        return $this->createParagraphAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewParagraphAsyncWithHttpInfo(Requests\PostAddNewParagraphRequest $request)
    {
        return $this->createParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createPortion($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNewPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  int $$position Position of the new portion in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNewPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNewPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postAddNewPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling postAddNewPortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postAddNewPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNewPortion(Requests\PostAddNewPortionRequest $request)
    {
        return $this->createPortion($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewPortionWithHttpInfo(Requests\PostAddNewPortionRequest $request)
    {
        return $this->createPortionWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewPortionAsync(Requests\PostAddNewPortionRequest $request)
    {
        return $this->createPortionAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewPortionAsyncWithHttpInfo(Requests\PostAddNewPortionRequest $request)
    {
        return $this->createPortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createShape($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createShapeWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createShapeWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createShapeWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createShapeRequest($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createShapeAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createShapeAsyncWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createShapeAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createShapeRequest($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNewShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (optional)
     * @param  int $$shapeToClone Optional index for clone shape instead of adding a new one. (optional)
     * @param  int $$position Position of the new shape in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShapeRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNewShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNewShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeToClone !== null) {
            $queryParams['shapeToClone'] = ObjectSerializer::toQueryValue($shapeToClone);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNewShape(Requests\PostAddNewShapeRequest $request)
    {
        return $this->createShape($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewShapeWithHttpInfo(Requests\PostAddNewShapeRequest $request)
    {
        return $this->createShapeWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewShapeAsync(Requests\PostAddNewShapeRequest $request)
    {
        return $this->createShapeAsync($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewShapeAsyncWithHttpInfo(Requests\PostAddNewShapeRequest $request)
    {
        return $this->createShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createSubshape($name, $slideIndex, $path, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSubshapeWithHttpInfo($name, $slideIndex, $path, $dto, $shapeToClone, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSubshapeWithHttpInfo($name, $slideIndex, $path, $dto, $shapeToClone, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSubshapeWithHttpInfo($name, $slideIndex, $path, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createSubshapeRequest($name, $slideIndex, $path, $dto, $shapeToClone, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSubshapeAsync($name, $slideIndex, $path, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $dto, $shapeToClone, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createSubshapeRequest($name, $slideIndex, $path, $dto, $shapeToClone, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNewSubshape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (optional)
     * @param  int $$shapeToClone Optional index for clone shape instead of adding a new one. (optional)
     * @param  int $$position Position of the new shape in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubshapeRequest($name, $slideIndex, $path, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNewSubshape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNewSubshape');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling postAddNewSubshape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeToClone !== null) {
            $queryParams['shapeToClone'] = ObjectSerializer::toQueryValue($shapeToClone);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshape(Requests\PostAddNewSubshapeRequest $request)
    {
        return $this->createSubshape($request->name, $request->slideIndex, $request->path, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeWithHttpInfo(Requests\PostAddNewSubshapeRequest $request)
    {
        return $this->createSubshapeWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeAsync(Requests\PostAddNewSubshapeRequest $request)
    {
        return $this->createSubshapeAsync($request->name, $request->slideIndex, $request->path, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeAsyncWithHttpInfo(Requests\PostAddNewSubshapeRequest $request)
    {
        return $this->createSubshapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createSubshapeParagraph($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSubshapeParagraphAsync($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNewSubshapeParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  int $$position Position of the new paragraph in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNewSubshapeParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNewSubshapeParagraph');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling postAddNewSubshapeParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postAddNewSubshapeParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postAddNewSubshapeParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeParagraph(Requests\PostAddNewSubshapeParagraphRequest $request)
    {
        return $this->createSubshapeParagraph($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeParagraphWithHttpInfo(Requests\PostAddNewSubshapeParagraphRequest $request)
    {
        return $this->createSubshapeParagraphWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeParagraphAsync(Requests\PostAddNewSubshapeParagraphRequest $request)
    {
        return $this->createSubshapeParagraphAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapeParagraphAsyncWithHttpInfo(Requests\PostAddNewSubshapeParagraphRequest $request)
    {
        return $this->createSubshapeParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createSubshapePortion($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSubshapePortionAsync($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNewSubshapePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  int $$position Position of the new portion in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNewSubshapePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNewSubshapePortion');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling postAddNewSubshapePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postAddNewSubshapePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling postAddNewSubshapePortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postAddNewSubshapePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapePortion(Requests\PostAddNewSubshapePortionRequest $request)
    {
        return $this->createSubshapePortion($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapePortionWithHttpInfo(Requests\PostAddNewSubshapePortionRequest $request)
    {
        return $this->createSubshapePortionWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapePortionAsync(Requests\PostAddNewSubshapePortionRequest $request)
    {
        return $this->createSubshapePortionAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNewSubshapePortionAsyncWithHttpInfo(Requests\PostAddNewSubshapePortionRequest $request)
    {
        return $this->createSubshapePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createNotesSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createNotesSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->createNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createNotesSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->createNotesSlideAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createNotesSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->createNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAddNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $$dto A NotesSlide object with notes slide data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNotesSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAddNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAddNotesSlide');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postAddNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAddNotesSlide(Requests\PostAddNotesSlideRequest $request)
    {
        return $this->createNotesSlide($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNotesSlideWithHttpInfo(Requests\PostAddNotesSlideRequest $request)
    {
        return $this->createNotesSlideWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNotesSlideAsync(Requests\PostAddNotesSlideRequest $request)
    {
        return $this->createNotesSlideAsync($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAddNotesSlideAsyncWithHttpInfo(Requests\PostAddNotesSlideRequest $request)
    {
        return $this->createNotesSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function alignShapes($name, $slideIndex, $alignmentType, $alignToSlide = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->alignShapesWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->alignShapesWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function alignShapesWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->alignShapesRequest($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function alignShapesAsync($name, $slideIndex, $alignmentType, $alignToSlide = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        return $this->alignShapesAsyncWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function alignShapesAsyncWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->alignShapesRequest($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postAlignShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$alignmentType Alignment type that will be applied to the shapes. (required)
     * @param  bool $$alignToSlide If true, shapes will be aligned relative to the slide edges. (optional, default to false)
     * @param  array $$shapes Shapes indexes. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function alignShapesRequest($name, $slideIndex, $alignmentType, $alignToSlide = null, $shapes = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postAlignShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postAlignShapes');
        }
        // verify the required parameter 'alignment_type' is set
        if ($alignmentType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $alignmentType when calling postAlignShapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/align/{alignmentType}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($alignToSlide !== null) {
            $queryParams['alignToSlide'] = ObjectSerializer::toQueryValue($alignToSlide);
        }
        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "alignmentType", $alignmentType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postAlignShapes(Requests\PostAlignShapesRequest $request)
    {
        return $this->alignShapes($request->name, $request->slideIndex, $request->alignmentType, $request->alignToSlide, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAlignShapesWithHttpInfo(Requests\PostAlignShapesRequest $request)
    {
        return $this->alignShapesWithHttpInfo($request->name, $request->slideIndex, $request->alignmentType, $request->alignToSlide, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAlignShapesAsync(Requests\PostAlignShapesRequest $request)
    {
        return $this->alignShapesAsync($request->name, $request->slideIndex, $request->alignmentType, $request->alignToSlide, $request->shapes, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postAlignShapesAsyncWithHttpInfo(Requests\PostAlignShapesRequest $request)
    {
        return $this->alignShapesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->alignmentType, $request->alignToSlide, $request->shapes, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createChartCategory($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartCategoryRequest($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createChartCategoryAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        return $this->createChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartCategoryRequest($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postChartCategory'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $$category Category DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChartCategoryRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postChartCategory');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postChartCategory');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postChartCategory');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling postChartCategory');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($category)) {
            array_push($_tempBody, $category);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postChartCategory(Requests\PostChartCategoryRequest $request)
    {
        return $this->createChartCategory($request->name, $request->slideIndex, $request->shapeIndex, $request->category, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartCategoryWithHttpInfo(Requests\PostChartCategoryRequest $request)
    {
        return $this->createChartCategoryWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->category, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartCategoryAsync(Requests\PostChartCategoryRequest $request)
    {
        return $this->createChartCategoryAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->category, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartCategoryAsyncWithHttpInfo(Requests\PostChartCategoryRequest $request)
    {
        return $this->createChartCategoryAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->category, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createChartDataPoint($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createChartDataPointAsync($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        return $this->createChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postChartDataPoint'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DataPoint $$dataPoint Data point DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postChartDataPoint');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postChartDataPoint');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postChartDataPoint');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling postChartDataPoint');
        }
        // verify the required parameter 'data_point' is set
        if ($dataPoint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dataPoint when calling postChartDataPoint');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $_tempBody = [];
        if (isset($dataPoint)) {
            array_push($_tempBody, $dataPoint);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postChartDataPoint(Requests\PostChartDataPointRequest $request)
    {
        return $this->createChartDataPoint($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartDataPointWithHttpInfo(Requests\PostChartDataPointRequest $request)
    {
        return $this->createChartDataPointWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartDataPointAsync(Requests\PostChartDataPointRequest $request)
    {
        return $this->createChartDataPointAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartDataPointAsyncWithHttpInfo(Requests\PostChartDataPointRequest $request)
    {
        return $this->createChartDataPointAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createChartSeries($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartSeriesRequest($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createChartSeriesAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        return $this->createChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartSeriesRequest($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postChartSeries'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Series $$series Series DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChartSeriesRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postChartSeries');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postChartSeries');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postChartSeries');
        }
        // verify the required parameter 'series' is set
        if ($series === null) {
            throw new \InvalidArgumentException('Missing the required parameter $series when calling postChartSeries');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($series)) {
            array_push($_tempBody, $series);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postChartSeries(Requests\PostChartSeriesRequest $request)
    {
        return $this->createChartSeries($request->name, $request->slideIndex, $request->shapeIndex, $request->series, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartSeriesWithHttpInfo(Requests\PostChartSeriesRequest $request)
    {
        return $this->createChartSeriesWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->series, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartSeriesAsync(Requests\PostChartSeriesRequest $request)
    {
        return $this->createChartSeriesAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->series, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postChartSeriesAsyncWithHttpInfo(Requests\PostChartSeriesRequest $request)
    {
        return $this->createChartSeriesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->series, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function copyLayoutSlide($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->copyLayoutSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->copyLayoutSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function copyLayoutSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->copyLayoutSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyLayoutSlideAsync($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        return $this->copyLayoutSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyLayoutSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->copyLayoutSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postCopyLayoutSlideFromSourcePresentation'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param  int $$cloneFromPosition Position of cloned layout slide. (required)
     * @param  string $$cloneFromPassword Password for the document to clone layoutSlide from. (optional)
     * @param  string $$cloneFromStorage Storage of the document to clone layoutSlide from. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyLayoutSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postCopyLayoutSlideFromSourcePresentation');
        }
        // verify the required parameter 'clone_from' is set
        if ($cloneFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFrom when calling postCopyLayoutSlideFromSourcePresentation');
        }
        // verify the required parameter 'clone_from_position' is set
        if ($cloneFromPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFromPosition when calling postCopyLayoutSlideFromSourcePresentation');
        }

        $resourcePath = '/slides/{name}/layoutSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($cloneFrom !== null) {
            $queryParams['cloneFrom'] = ObjectSerializer::toQueryValue($cloneFrom);
        }
        // query params
        if ($cloneFromPosition !== null) {
            $queryParams['cloneFromPosition'] = ObjectSerializer::toQueryValue($cloneFromPosition);
        }
        // query params
        if ($cloneFromStorage !== null) {
            $queryParams['cloneFromStorage'] = ObjectSerializer::toQueryValue($cloneFromStorage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($cloneFromPassword !== null) {
            $headerParams['cloneFromPassword'] = ObjectSerializer::toHeaderValue($cloneFromPassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postCopyLayoutSlideFromSourcePresentation(Requests\PostCopyLayoutSlideFromSourcePresentationRequest $request)
    {
        return $this->copyLayoutSlide($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postCopyLayoutSlideFromSourcePresentationWithHttpInfo(Requests\PostCopyLayoutSlideFromSourcePresentationRequest $request)
    {
        return $this->copyLayoutSlideWithHttpInfo($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postCopyLayoutSlideFromSourcePresentationAsync(Requests\PostCopyLayoutSlideFromSourcePresentationRequest $request)
    {
        return $this->copyLayoutSlideAsync($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postCopyLayoutSlideFromSourcePresentationAsyncWithHttpInfo(Requests\PostCopyLayoutSlideFromSourcePresentationRequest $request)
    {
        return $this->copyLayoutSlideAsyncWithHttpInfo($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function copyMasterSlide($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->copyMasterSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->copyMasterSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function copyMasterSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->copyMasterSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyMasterSlideAsync($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        return $this->copyMasterSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyMasterSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->copyMasterSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postCopyMasterSlideFromSourcePresentation'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$cloneFrom Name of the document to clone masterSlide from. (required)
     * @param  int $$cloneFromPosition Position of cloned master slide. (required)
     * @param  string $$cloneFromPassword Password for the document to clone masterSlide from. (optional)
     * @param  string $$cloneFromStorage Storage of the document to clone masterSlide from. (optional)
     * @param  bool $$applyToAll True to apply cloned master slide to every existing slide. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyMasterSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postCopyMasterSlideFromSourcePresentation');
        }
        // verify the required parameter 'clone_from' is set
        if ($cloneFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFrom when calling postCopyMasterSlideFromSourcePresentation');
        }
        // verify the required parameter 'clone_from_position' is set
        if ($cloneFromPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFromPosition when calling postCopyMasterSlideFromSourcePresentation');
        }

        $resourcePath = '/slides/{name}/masterSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($cloneFrom !== null) {
            $queryParams['cloneFrom'] = ObjectSerializer::toQueryValue($cloneFrom);
        }
        // query params
        if ($cloneFromPosition !== null) {
            $queryParams['cloneFromPosition'] = ObjectSerializer::toQueryValue($cloneFromPosition);
        }
        // query params
        if ($cloneFromStorage !== null) {
            $queryParams['cloneFromStorage'] = ObjectSerializer::toQueryValue($cloneFromStorage);
        }
        // query params
        if ($applyToAll !== null) {
            $queryParams['applyToAll'] = ObjectSerializer::toQueryValue($applyToAll);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($cloneFromPassword !== null) {
            $headerParams['cloneFromPassword'] = ObjectSerializer::toHeaderValue($cloneFromPassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postCopyMasterSlideFromSourcePresentation(Requests\PostCopyMasterSlideFromSourcePresentationRequest $request)
    {
        return $this->copyMasterSlide($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->applyToAll, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postCopyMasterSlideFromSourcePresentationWithHttpInfo(Requests\PostCopyMasterSlideFromSourcePresentationRequest $request)
    {
        return $this->copyMasterSlideWithHttpInfo($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->applyToAll, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postCopyMasterSlideFromSourcePresentationAsync(Requests\PostCopyMasterSlideFromSourcePresentationRequest $request)
    {
        return $this->copyMasterSlideAsync($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->applyToAll, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postCopyMasterSlideFromSourcePresentationAsyncWithHttpInfo(Requests\PostCopyMasterSlideFromSourcePresentationRequest $request)
    {
        return $this->copyMasterSlideAsyncWithHttpInfo($request->name, $request->cloneFrom, $request->cloneFromPosition, $request->cloneFromPassword, $request->cloneFromStorage, $request->applyToAll, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadImageDefaultFormatOnline($document, $index, $password = null)
    {
        try {
            list($response) = $this->downloadImageDefaultFormatOnlineWithHttpInfo($document, $index, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageDefaultFormatOnlineWithHttpInfo($document, $index, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageDefaultFormatOnlineWithHttpInfo($document, $index, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatOnlineRequest($document, $index, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageDefaultFormatOnlineAsync($document, $index, $password = null)
    {
        return $this->downloadImageDefaultFormatOnlineAsyncWithHttpInfo($document, $index, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageDefaultFormatOnlineAsyncWithHttpInfo($document, $index, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatOnlineRequest($document, $index, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportImageWithDefaultFormat'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageDefaultFormatOnlineRequest($document, $index, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postExportImageWithDefaultFormat');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling postExportImageWithDefaultFormat');
        }

        $resourcePath = '/slides/images/{index}';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportImageWithDefaultFormat(Requests\PostExportImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatOnline($request->document, $request->index, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImageWithDefaultFormatWithHttpInfo(Requests\PostExportImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatOnlineWithHttpInfo($request->document, $request->index, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImageWithDefaultFormatAsync(Requests\PostExportImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatOnlineAsync($request->document, $request->index, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImageWithDefaultFormatAsyncWithHttpInfo(Requests\PostExportImageWithDefaultFormatRequest $request)
    {
        return $this->downloadImageDefaultFormatOnlineAsyncWithHttpInfo($request->document, $request->index, $request->password);
    }
    /**
     */
    public function downloadImageOnline($document, $index, $format, $password = null)
    {
        try {
            list($response) = $this->downloadImageOnlineWithHttpInfo($document, $index, $format, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageOnlineWithHttpInfo($document, $index, $format, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageOnlineWithHttpInfo($document, $index, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageOnlineRequest($document, $index, $format, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageOnlineAsync($document, $index, $format, $password = null)
    {
        return $this->downloadImageOnlineAsyncWithHttpInfo($document, $index, $format, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageOnlineAsyncWithHttpInfo($document, $index, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageOnlineRequest($document, $index, $format, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportImageWithFormat'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageOnlineRequest($document, $index, $format, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postExportImageWithFormat');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling postExportImageWithFormat');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postExportImageWithFormat');
        }

        $resourcePath = '/slides/images/{index}/{format}';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportImageWithFormat(Requests\PostExportImageWithFormatRequest $request)
    {
        return $this->downloadImageOnline($request->document, $request->index, $request->format, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImageWithFormatWithHttpInfo(Requests\PostExportImageWithFormatRequest $request)
    {
        return $this->downloadImageOnlineWithHttpInfo($request->document, $request->index, $request->format, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImageWithFormatAsync(Requests\PostExportImageWithFormatRequest $request)
    {
        return $this->downloadImageOnlineAsync($request->document, $request->index, $request->format, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImageWithFormatAsyncWithHttpInfo(Requests\PostExportImageWithFormatRequest $request)
    {
        return $this->downloadImageOnlineAsyncWithHttpInfo($request->document, $request->index, $request->format, $request->password);
    }
    /**
     */
    public function downloadImagesOnline($document, $format, $password = null)
    {
        try {
            list($response) = $this->downloadImagesOnlineWithHttpInfo($document, $format, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesOnlineWithHttpInfo($document, $format, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesOnlineWithHttpInfo($document, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesOnlineRequest($document, $format, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesOnlineAsync($document, $format, $password = null)
    {
        return $this->downloadImagesOnlineAsyncWithHttpInfo($document, $format, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesOnlineAsyncWithHttpInfo($document, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesOnlineRequest($document, $format, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportImagesFromRequestWithFormat'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesOnlineRequest($document, $format, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postExportImagesFromRequestWithFormat');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postExportImagesFromRequestWithFormat');
        }

        $resourcePath = '/slides/images/download/{format}';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportImagesFromRequestWithFormat(Requests\PostExportImagesFromRequestWithFormatRequest $request)
    {
        return $this->downloadImagesOnline($request->document, $request->format, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImagesFromRequestWithFormatWithHttpInfo(Requests\PostExportImagesFromRequestWithFormatRequest $request)
    {
        return $this->downloadImagesOnlineWithHttpInfo($request->document, $request->format, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImagesFromRequestWithFormatAsync(Requests\PostExportImagesFromRequestWithFormatRequest $request)
    {
        return $this->downloadImagesOnlineAsync($request->document, $request->format, $request->password);
    }

    /**
     * @deprecated
     */
    public function postExportImagesFromRequestWithFormatAsyncWithHttpInfo(Requests\PostExportImagesFromRequestWithFormatRequest $request)
    {
        return $this->downloadImagesOnlineAsyncWithHttpInfo($request->document, $request->format, $request->password);
    }
    /**
     */
    public function downloadImagesDefaultFormat($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImagesDefaultFormatWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesDefaultFormatWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesDefaultFormatWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesDefaultFormatAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImagesDefaultFormatAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesDefaultFormatAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportImagesWithDefaultFormat'
     *
     * @param  string $$name (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesDefaultFormatRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postExportImagesWithDefaultFormat');
        }

        $resourcePath = '/slides/{name}/images/download';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithDefaultFormat(Requests\PostExportImagesWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormat($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithDefaultFormatWithHttpInfo(Requests\PostExportImagesWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithDefaultFormatAsync(Requests\PostExportImagesWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatAsync($request->name, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithDefaultFormatAsyncWithHttpInfo(Requests\PostExportImagesWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatAsyncWithHttpInfo($request->name, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadImages($name, $format, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImagesWithHttpInfo($name, $format, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesWithHttpInfo($name, $format, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesWithHttpInfo($name, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesRequest($name, $format, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesAsync($name, $format, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImagesAsyncWithHttpInfo($name, $format, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesAsyncWithHttpInfo($name, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesRequest($name, $format, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportImagesWithFormat'
     *
     * @param  string $$name (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesRequest($name, $format, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postExportImagesWithFormat');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postExportImagesWithFormat');
        }

        $resourcePath = '/slides/{name}/images/download/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithFormat(Requests\PostExportImagesWithFormatRequest $request)
    {
        return $this->downloadImages($request->name, $request->format, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithFormatWithHttpInfo(Requests\PostExportImagesWithFormatRequest $request)
    {
        return $this->downloadImagesWithHttpInfo($request->name, $request->format, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithFormatAsync(Requests\PostExportImagesWithFormatRequest $request)
    {
        return $this->downloadImagesAsync($request->name, $request->format, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postExportImagesWithFormatAsyncWithHttpInfo(Requests\PostExportImagesWithFormatRequest $request)
    {
        return $this->downloadImagesAsyncWithHttpInfo($request->name, $request->format, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadShapeOnline($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadShapeOnlineAsync($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportShape'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postExportShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postExportShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postExportShape');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postExportShape');
        }

        $resourcePath = '/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportShape(Requests\PostExportShapeRequest $request)
    {
        return $this->downloadShapeOnline($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postExportShapeWithHttpInfo(Requests\PostExportShapeRequest $request)
    {
        return $this->downloadShapeOnlineWithHttpInfo($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postExportShapeAsync(Requests\PostExportShapeRequest $request)
    {
        return $this->downloadShapeOnlineAsync($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postExportShapeAsyncWithHttpInfo(Requests\PostExportShapeRequest $request)
    {
        return $this->downloadShapeOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function downloadSlideOnline($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadSlideOnlineAsync($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postExportSlide'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  int $$width Output file width; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height Output file height; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSlideOnlineRequest($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postExportSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postExportSlide');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postExportSlide');
        }

        $resourcePath = '/slides/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postExportSlide(Requests\PostExportSlideRequest $request)
    {
        return $this->downloadSlideOnline($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postExportSlideWithHttpInfo(Requests\PostExportSlideRequest $request)
    {
        return $this->downloadSlideOnlineWithHttpInfo($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postExportSlideAsync(Requests\PostExportSlideRequest $request)
    {
        return $this->downloadSlideOnlineAsync($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postExportSlideAsyncWithHttpInfo(Requests\PostExportSlideRequest $request)
    {
        return $this->downloadSlideOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function getNotesSlideOnline($document, $slideIndex, $password = null)
    {
        try {
            list($response) = $this->getNotesSlideOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideOnlineWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideOnlineRequest($document, $slideIndex, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideOnlineAsync($document, $slideIndex, $password = null)
    {
        return $this->getNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideOnlineRequest($document, $slideIndex, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postGetNotesSlide'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideOnlineRequest($document, $slideIndex, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postGetNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postGetNotesSlide');
        }

        $resourcePath = '/slides/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlide(Requests\PostGetNotesSlideRequest $request)
    {
        return $this->getNotesSlideOnline($request->document, $request->slideIndex, $request->password);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideWithHttpInfo(Requests\PostGetNotesSlideRequest $request)
    {
        return $this->getNotesSlideOnlineWithHttpInfo($request->document, $request->slideIndex, $request->password);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideAsync(Requests\PostGetNotesSlideRequest $request)
    {
        return $this->getNotesSlideOnlineAsync($request->document, $request->slideIndex, $request->password);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideAsyncWithHttpInfo(Requests\PostGetNotesSlideRequest $request)
    {
        return $this->getNotesSlideOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->password);
    }
    /**
     */
    public function notesSlideExistsOnline($document, $slideIndex, $password = null)
    {
        try {
            list($response) = $this->notesSlideExistsOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->notesSlideExistsOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        } 
    }

    /**
     */
    public function notesSlideExistsOnlineWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsOnlineRequest($document, $slideIndex, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\EntityExists', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function notesSlideExistsOnlineAsync($document, $slideIndex, $password = null)
    {
        return $this->notesSlideExistsOnlineAsyncWithHttpInfo($document, $slideIndex, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function notesSlideExistsOnlineAsyncWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsOnlineRequest($document, $slideIndex, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postGetNotesSlideExists'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesSlideExistsOnlineRequest($document, $slideIndex, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postGetNotesSlideExists');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postGetNotesSlideExists');
        }

        $resourcePath = '/slides/slides/{slideIndex}/notesSlide/exist';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideExists(Requests\PostGetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsOnline($request->document, $request->slideIndex, $request->password);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideExistsWithHttpInfo(Requests\PostGetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsOnlineWithHttpInfo($request->document, $request->slideIndex, $request->password);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideExistsAsync(Requests\PostGetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsOnlineAsync($request->document, $request->slideIndex, $request->password);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideExistsAsyncWithHttpInfo(Requests\PostGetNotesSlideExistsRequest $request)
    {
        return $this->notesSlideExistsOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->password);
    }
    /**
     */
    public function downloadNotesSlideOnline($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadNotesSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadNotesSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadNotesSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadNotesSlideOnlineAsync($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        return $this->downloadNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postGetNotesSlideWithFormat'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  int $$width Output file width. (optional)
     * @param  int $$height Output file height. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadNotesSlideOnlineRequest($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postGetNotesSlideWithFormat');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postGetNotesSlideWithFormat');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postGetNotesSlideWithFormat');
        }

        $resourcePath = '/slides/slides/{slideIndex}/notesSlide/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideWithFormat(Requests\PostGetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideOnline($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideWithFormatWithHttpInfo(Requests\PostGetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideOnlineWithHttpInfo($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideWithFormatAsync(Requests\PostGetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideOnlineAsync($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postGetNotesSlideWithFormatAsyncWithHttpInfo(Requests\PostGetNotesSlideWithFormatRequest $request)
    {
        return $this->downloadNotesSlideOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->format, $request->width, $request->height, $request->password, $request->fontsFolder);
    }
    /**
     */
    public function createImageWatermark($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->createImageWatermarkWithHttpInfo($name, $image, $pictureFrame, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->createImageWatermarkWithHttpInfo($name, $image, $pictureFrame, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function createImageWatermarkWithHttpInfo($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createImageWatermarkRequest($name, $image, $pictureFrame, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createImageWatermarkAsync($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createImageWatermarkAsyncWithHttpInfo($name, $image, $pictureFrame, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createImageWatermarkAsyncWithHttpInfo($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createImageWatermarkRequest($name, $image, $pictureFrame, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postImageWatermark'
     *
     * @param  string $$name Document name. (required)
     * @param  \SplFileObject $$image Image data. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $$pictureFrame PictureFrame DTO (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createImageWatermarkRequest($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postImageWatermark');
        }

        $resourcePath = '/slides/{name}/watermark/image';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($pictureFrame)) {
            array_push($_tempBody, $pictureFrame);
        }
        if (isset($image)) {
            array_push($_tempBody, $image);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postImageWatermark(Requests\PostImageWatermarkRequest $request)
    {
        $this->createImageWatermark($request->name, $request->image, $request->pictureFrame, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkWithHttpInfo(Requests\PostImageWatermarkRequest $request)
    {
        return $this->createImageWatermarkWithHttpInfo($request->name, $request->image, $request->pictureFrame, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkAsync(Requests\PostImageWatermarkRequest $request)
    {
        return $this->createImageWatermarkAsync($request->name, $request->image, $request->pictureFrame, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkAsyncWithHttpInfo(Requests\PostImageWatermarkRequest $request)
    {
        return $this->createImageWatermarkAsyncWithHttpInfo($request->name, $request->image, $request->pictureFrame, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createImageWatermarkOnline($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        try {
            list($response) = $this->createImageWatermarkOnlineWithHttpInfo($document, $image, $pictureFrame, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createImageWatermarkOnlineWithHttpInfo($document, $image, $pictureFrame, $password);
            return $response;
        } 
    }

    /**
     */
    public function createImageWatermarkOnlineWithHttpInfo($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createImageWatermarkOnlineRequest($document, $image, $pictureFrame, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createImageWatermarkOnlineAsync($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        return $this->createImageWatermarkOnlineAsyncWithHttpInfo($document, $image, $pictureFrame, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createImageWatermarkOnlineAsyncWithHttpInfo($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createImageWatermarkOnlineRequest($document, $image, $pictureFrame, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postImageWatermarkOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \SplFileObject $$image Image data. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $$pictureFrame PictureFrame DTO. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createImageWatermarkOnlineRequest($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postImageWatermarkOnline');
        }

        $resourcePath = '/slides/watermark/image';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($pictureFrame)) {
            array_push($_tempBody, $pictureFrame);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        if (isset($image)) {
            array_push($_tempBody, $image);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkOnline(Requests\PostImageWatermarkOnlineRequest $request)
    {
        return $this->createImageWatermarkOnline($request->document, $request->image, $request->pictureFrame, $request->password);
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkOnlineWithHttpInfo(Requests\PostImageWatermarkOnlineRequest $request)
    {
        return $this->createImageWatermarkOnlineWithHttpInfo($request->document, $request->image, $request->pictureFrame, $request->password);
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkOnlineAsync(Requests\PostImageWatermarkOnlineRequest $request)
    {
        return $this->createImageWatermarkOnlineAsync($request->document, $request->image, $request->pictureFrame, $request->password);
    }

    /**
     * @deprecated
     */
    public function postImageWatermarkOnlineAsyncWithHttpInfo(Requests\PostImageWatermarkOnlineRequest $request)
    {
        return $this->createImageWatermarkOnlineAsyncWithHttpInfo($request->document, $request->image, $request->pictureFrame, $request->password);
    }
    /**
     */
    public function downloadImagesDefaultFormatOnline($document, $password = null)
    {
        try {
            list($response) = $this->downloadImagesDefaultFormatOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesDefaultFormatOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesDefaultFormatOnlineWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesDefaultFormatOnlineAsync($document, $password = null)
    {
        return $this->downloadImagesDefaultFormatOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesDefaultFormatOnlineAsyncWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postImagesFromRequestWithDefaultFormat'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesDefaultFormatOnlineRequest($document, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postImagesFromRequestWithDefaultFormat');
        }

        $resourcePath = '/slides/images/download';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postImagesFromRequestWithDefaultFormat(Requests\PostImagesFromRequestWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatOnline($request->document, $request->password);
    }

    /**
     * @deprecated
     */
    public function postImagesFromRequestWithDefaultFormatWithHttpInfo(Requests\PostImagesFromRequestWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatOnlineWithHttpInfo($request->document, $request->password);
    }

    /**
     * @deprecated
     */
    public function postImagesFromRequestWithDefaultFormatAsync(Requests\PostImagesFromRequestWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatOnlineAsync($request->document, $request->password);
    }

    /**
     * @deprecated
     */
    public function postImagesFromRequestWithDefaultFormatAsyncWithHttpInfo(Requests\PostImagesFromRequestWithDefaultFormatRequest $request)
    {
        return $this->downloadImagesDefaultFormatOnlineAsyncWithHttpInfo($request->document, $request->password);
    }
    /**
     */
    public function createNotesSlideParagraph($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createNotesSlideParagraphAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postNotesSlideAddNewParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  int $$position Position of the new paragraph in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postNotesSlideAddNewParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postNotesSlideAddNewParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postNotesSlideAddNewParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postNotesSlideAddNewParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewParagraph(Requests\PostNotesSlideAddNewParagraphRequest $request)
    {
        return $this->createNotesSlideParagraph($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewParagraphWithHttpInfo(Requests\PostNotesSlideAddNewParagraphRequest $request)
    {
        return $this->createNotesSlideParagraphWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewParagraphAsync(Requests\PostNotesSlideAddNewParagraphRequest $request)
    {
        return $this->createNotesSlideParagraphAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewParagraphAsyncWithHttpInfo(Requests\PostNotesSlideAddNewParagraphRequest $request)
    {
        return $this->createNotesSlideParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createNotesSlidePortion($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createNotesSlidePortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postNotesSlideAddNewPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  int $$position Position of the new portion in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postNotesSlideAddNewPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postNotesSlideAddNewPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postNotesSlideAddNewPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling postNotesSlideAddNewPortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postNotesSlideAddNewPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewPortion(Requests\PostNotesSlideAddNewPortionRequest $request)
    {
        return $this->createNotesSlidePortion($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewPortionWithHttpInfo(Requests\PostNotesSlideAddNewPortionRequest $request)
    {
        return $this->createNotesSlidePortionWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewPortionAsync(Requests\PostNotesSlideAddNewPortionRequest $request)
    {
        return $this->createNotesSlidePortionAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewPortionAsyncWithHttpInfo(Requests\PostNotesSlideAddNewPortionRequest $request)
    {
        return $this->createNotesSlidePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createNotesSlideShape($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createNotesSlideShapeWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createNotesSlideShapeWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createNotesSlideShapeWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createNotesSlideShapeRequest($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createNotesSlideShapeAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createNotesSlideShapeRequest($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postNotesSlideAddNewShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     * @param  int $$shapeToClone Optional index for clone shape instead of adding a new one. (optional)
     * @param  int $$position Position of the new shape in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNotesSlideShapeRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postNotesSlideAddNewShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postNotesSlideAddNewShape');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling postNotesSlideAddNewShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeToClone !== null) {
            $queryParams['shapeToClone'] = ObjectSerializer::toQueryValue($shapeToClone);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewShape(Requests\PostNotesSlideAddNewShapeRequest $request)
    {
        return $this->createNotesSlideShape($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewShapeWithHttpInfo(Requests\PostNotesSlideAddNewShapeRequest $request)
    {
        return $this->createNotesSlideShapeWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewShapeAsync(Requests\PostNotesSlideAddNewShapeRequest $request)
    {
        return $this->createNotesSlideShapeAsync($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideAddNewShapeAsyncWithHttpInfo(Requests\PostNotesSlideAddNewShapeRequest $request)
    {
        return $this->createNotesSlideShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->shapeToClone, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadNotesSlideShape($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadNotesSlideShapeAsync($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postNotesSlideShapeSaveAs'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postNotesSlideShapeSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postNotesSlideShapeSaveAs(Requests\PostNotesSlideShapeSaveAsRequest $request)
    {
        return $this->downloadNotesSlideShape($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideShapeSaveAsWithHttpInfo(Requests\PostNotesSlideShapeSaveAsRequest $request)
    {
        return $this->downloadNotesSlideShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideShapeSaveAsAsync(Requests\PostNotesSlideShapeSaveAsRequest $request)
    {
        return $this->downloadNotesSlideShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postNotesSlideShapeSaveAsAsyncWithHttpInfo(Requests\PostNotesSlideShapeSaveAsRequest $request)
    {
        return $this->downloadNotesSlideShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function merge($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->mergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->mergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function mergeWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->mergeRequest($name, $request, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeAsync($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        return $this->mergeAsyncWithHttpInfo($name, $request, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->mergeRequest($name, $request, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postPresentationMerge'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $$request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeRequest($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postPresentationMerge');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling postPresentationMerge');
        }

        $resourcePath = '/slides/{name}/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postPresentationMerge(Requests\PostPresentationMergeRequest $request)
    {
        return $this->merge($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postPresentationMergeWithHttpInfo(Requests\PostPresentationMergeRequest $request)
    {
        return $this->mergeWithHttpInfo($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postPresentationMergeAsync(Requests\PostPresentationMergeRequest $request)
    {
        return $this->mergeAsync($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postPresentationMergeAsyncWithHttpInfo(Requests\PostPresentationMergeRequest $request)
    {
        return $this->mergeAsyncWithHttpInfo($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function replacePresentationTextOnline($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        try {
            list($response) = $this->replacePresentationTextOnlineWithHttpInfo($document, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replacePresentationTextOnlineWithHttpInfo($document, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        } 
    }

    /**
     */
    public function replacePresentationTextOnlineWithHttpInfo($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replacePresentationTextOnlineRequest($document, $oldValue, $newValue, $ignoreCase, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replacePresentationTextOnlineAsync($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        return $this->replacePresentationTextOnlineAsyncWithHttpInfo($document, $oldValue, $newValue, $ignoreCase, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replacePresentationTextOnlineAsyncWithHttpInfo($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replacePresentationTextOnlineRequest($document, $oldValue, $newValue, $ignoreCase, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postPresentationReplaceText'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replacePresentationTextOnlineRequest($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postPresentationReplaceText');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling postPresentationReplaceText');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling postPresentationReplaceText');
        }

        $resourcePath = '/slides/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postPresentationReplaceText(Requests\PostPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextOnline($request->document, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }

    /**
     * @deprecated
     */
    public function postPresentationReplaceTextWithHttpInfo(Requests\PostPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextOnlineWithHttpInfo($request->document, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }

    /**
     * @deprecated
     */
    public function postPresentationReplaceTextAsync(Requests\PostPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextOnlineAsync($request->document, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }

    /**
     * @deprecated
     */
    public function postPresentationReplaceTextAsyncWithHttpInfo(Requests\PostPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextOnlineAsyncWithHttpInfo($request->document, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }
    /**
     */
    public function splitOnline($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->splitOnlineWithHttpInfo($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitOnlineWithHttpInfo($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function splitOnlineWithHttpInfo($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->splitOnlineRequest($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitOnlineAsync($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->splitOnlineAsyncWithHttpInfo($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitOnlineAsyncWithHttpInfo($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->splitOnlineRequest($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postPresentationSplit'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format ExportFormat (required)
     * @param  int $$width Slide width. (optional)
     * @param  int $$height Slide height. (optional)
     * @param  int $$from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. (optional)
     * @param  int $$to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitOnlineRequest($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postPresentationSplit');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postPresentationSplit');
        }

        $resourcePath = '/slides/split/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postPresentationSplit(Requests\PostPresentationSplitRequest $request)
    {
        return $this->splitOnline($request->document, $request->format, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postPresentationSplitWithHttpInfo(Requests\PostPresentationSplitRequest $request)
    {
        return $this->splitOnlineWithHttpInfo($request->document, $request->format, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postPresentationSplitAsync(Requests\PostPresentationSplitRequest $request)
    {
        return $this->splitOnlineAsync($request->document, $request->format, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postPresentationSplitAsyncWithHttpInfo(Requests\PostPresentationSplitRequest $request)
    {
        return $this->splitOnlineAsyncWithHttpInfo($request->document, $request->format, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function createSection($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSectionWithHttpInfo($name, $sectionName, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSectionWithHttpInfo($name, $sectionName, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSectionWithHttpInfo($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->createSectionRequest($name, $sectionName, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSectionAsync($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->createSectionAsyncWithHttpInfo($name, $sectionName, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSectionAsyncWithHttpInfo($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->createSectionRequest($name, $sectionName, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSection'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$sectionName Section name. (required)
     * @param  int $$slideIndex Slide index (one-based). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSectionRequest($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSection');
        }
        // verify the required parameter 'section_name' is set
        if ($sectionName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionName when calling postSection');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSection');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sectionName !== null) {
            $queryParams['sectionName'] = ObjectSerializer::toQueryValue($sectionName);
        }
        // query params
        if ($slideIndex !== null) {
            $queryParams['slideIndex'] = ObjectSerializer::toQueryValue($slideIndex);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSection(Requests\PostSectionRequest $request)
    {
        return $this->createSection($request->name, $request->sectionName, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSectionWithHttpInfo(Requests\PostSectionRequest $request)
    {
        return $this->createSectionWithHttpInfo($request->name, $request->sectionName, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSectionAsync(Requests\PostSectionRequest $request)
    {
        return $this->createSectionAsync($request->name, $request->sectionName, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSectionAsyncWithHttpInfo(Requests\PostSectionRequest $request)
    {
        return $this->createSectionAsyncWithHttpInfo($request->name, $request->sectionName, $request->slideIndex, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function moveSection($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->moveSectionWithHttpInfo($name, $sectionIndex, $newPosition, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->moveSectionWithHttpInfo($name, $sectionIndex, $newPosition, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function moveSectionWithHttpInfo($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->moveSectionRequest($name, $sectionIndex, $newPosition, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveSectionAsync($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        return $this->moveSectionAsyncWithHttpInfo($name, $sectionIndex, $newPosition, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveSectionAsyncWithHttpInfo($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->moveSectionRequest($name, $sectionIndex, $newPosition, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSectionMove'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$sectionIndex The position of the section to be reordered. (required)
     * @param  int $$newPosition The new position of the reordered section. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveSectionRequest($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSectionMove');
        }
        // verify the required parameter 'section_index' is set
        if ($sectionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionIndex when calling postSectionMove');
        }
        // verify the required parameter 'new_position' is set
        if ($newPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newPosition when calling postSectionMove');
        }

        $resourcePath = '/slides/{name}/sections/{sectionIndex}/move';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($newPosition !== null) {
            $queryParams['newPosition'] = ObjectSerializer::toQueryValue($newPosition);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sectionIndex", $sectionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSectionMove(Requests\PostSectionMoveRequest $request)
    {
        return $this->moveSection($request->name, $request->sectionIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSectionMoveWithHttpInfo(Requests\PostSectionMoveRequest $request)
    {
        return $this->moveSectionWithHttpInfo($request->name, $request->sectionIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSectionMoveAsync(Requests\PostSectionMoveRequest $request)
    {
        return $this->moveSectionAsync($request->name, $request->sectionIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSectionMoveAsyncWithHttpInfo(Requests\PostSectionMoveRequest $request)
    {
        return $this->moveSectionAsyncWithHttpInfo($request->name, $request->sectionIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadShape($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeRequest($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadShapeAsync($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeRequest($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postShapeSaveAs'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadShapeRequest($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postShapeSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postShapeSaveAs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postShapeSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postShapeSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postShapeSaveAs(Requests\PostShapeSaveAsRequest $request)
    {
        return $this->downloadShape($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postShapeSaveAsWithHttpInfo(Requests\PostShapeSaveAsRequest $request)
    {
        return $this->downloadShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postShapeSaveAsAsync(Requests\PostShapeSaveAsRequest $request)
    {
        return $this->downloadShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postShapeSaveAsAsyncWithHttpInfo(Requests\PostShapeSaveAsRequest $request)
    {
        return $this->downloadShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function createAnimationEffect($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createAnimationEffectWithHttpInfo($name, $slideIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createAnimationEffectWithHttpInfo($name, $slideIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createAnimationEffectWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationEffectRequest($name, $slideIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createAnimationEffectAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->createAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createAnimationEffectAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationEffectRequest($name, $slideIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlideAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnimationEffectRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlideAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlideAnimationEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling postSlideAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationEffect(Requests\PostSlideAnimationEffectRequest $request)
    {
        return $this->createAnimationEffect($request->name, $request->slideIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationEffectWithHttpInfo(Requests\PostSlideAnimationEffectRequest $request)
    {
        return $this->createAnimationEffectWithHttpInfo($request->name, $request->slideIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationEffectAsync(Requests\PostSlideAnimationEffectRequest $request)
    {
        return $this->createAnimationEffectAsync($request->name, $request->slideIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationEffectAsyncWithHttpInfo(Requests\PostSlideAnimationEffectRequest $request)
    {
        return $this->createAnimationEffectAsyncWithHttpInfo($request->name, $request->slideIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createAnimationInteractiveSequence($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequence, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequence, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceRequest($name, $slideIndex, $sequence, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createAnimationInteractiveSequenceAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        return $this->createAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $sequence, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceRequest($name, $slideIndex, $sequence, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlideAnimationInteractiveSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $$sequence Animation sequence DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnimationInteractiveSequenceRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'sequence' is set
        if ($sequence === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequence when calling postSlideAnimationInteractiveSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($sequence)) {
            array_push($_tempBody, $sequence);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequence(Requests\PostSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->createAnimationInteractiveSequence($request->name, $request->slideIndex, $request->sequence, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceWithHttpInfo(Requests\PostSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->createAnimationInteractiveSequenceWithHttpInfo($request->name, $request->slideIndex, $request->sequence, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceAsync(Requests\PostSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->createAnimationInteractiveSequenceAsync($request->name, $request->slideIndex, $request->sequence, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceAsyncWithHttpInfo(Requests\PostSlideAnimationInteractiveSequenceRequest $request)
    {
        return $this->createAnimationInteractiveSequenceAsyncWithHttpInfo($request->name, $request->slideIndex, $request->sequence, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createAnimationInteractiveSequenceEffect($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->createAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlideAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex The position of the interactive sequence. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling postSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling postSlideAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceEffect(Requests\PostSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->createAnimationInteractiveSequenceEffect($request->name, $request->slideIndex, $request->sequenceIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceEffectWithHttpInfo(Requests\PostSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->createAnimationInteractiveSequenceEffectWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceEffectAsync(Requests\PostSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->createAnimationInteractiveSequenceEffectAsync($request->name, $request->slideIndex, $request->sequenceIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo(Requests\PostSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->createAnimationInteractiveSequenceEffectAsyncWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function replaceSlideTextOnline($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        try {
            list($response) = $this->replaceSlideTextOnlineWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replaceSlideTextOnlineWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        } 
    }

    /**
     */
    public function replaceSlideTextOnlineWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replaceSlideTextOnlineRequest($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replaceSlideTextOnlineAsync($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        return $this->replaceSlideTextOnlineAsyncWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replaceSlideTextOnlineAsyncWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replaceSlideTextOnlineRequest($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlideReplaceText'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Index of target slide. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceSlideTextOnlineRequest($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postSlideReplaceText');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlideReplaceText');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling postSlideReplaceText');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling postSlideReplaceText');
        }

        $resourcePath = '/slides/slides/{slideIndex}/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlideReplaceText(Requests\PostSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextOnline($request->document, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }

    /**
     * @deprecated
     */
    public function postSlideReplaceTextWithHttpInfo(Requests\PostSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextOnlineWithHttpInfo($request->document, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }

    /**
     * @deprecated
     */
    public function postSlideReplaceTextAsync(Requests\PostSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextOnlineAsync($request->document, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }

    /**
     * @deprecated
     */
    public function postSlideReplaceTextAsyncWithHttpInfo(Requests\PostSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password);
    }
    /**
     */
    public function downloadSlide($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadSlideWithHttpInfo($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadSlideWithHttpInfo($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadSlideWithHttpInfo($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideRequest($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadSlideAsync($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadSlideAsyncWithHttpInfo($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadSlideAsyncWithHttpInfo($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideRequest($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlideSaveAs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  int $$width Output file width; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height Output file height; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSlideRequest($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlideSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlideSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postSlideSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlideSaveAs(Requests\PostSlideSaveAsRequest $request)
    {
        return $this->downloadSlide($request->name, $request->slideIndex, $request->format, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlideSaveAsWithHttpInfo(Requests\PostSlideSaveAsRequest $request)
    {
        return $this->downloadSlideWithHttpInfo($request->name, $request->slideIndex, $request->format, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlideSaveAsAsync(Requests\PostSlideSaveAsRequest $request)
    {
        return $this->downloadSlideAsync($request->name, $request->slideIndex, $request->format, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlideSaveAsAsyncWithHttpInfo(Requests\PostSlideSaveAsRequest $request)
    {
        return $this->downloadSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->format, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function createSlide($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSlideWithHttpInfo($name, $layoutAlias, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSlideWithHttpInfo($name, $layoutAlias, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSlideWithHttpInfo($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->createSlideRequest($name, $layoutAlias, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSlideAsync($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createSlideAsyncWithHttpInfo($name, $layoutAlias, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSlideAsyncWithHttpInfo($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->createSlideRequest($name, $layoutAlias, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesAdd'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index (optional)
     * @param  int $$position The target position at which to create the slide. Add to the end by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSlideRequest($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesAdd');
        }

        $resourcePath = '/slides/{name}/slides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($layoutAlias !== null) {
            $queryParams['layoutAlias'] = ObjectSerializer::toQueryValue($layoutAlias);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesAdd(Requests\PostSlidesAddRequest $request)
    {
        return $this->createSlide($request->name, $request->layoutAlias, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesAddWithHttpInfo(Requests\PostSlidesAddRequest $request)
    {
        return $this->createSlideWithHttpInfo($request->name, $request->layoutAlias, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesAddAsync(Requests\PostSlidesAddRequest $request)
    {
        return $this->createSlideAsync($request->name, $request->layoutAlias, $request->position, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesAddAsyncWithHttpInfo(Requests\PostSlidesAddRequest $request)
    {
        return $this->createSlideAsyncWithHttpInfo($request->name, $request->layoutAlias, $request->position, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function convert($document, $format, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->convertWithHttpInfo($document, $format, $password, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->convertWithHttpInfo($document, $format, $password, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function convertWithHttpInfo($document, $format, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->convertRequest($document, $format, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function convertAsync($document, $format, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->convertAsyncWithHttpInfo($document, $format, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function convertAsyncWithHttpInfo($document, $format, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->convertRequest($document, $format, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesConvert'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format Export format. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertRequest($document, $format, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postSlidesConvert');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postSlidesConvert');
        }

        $resourcePath = '/slides/convert/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesConvert(Requests\PostSlidesConvertRequest $request)
    {
        return $this->convert($request->document, $request->format, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesConvertWithHttpInfo(Requests\PostSlidesConvertRequest $request)
    {
        return $this->convertWithHttpInfo($request->document, $request->format, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesConvertAsync(Requests\PostSlidesConvertRequest $request)
    {
        return $this->convertAsync($request->document, $request->format, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesConvertAsyncWithHttpInfo(Requests\PostSlidesConvertRequest $request)
    {
        return $this->convertAsyncWithHttpInfo($request->document, $request->format, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function copySlide($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->copySlideWithHttpInfo($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->copySlideWithHttpInfo($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function copySlideWithHttpInfo($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->copySlideRequest($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copySlideAsync($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        return $this->copySlideAsyncWithHttpInfo($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copySlideAsyncWithHttpInfo($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->copySlideRequest($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesCopy'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param  int $$position The target position at which to copy the slide. Copy to the end by default. (optional)
     * @param  string $$source Name of the document to copy a slide from. (optional)
     * @param  string $$sourcePassword Password for the document to copy a slide from. (optional)
     * @param  string $$sourceStorage Template storage name. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copySlideRequest($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesCopy');
        }
        // verify the required parameter 'slide_to_copy' is set
        if ($slideToCopy === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideToCopy when calling postSlidesCopy');
        }

        $resourcePath = '/slides/{name}/slides/copy';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($slideToCopy !== null) {
            $queryParams['slideToCopy'] = ObjectSerializer::toQueryValue($slideToCopy);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($sourceStorage !== null) {
            $queryParams['sourceStorage'] = ObjectSerializer::toQueryValue($sourceStorage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($sourcePassword !== null) {
            $headerParams['sourcePassword'] = ObjectSerializer::toHeaderValue($sourcePassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesCopy(Requests\PostSlidesCopyRequest $request)
    {
        return $this->copySlide($request->name, $request->slideToCopy, $request->position, $request->source, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesCopyWithHttpInfo(Requests\PostSlidesCopyRequest $request)
    {
        return $this->copySlideWithHttpInfo($request->name, $request->slideToCopy, $request->position, $request->source, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesCopyAsync(Requests\PostSlidesCopyRequest $request)
    {
        return $this->copySlideAsync($request->name, $request->slideToCopy, $request->position, $request->source, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesCopyAsyncWithHttpInfo(Requests\PostSlidesCopyRequest $request)
    {
        return $this->copySlideAsyncWithHttpInfo($request->name, $request->slideToCopy, $request->position, $request->source, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createPresentation($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPresentationWithHttpInfo($name, $data, $inputPassword, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPresentationWithHttpInfo($name, $data, $inputPassword, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPresentationWithHttpInfo($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationRequest($name, $data, $inputPassword, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPresentationAsync($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPresentationAsyncWithHttpInfo($name, $data, $inputPassword, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPresentationAsyncWithHttpInfo($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationRequest($name, $data, $inputPassword, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesDocument'
     *
     * @param  string $$name Document name. (required)
     * @param  \SplFileObject $$data Document input data. (optional)
     * @param  string $$inputPassword The password for input document. (optional)
     * @param  string $$password The document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPresentationRequest($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesDocument');
        }

        $resourcePath = '/slides/{name}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($inputPassword !== null) {
            $headerParams['inputPassword'] = ObjectSerializer::toHeaderValue($inputPassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($data)) {
            array_push($_tempBody, $data);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesDocument(Requests\PostSlidesDocumentRequest $request)
    {
        return $this->createPresentation($request->name, $request->data, $request->inputPassword, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentWithHttpInfo(Requests\PostSlidesDocumentRequest $request)
    {
        return $this->createPresentationWithHttpInfo($request->name, $request->data, $request->inputPassword, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentAsync(Requests\PostSlidesDocumentRequest $request)
    {
        return $this->createPresentationAsync($request->name, $request->data, $request->inputPassword, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentAsyncWithHttpInfo(Requests\PostSlidesDocumentRequest $request)
    {
        return $this->createPresentationAsyncWithHttpInfo($request->name, $request->data, $request->inputPassword, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function importFromHtml($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->importFromHtmlWithHttpInfo($name, $html, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->importFromHtmlWithHttpInfo($name, $html, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function importFromHtmlWithHttpInfo($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromHtmlRequest($name, $html, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function importFromHtmlAsync($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        return $this->importFromHtmlAsyncWithHttpInfo($name, $html, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function importFromHtmlAsyncWithHttpInfo($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromHtmlRequest($name, $html, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesDocumentFromHtml'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$html HTML data. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importFromHtmlRequest($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesDocumentFromHtml');
        }

        $resourcePath = '/slides/{name}/fromHtml';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($html)) {
            array_push($_tempBody, $html);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromHtml(Requests\PostSlidesDocumentFromHtmlRequest $request)
    {
        return $this->importFromHtml($request->name, $request->html, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromHtmlWithHttpInfo(Requests\PostSlidesDocumentFromHtmlRequest $request)
    {
        return $this->importFromHtmlWithHttpInfo($request->name, $request->html, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromHtmlAsync(Requests\PostSlidesDocumentFromHtmlRequest $request)
    {
        return $this->importFromHtmlAsync($request->name, $request->html, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromHtmlAsyncWithHttpInfo(Requests\PostSlidesDocumentFromHtmlRequest $request)
    {
        return $this->importFromHtmlAsyncWithHttpInfo($request->name, $request->html, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function importFromPdf($name, $pdf = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->importFromPdfWithHttpInfo($name, $pdf, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->importFromPdfWithHttpInfo($name, $pdf, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function importFromPdfWithHttpInfo($name, $pdf = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromPdfRequest($name, $pdf, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function importFromPdfAsync($name, $pdf = null, $password = null, $folder = null, $storage = null)
    {
        return $this->importFromPdfAsyncWithHttpInfo($name, $pdf, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function importFromPdfAsyncWithHttpInfo($name, $pdf = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromPdfRequest($name, $pdf, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesDocumentFromPdf'
     *
     * @param  string $$name Document name. (required)
     * @param  \SplFileObject $$pdf PDF data. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importFromPdfRequest($name, $pdf = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesDocumentFromPdf');
        }

        $resourcePath = '/slides/{name}/fromPdf';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($pdf)) {
            array_push($_tempBody, $pdf);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromPdf(Requests\PostSlidesDocumentFromPdfRequest $request)
    {
        return $this->importFromPdf($request->name, $request->pdf, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromPdfWithHttpInfo(Requests\PostSlidesDocumentFromPdfRequest $request)
    {
        return $this->importFromPdfWithHttpInfo($request->name, $request->pdf, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromPdfAsync(Requests\PostSlidesDocumentFromPdfRequest $request)
    {
        return $this->importFromPdfAsync($request->name, $request->pdf, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromPdfAsyncWithHttpInfo(Requests\PostSlidesDocumentFromPdfRequest $request)
    {
        return $this->importFromPdfAsyncWithHttpInfo($request->name, $request->pdf, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createPresentationFromSource($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPresentationFromSourceWithHttpInfo($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPresentationFromSourceWithHttpInfo($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPresentationFromSourceWithHttpInfo($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromSourceRequest($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPresentationFromSourceAsync($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPresentationFromSourceAsyncWithHttpInfo($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPresentationFromSourceAsyncWithHttpInfo($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromSourceRequest($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesDocumentFromSource'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$sourcePath Template file path. (optional)
     * @param  string $$sourcePassword Template file password. (optional)
     * @param  string $$sourceStorage Template storage name. (optional)
     * @param  string $$password The document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPresentationFromSourceRequest($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesDocumentFromSource');
        }

        $resourcePath = '/slides/{name}/fromSource';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sourcePath !== null) {
            $queryParams['sourcePath'] = ObjectSerializer::toQueryValue($sourcePath);
        }
        // query params
        if ($sourceStorage !== null) {
            $queryParams['sourceStorage'] = ObjectSerializer::toQueryValue($sourceStorage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($sourcePassword !== null) {
            $headerParams['sourcePassword'] = ObjectSerializer::toHeaderValue($sourcePassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromSource(Requests\PostSlidesDocumentFromSourceRequest $request)
    {
        return $this->createPresentationFromSource($request->name, $request->sourcePath, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromSourceWithHttpInfo(Requests\PostSlidesDocumentFromSourceRequest $request)
    {
        return $this->createPresentationFromSourceWithHttpInfo($request->name, $request->sourcePath, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromSourceAsync(Requests\PostSlidesDocumentFromSourceRequest $request)
    {
        return $this->createPresentationFromSourceAsync($request->name, $request->sourcePath, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromSourceAsyncWithHttpInfo(Requests\PostSlidesDocumentFromSourceRequest $request)
    {
        return $this->createPresentationFromSourceAsyncWithHttpInfo($request->name, $request->sourcePath, $request->sourcePassword, $request->sourceStorage, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function createPresentationFromTemplate($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPresentationFromTemplateWithHttpInfo($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPresentationFromTemplateWithHttpInfo($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPresentationFromTemplateWithHttpInfo($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromTemplateRequest($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPresentationFromTemplateAsync($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPresentationFromTemplateAsyncWithHttpInfo($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPresentationFromTemplateAsyncWithHttpInfo($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromTemplateRequest($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesDocumentFromTemplate'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$templatePath Template file path. (required)
     * @param  string $$data Document input data. (optional)
     * @param  string $$templatePassword Template file password. (optional)
     * @param  string $$templateStorage Template storage name. (optional)
     * @param  bool $$isImageDataEmbedded True if image data is embedded. (optional, default to false)
     * @param  string $$password The document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPresentationFromTemplateRequest($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesDocumentFromTemplate');
        }
        // verify the required parameter 'template_path' is set
        if ($templatePath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templatePath when calling postSlidesDocumentFromTemplate');
        }

        $resourcePath = '/slides/{name}/fromTemplate';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($templatePath !== null) {
            $queryParams['templatePath'] = ObjectSerializer::toQueryValue($templatePath);
        }
        // query params
        if ($templateStorage !== null) {
            $queryParams['templateStorage'] = ObjectSerializer::toQueryValue($templateStorage);
        }
        // query params
        if ($isImageDataEmbedded !== null) {
            $queryParams['isImageDataEmbedded'] = ObjectSerializer::toQueryValue($isImageDataEmbedded);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($templatePassword !== null) {
            $headerParams['templatePassword'] = ObjectSerializer::toHeaderValue($templatePassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($data)) {
            array_push($_tempBody, $data);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromTemplate(Requests\PostSlidesDocumentFromTemplateRequest $request)
    {
        return $this->createPresentationFromTemplate($request->name, $request->templatePath, $request->data, $request->templatePassword, $request->templateStorage, $request->isImageDataEmbedded, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromTemplateWithHttpInfo(Requests\PostSlidesDocumentFromTemplateRequest $request)
    {
        return $this->createPresentationFromTemplateWithHttpInfo($request->name, $request->templatePath, $request->data, $request->templatePassword, $request->templateStorage, $request->isImageDataEmbedded, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromTemplateAsync(Requests\PostSlidesDocumentFromTemplateRequest $request)
    {
        return $this->createPresentationFromTemplateAsync($request->name, $request->templatePath, $request->data, $request->templatePassword, $request->templateStorage, $request->isImageDataEmbedded, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesDocumentFromTemplateAsyncWithHttpInfo(Requests\PostSlidesDocumentFromTemplateRequest $request)
    {
        return $this->createPresentationFromTemplateAsyncWithHttpInfo($request->name, $request->templatePath, $request->data, $request->templatePassword, $request->templateStorage, $request->isImageDataEmbedded, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function mergeOnline(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null)
    {
        try {
            list($response) = $this->mergeOnlineWithHttpInfo($files, $request, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->mergeOnlineWithHttpInfo($files, $request, $password);
            return $response;
        } 
    }

    /**
     */
    public function mergeOnlineWithHttpInfo(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->mergeOnlineRequest($files, $request, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeOnlineAsync(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null)
    {
        return $this->mergeOnlineAsyncWithHttpInfo($files, $request, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeOnlineAsyncWithHttpInfo(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->mergeOnlineRequest($files, $request, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesMerge'
     *
     * @param  array $$files Files to merge (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $$request Merge request. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeOnlineRequest(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null)
    {

        $resourcePath = '/slides/merge';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        if (isset($files)) {
            $_tempBody = array_merge($_tempBody, $files);
        }
        $this->headerSelector->selectHeadersForMultipart($headerParams, ['multipart/form-data']);
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesMerge(Requests\PostSlidesMergeRequest $request)
    {
        return $this->mergeOnline($request->files, $request->request, $request->password);
    }

    /**
     * @deprecated
     */
    public function postSlidesMergeWithHttpInfo(Requests\PostSlidesMergeRequest $request)
    {
        return $this->mergeOnlineWithHttpInfo($request->files, $request->request, $request->password);
    }

    /**
     * @deprecated
     */
    public function postSlidesMergeAsync(Requests\PostSlidesMergeRequest $request)
    {
        return $this->mergeOnlineAsync($request->files, $request->request, $request->password);
    }

    /**
     * @deprecated
     */
    public function postSlidesMergeAsyncWithHttpInfo(Requests\PostSlidesMergeRequest $request)
    {
        return $this->mergeOnlineAsyncWithHttpInfo($request->files, $request->request, $request->password);
    }
    /**
     */
    public function pipeline(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        try {
            list($response) = $this->pipelineWithHttpInfo($pipeline, $files);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->pipelineWithHttpInfo($pipeline, $files);
            return $response;
        } 
    }

    /**
     */
    public function pipelineWithHttpInfo(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->pipelineRequest($pipeline, $files);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function pipelineAsync(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        return $this->pipelineAsyncWithHttpInfo($pipeline, $files)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function pipelineAsyncWithHttpInfo(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->pipelineRequest($pipeline, $files);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesPipeline'
     *
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Pipeline $$pipeline A Pipeline object. (required)
     * @param  array $$files Files to upload with the pipeline (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pipelineRequest(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        // verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pipeline when calling postSlidesPipeline');
        }

        $resourcePath = '/slides/pipeline';
        $queryParams = [];
        $headerParams = [];


        $_tempBody = [];
        if (isset($pipeline)) {
            array_push($_tempBody, $pipeline);
        }
        if (isset($files)) {
            $_tempBody = array_merge($_tempBody, $files);
        }
        $this->headerSelector->selectHeadersForMultipart($headerParams, ['multipart/form-data']);
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesPipeline(Requests\PostSlidesPipelineRequest $request)
    {
        return $this->pipeline($request->pipeline, $request->files);
    }

    /**
     * @deprecated
     */
    public function postSlidesPipelineWithHttpInfo(Requests\PostSlidesPipelineRequest $request)
    {
        return $this->pipelineWithHttpInfo($request->pipeline, $request->files);
    }

    /**
     * @deprecated
     */
    public function postSlidesPipelineAsync(Requests\PostSlidesPipelineRequest $request)
    {
        return $this->pipelineAsync($request->pipeline, $request->files);
    }

    /**
     * @deprecated
     */
    public function postSlidesPipelineAsyncWithHttpInfo(Requests\PostSlidesPipelineRequest $request)
    {
        return $this->pipelineAsyncWithHttpInfo($request->pipeline, $request->files);
    }
    /**
     */
    public function replacePresentationText($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->replacePresentationTextWithHttpInfo($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replacePresentationTextWithHttpInfo($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function replacePresentationTextWithHttpInfo($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentReplaceResult';
        $httpRequest = $this->replacePresentationTextRequest($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentReplaceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replacePresentationTextAsync($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        return $this->replacePresentationTextAsyncWithHttpInfo($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replacePresentationTextAsyncWithHttpInfo($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentReplaceResult';
        $httpRequest = $this->replacePresentationTextRequest($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesPresentationReplaceText'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replacePresentationTextRequest($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesPresentationReplaceText');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling postSlidesPresentationReplaceText');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling postSlidesPresentationReplaceText');
        }

        $resourcePath = '/slides/{name}/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesPresentationReplaceText(Requests\PostSlidesPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationText($request->name, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesPresentationReplaceTextWithHttpInfo(Requests\PostSlidesPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextWithHttpInfo($request->name, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesPresentationReplaceTextAsync(Requests\PostSlidesPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextAsync($request->name, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesPresentationReplaceTextAsyncWithHttpInfo(Requests\PostSlidesPresentationReplaceTextRequest $request)
    {
        return $this->replacePresentationTextAsyncWithHttpInfo($request->name, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function moveSlide($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->moveSlideWithHttpInfo($name, $slideIndex, $newPosition, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->moveSlideWithHttpInfo($name, $slideIndex, $newPosition, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function moveSlideWithHttpInfo($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->moveSlideRequest($name, $slideIndex, $newPosition, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveSlideAsync($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        return $this->moveSlideAsyncWithHttpInfo($name, $slideIndex, $newPosition, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveSlideAsyncWithHttpInfo($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->moveSlideRequest($name, $slideIndex, $newPosition, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesReorder'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  int $$newPosition The new position of the reordered slide. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveSlideRequest($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesReorder');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlidesReorder');
        }
        // verify the required parameter 'new_position' is set
        if ($newPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newPosition when calling postSlidesReorder');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/move';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($newPosition !== null) {
            $queryParams['newPosition'] = ObjectSerializer::toQueryValue($newPosition);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesReorder(Requests\PostSlidesReorderRequest $request)
    {
        return $this->moveSlide($request->name, $request->slideIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderWithHttpInfo(Requests\PostSlidesReorderRequest $request)
    {
        return $this->moveSlideWithHttpInfo($request->name, $request->slideIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderAsync(Requests\PostSlidesReorderRequest $request)
    {
        return $this->moveSlideAsync($request->name, $request->slideIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderAsyncWithHttpInfo(Requests\PostSlidesReorderRequest $request)
    {
        return $this->moveSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->newPosition, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function reorderSlides($name, $oldPositions = null, $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->reorderSlidesWithHttpInfo($name, $oldPositions, $newPositions, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->reorderSlidesWithHttpInfo($name, $oldPositions, $newPositions, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function reorderSlidesWithHttpInfo($name, $oldPositions = null, $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->reorderSlidesRequest($name, $oldPositions, $newPositions, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function reorderSlidesAsync($name, $oldPositions = null, $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        return $this->reorderSlidesAsyncWithHttpInfo($name, $oldPositions, $newPositions, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function reorderSlidesAsyncWithHttpInfo($name, $oldPositions = null, $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->reorderSlidesRequest($name, $oldPositions, $newPositions, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesReorderMany'
     *
     * @param  string $$name Document name. (required)
     * @param  array $$oldPositions A comma separated array of positions of slides to be reordered. (optional)
     * @param  array $$newPositions A comma separated array of new slide positions. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reorderSlidesRequest($name, $oldPositions = null, $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesReorderMany');
        }

        $resourcePath = '/slides/{name}/slides/reorder';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldPositions !== null) {
            $queryParams['oldPositions'] = ObjectSerializer::toQueryValue($oldPositions);
        }
        // query params
        if ($newPositions !== null) {
            $queryParams['newPositions'] = ObjectSerializer::toQueryValue($newPositions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderMany(Requests\PostSlidesReorderManyRequest $request)
    {
        return $this->reorderSlides($request->name, $request->oldPositions, $request->newPositions, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderManyWithHttpInfo(Requests\PostSlidesReorderManyRequest $request)
    {
        return $this->reorderSlidesWithHttpInfo($request->name, $request->oldPositions, $request->newPositions, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderManyAsync(Requests\PostSlidesReorderManyRequest $request)
    {
        return $this->reorderSlidesAsync($request->name, $request->oldPositions, $request->newPositions, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesReorderManyAsyncWithHttpInfo(Requests\PostSlidesReorderManyRequest $request)
    {
        return $this->reorderSlidesAsyncWithHttpInfo($request->name, $request->oldPositions, $request->newPositions, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function downloadPresentation($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadPresentationWithHttpInfo($name, $format, $options, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadPresentationWithHttpInfo($name, $format, $options, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadPresentationWithHttpInfo($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadPresentationRequest($name, $format, $options, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadPresentationAsync($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadPresentationAsyncWithHttpInfo($name, $format, $options, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadPresentationAsyncWithHttpInfo($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadPresentationRequest($name, $format, $options, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesSaveAs'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$format Export format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadPresentationRequest($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postSlidesSaveAs');
        }

        $resourcePath = '/slides/{name}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesSaveAs(Requests\PostSlidesSaveAsRequest $request)
    {
        return $this->downloadPresentation($request->name, $request->format, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesSaveAsWithHttpInfo(Requests\PostSlidesSaveAsRequest $request)
    {
        return $this->downloadPresentationWithHttpInfo($request->name, $request->format, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesSaveAsAsync(Requests\PostSlidesSaveAsRequest $request)
    {
        return $this->downloadPresentationAsync($request->name, $request->format, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesSaveAsAsyncWithHttpInfo(Requests\PostSlidesSaveAsRequest $request)
    {
        return $this->downloadPresentationAsyncWithHttpInfo($request->name, $request->format, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function setDocumentProperties($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setDocumentPropertiesWithHttpInfo($name, $properties, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setDocumentPropertiesWithHttpInfo($name, $properties, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setDocumentPropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->setDocumentPropertiesRequest($name, $properties, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setDocumentPropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        return $this->setDocumentPropertiesAsyncWithHttpInfo($name, $properties, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setDocumentPropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->setDocumentPropertiesRequest($name, $properties, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesSetDocumentProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $$properties New properties. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setDocumentPropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesSetDocumentProperties');
        }
        // verify the required parameter 'properties' is set
        if ($properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $properties when calling postSlidesSetDocumentProperties');
        }

        $resourcePath = '/slides/{name}/documentproperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($properties)) {
            array_push($_tempBody, $properties);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesSetDocumentProperties(Requests\PostSlidesSetDocumentPropertiesRequest $request)
    {
        return $this->setDocumentProperties($request->name, $request->properties, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesSetDocumentPropertiesWithHttpInfo(Requests\PostSlidesSetDocumentPropertiesRequest $request)
    {
        return $this->setDocumentPropertiesWithHttpInfo($request->name, $request->properties, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesSetDocumentPropertiesAsync(Requests\PostSlidesSetDocumentPropertiesRequest $request)
    {
        return $this->setDocumentPropertiesAsync($request->name, $request->properties, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesSetDocumentPropertiesAsyncWithHttpInfo(Requests\PostSlidesSetDocumentPropertiesRequest $request)
    {
        return $this->setDocumentPropertiesAsyncWithHttpInfo($request->name, $request->properties, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function replaceSlideText($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->replaceSlideTextWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replaceSlideTextWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function replaceSlideTextWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideReplaceResult';
        $httpRequest = $this->replaceSlideTextRequest($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideReplaceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replaceSlideTextAsync($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        return $this->replaceSlideTextAsyncWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replaceSlideTextAsyncWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideReplaceResult';
        $httpRequest = $this->replaceSlideTextRequest($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesSlideReplaceText'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceSlideTextRequest($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesSlideReplaceText');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSlidesSlideReplaceText');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling postSlidesSlideReplaceText');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling postSlidesSlideReplaceText');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesSlideReplaceText(Requests\PostSlidesSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideText($request->name, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesSlideReplaceTextWithHttpInfo(Requests\PostSlidesSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextWithHttpInfo($request->name, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesSlideReplaceTextAsync(Requests\PostSlidesSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextAsync($request->name, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postSlidesSlideReplaceTextAsyncWithHttpInfo(Requests\PostSlidesSlideReplaceTextRequest $request)
    {
        return $this->replaceSlideTextAsyncWithHttpInfo($request->name, $request->slideIndex, $request->oldValue, $request->newValue, $request->ignoreCase, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function split($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->splitWithHttpInfo($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitWithHttpInfo($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function splitWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitRequest($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitAsync($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->splitAsyncWithHttpInfo($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitRequest($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSlidesSplit'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  string $$format Export format. Default value is jpeg. (optional, default to 0)
     * @param  int $$width The width of created images. (optional)
     * @param  int $$height The height of created images. (optional)
     * @param  int $$from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. (optional)
     * @param  int $$to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. (optional)
     * @param  string $$destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitRequest($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSlidesSplit');
        }

        $resourcePath = '/slides/{name}/split';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($destFolder !== null) {
            $queryParams['destFolder'] = ObjectSerializer::toQueryValue($destFolder);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSlidesSplit(Requests\PostSlidesSplitRequest $request)
    {
        return $this->split($request->name, $request->options, $request->format, $request->width, $request->height, $request->from, $request->to, $request->destFolder, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesSplitWithHttpInfo(Requests\PostSlidesSplitRequest $request)
    {
        return $this->splitWithHttpInfo($request->name, $request->options, $request->format, $request->width, $request->height, $request->from, $request->to, $request->destFolder, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesSplitAsync(Requests\PostSlidesSplitRequest $request)
    {
        return $this->splitAsync($request->name, $request->options, $request->format, $request->width, $request->height, $request->from, $request->to, $request->destFolder, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSlidesSplitAsyncWithHttpInfo(Requests\PostSlidesSplitRequest $request)
    {
        return $this->splitAsyncWithHttpInfo($request->name, $request->options, $request->format, $request->width, $request->height, $request->from, $request->to, $request->destFolder, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function downloadSubshape($name, $slideIndex, $path, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadSubshapeAsync($name, $slideIndex, $path, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postSubshapeSaveAs'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postSubshapeSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling postSubshapeSaveAs');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling postSubshapeSaveAs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling postSubshapeSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling postSubshapeSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postSubshapeSaveAs(Requests\PostSubshapeSaveAsRequest $request)
    {
        return $this->downloadSubshape($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSubshapeSaveAsWithHttpInfo(Requests\PostSubshapeSaveAsRequest $request)
    {
        return $this->downloadSubshapeWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSubshapeSaveAsAsync(Requests\PostSubshapeSaveAsRequest $request)
    {
        return $this->downloadSubshapeAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function postSubshapeSaveAsAsyncWithHttpInfo(Requests\PostSubshapeSaveAsRequest $request)
    {
        return $this->downloadSubshapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function createWatermark($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->createWatermarkWithHttpInfo($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->createWatermarkWithHttpInfo($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function createWatermarkWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createWatermarkRequest($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createWatermarkAsync($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createWatermarkAsyncWithHttpInfo($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createWatermarkAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createWatermarkRequest($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postWatermark'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Shape $$shape Shape DTO (optional)
     * @param  float $$fontHeight Watermark font height. (optional)
     * @param  string $$text Watermark text. (optional)
     * @param  string $$fontName Watermark font name. (optional)
     * @param  string $$fontColor Watermark font color. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWatermarkRequest($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postWatermark');
        }

        $resourcePath = '/slides/{name}/watermark';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($fontHeight !== null) {
            $queryParams['fontHeight'] = ObjectSerializer::toQueryValue($fontHeight);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($fontName !== null) {
            $queryParams['fontName'] = ObjectSerializer::toQueryValue($fontName);
        }
        // query params
        if ($fontColor !== null) {
            $queryParams['fontColor'] = ObjectSerializer::toQueryValue($fontColor);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($shape)) {
            array_push($_tempBody, $shape);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postWatermark(Requests\PostWatermarkRequest $request)
    {
        $this->createWatermark($request->name, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postWatermarkWithHttpInfo(Requests\PostWatermarkRequest $request)
    {
        return $this->createWatermarkWithHttpInfo($request->name, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postWatermarkAsync(Requests\PostWatermarkRequest $request)
    {
        return $this->createWatermarkAsync($request->name, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function postWatermarkAsyncWithHttpInfo(Requests\PostWatermarkRequest $request)
    {
        return $this->createWatermarkAsyncWithHttpInfo($request->name, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function deleteWatermarkOnline($document, $shapeName = null, $password = null)
    {
        try {
            list($response) = $this->deleteWatermarkOnlineWithHttpInfo($document, $shapeName, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteWatermarkOnlineWithHttpInfo($document, $shapeName, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteWatermarkOnlineWithHttpInfo($document, $shapeName = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteWatermarkOnlineRequest($document, $shapeName, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteWatermarkOnlineAsync($document, $shapeName = null, $password = null)
    {
        return $this->deleteWatermarkOnlineAsyncWithHttpInfo($document, $shapeName, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteWatermarkOnlineAsyncWithHttpInfo($document, $shapeName = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteWatermarkOnlineRequest($document, $shapeName, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postWatermarkDeleteOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$shapeName Name of the watermark shape. If null, default value \&quot;watermark\&quot;is used. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWatermarkOnlineRequest($document, $shapeName = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postWatermarkDeleteOnline');
        }

        $resourcePath = '/slides/watermark/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeName !== null) {
            $queryParams['shapeName'] = ObjectSerializer::toQueryValue($shapeName);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postWatermarkDeleteOnline(Requests\PostWatermarkDeleteOnlineRequest $request)
    {
        return $this->deleteWatermarkOnline($request->document, $request->shapeName, $request->password);
    }

    /**
     * @deprecated
     */
    public function postWatermarkDeleteOnlineWithHttpInfo(Requests\PostWatermarkDeleteOnlineRequest $request)
    {
        return $this->deleteWatermarkOnlineWithHttpInfo($request->document, $request->shapeName, $request->password);
    }

    /**
     * @deprecated
     */
    public function postWatermarkDeleteOnlineAsync(Requests\PostWatermarkDeleteOnlineRequest $request)
    {
        return $this->deleteWatermarkOnlineAsync($request->document, $request->shapeName, $request->password);
    }

    /**
     * @deprecated
     */
    public function postWatermarkDeleteOnlineAsyncWithHttpInfo(Requests\PostWatermarkDeleteOnlineRequest $request)
    {
        return $this->deleteWatermarkOnlineAsyncWithHttpInfo($request->document, $request->shapeName, $request->password);
    }
    /**
     */
    public function createWatermarkOnline($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        try {
            list($response) = $this->createWatermarkOnlineWithHttpInfo($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createWatermarkOnlineWithHttpInfo($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);
            return $response;
        } 
    }

    /**
     */
    public function createWatermarkOnlineWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createWatermarkOnlineRequest($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createWatermarkOnlineAsync($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        return $this->createWatermarkOnlineAsyncWithHttpInfo($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createWatermarkOnlineAsyncWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createWatermarkOnlineRequest($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'postWatermarkOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Shape $$shape Shape DTO (optional)
     * @param  float $$fontHeight Watermark font height. (optional)
     * @param  string $$text Watermark text. (optional)
     * @param  string $$fontName Watermark font name. (optional)
     * @param  string $$fontColor Watermark font color. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWatermarkOnlineRequest($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling postWatermarkOnline');
        }

        $resourcePath = '/slides/watermark';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($fontHeight !== null) {
            $queryParams['fontHeight'] = ObjectSerializer::toQueryValue($fontHeight);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($fontName !== null) {
            $queryParams['fontName'] = ObjectSerializer::toQueryValue($fontName);
        }
        // query params
        if ($fontColor !== null) {
            $queryParams['fontColor'] = ObjectSerializer::toQueryValue($fontColor);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($shape)) {
            array_push($_tempBody, $shape);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }

    /**
     * @deprecated
     */
    public function postWatermarkOnline(Requests\PostWatermarkOnlineRequest $request)
    {
        return $this->createWatermarkOnline($request->document, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password);
    }

    /**
     * @deprecated
     */
    public function postWatermarkOnlineWithHttpInfo(Requests\PostWatermarkOnlineRequest $request)
    {
        return $this->createWatermarkOnlineWithHttpInfo($request->document, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password);
    }

    /**
     * @deprecated
     */
    public function postWatermarkOnlineAsync(Requests\PostWatermarkOnlineRequest $request)
    {
        return $this->createWatermarkOnlineAsync($request->document, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password);
    }

    /**
     * @deprecated
     */
    public function postWatermarkOnlineAsyncWithHttpInfo(Requests\PostWatermarkOnlineRequest $request)
    {
        return $this->createWatermarkOnlineAsyncWithHttpInfo($request->document, $request->shape, $request->fontHeight, $request->text, $request->fontName, $request->fontColor, $request->password);
    }
    /**
     */
    public function updateChartCategory($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateChartCategoryAsync($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        return $this->updateChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putChartCategory'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$categoryIndex Category index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $$category Category DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putChartCategory');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putChartCategory');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putChartCategory');
        }
        // verify the required parameter 'category_index' is set
        if ($categoryIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $categoryIndex when calling putChartCategory');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling putChartCategory');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "categoryIndex", $categoryIndex);
        $_tempBody = [];
        if (isset($category)) {
            array_push($_tempBody, $category);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putChartCategory(Requests\PutChartCategoryRequest $request)
    {
        return $this->updateChartCategory($request->name, $request->slideIndex, $request->shapeIndex, $request->categoryIndex, $request->category, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartCategoryWithHttpInfo(Requests\PutChartCategoryRequest $request)
    {
        return $this->updateChartCategoryWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->categoryIndex, $request->category, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartCategoryAsync(Requests\PutChartCategoryRequest $request)
    {
        return $this->updateChartCategoryAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->categoryIndex, $request->category, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartCategoryAsyncWithHttpInfo(Requests\PutChartCategoryRequest $request)
    {
        return $this->updateChartCategoryAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->categoryIndex, $request->category, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateChartDataPoint($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateChartDataPointAsync($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        return $this->updateChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putChartDataPoint'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  int $$pointIndex Data point index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DataPoint $$dataPoint Data point DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putChartDataPoint');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putChartDataPoint');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putChartDataPoint');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling putChartDataPoint');
        }
        // verify the required parameter 'point_index' is set
        if ($pointIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pointIndex when calling putChartDataPoint');
        }
        // verify the required parameter 'data_point' is set
        if ($dataPoint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dataPoint when calling putChartDataPoint');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "pointIndex", $pointIndex);
        $_tempBody = [];
        if (isset($dataPoint)) {
            array_push($_tempBody, $dataPoint);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putChartDataPoint(Requests\PutChartDataPointRequest $request)
    {
        return $this->updateChartDataPoint($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->pointIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartDataPointWithHttpInfo(Requests\PutChartDataPointRequest $request)
    {
        return $this->updateChartDataPointWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->pointIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartDataPointAsync(Requests\PutChartDataPointRequest $request)
    {
        return $this->updateChartDataPointAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->pointIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartDataPointAsyncWithHttpInfo(Requests\PutChartDataPointRequest $request)
    {
        return $this->updateChartDataPointAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->pointIndex, $request->dataPoint, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateChartSeries($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateChartSeriesAsync($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        return $this->updateChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putChartSeries'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Series $$series Series DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putChartSeries');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putChartSeries');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putChartSeries');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling putChartSeries');
        }
        // verify the required parameter 'series' is set
        if ($series === null) {
            throw new \InvalidArgumentException('Missing the required parameter $series when calling putChartSeries');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $_tempBody = [];
        if (isset($series)) {
            array_push($_tempBody, $series);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putChartSeries(Requests\PutChartSeriesRequest $request)
    {
        return $this->updateChartSeries($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->series, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartSeriesWithHttpInfo(Requests\PutChartSeriesRequest $request)
    {
        return $this->updateChartSeriesWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->series, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartSeriesAsync(Requests\PutChartSeriesRequest $request)
    {
        return $this->updateChartSeriesAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->series, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putChartSeriesAsyncWithHttpInfo(Requests\PutChartSeriesRequest $request)
    {
        return $this->updateChartSeriesAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->seriesIndex, $request->series, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function saveShapeOnline($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveShapeOnlineAsync($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putExportShape'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling putExportShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putExportShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putExportShape');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putExportShape');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putExportShape');
        }

        $resourcePath = '/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putExportShape(Requests\PutExportShapeRequest $request)
    {
        $this->saveShapeOnline($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putExportShapeWithHttpInfo(Requests\PutExportShapeRequest $request)
    {
        return $this->saveShapeOnlineWithHttpInfo($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putExportShapeAsync(Requests\PutExportShapeRequest $request)
    {
        return $this->saveShapeOnlineAsync($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putExportShapeAsyncWithHttpInfo(Requests\PutExportShapeRequest $request)
    {
        return $this->saveShapeOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function saveSlideOnline($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveSlideOnlineWithHttpInfo($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveSlideOnlineWithHttpInfo($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveSlideOnlineWithHttpInfo($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideOnlineRequest($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveSlideOnlineAsync($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideOnlineRequest($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putExportSlide'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  int $$width Output file width; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height Output file height; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveSlideOnlineRequest($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling putExportSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putExportSlide');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putExportSlide');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putExportSlide');
        }

        $resourcePath = '/slides/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putExportSlide(Requests\PutExportSlideRequest $request)
    {
        $this->saveSlideOnline($request->document, $request->slideIndex, $request->format, $request->outPath, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putExportSlideWithHttpInfo(Requests\PutExportSlideRequest $request)
    {
        return $this->saveSlideOnlineWithHttpInfo($request->document, $request->slideIndex, $request->format, $request->outPath, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putExportSlideAsync(Requests\PutExportSlideRequest $request)
    {
        return $this->saveSlideOnlineAsync($request->document, $request->slideIndex, $request->format, $request->outPath, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putExportSlideAsyncWithHttpInfo(Requests\PutExportSlideRequest $request)
    {
        return $this->saveSlideOnlineAsyncWithHttpInfo($request->document, $request->slideIndex, $request->format, $request->outPath, $request->width, $request->height, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function updateLayoutSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateLayoutSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateLayoutSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateLayoutSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->updateLayoutSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateLayoutSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateLayoutSlideAsyncWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateLayoutSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->updateLayoutSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putLayoutSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $$slideDto Slide update data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLayoutSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putLayoutSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putLayoutSlide');
        }
        // verify the required parameter 'slide_dto' is set
        if ($slideDto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideDto when calling putLayoutSlide');
        }

        $resourcePath = '/slides/{name}/layoutSlides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($slideDto)) {
            array_push($_tempBody, $slideDto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putLayoutSlide(Requests\PutLayoutSlideRequest $request)
    {
        return $this->updateLayoutSlide($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putLayoutSlideWithHttpInfo(Requests\PutLayoutSlideRequest $request)
    {
        return $this->updateLayoutSlideWithHttpInfo($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putLayoutSlideAsync(Requests\PutLayoutSlideRequest $request)
    {
        return $this->updateLayoutSlideAsync($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putLayoutSlideAsyncWithHttpInfo(Requests\PutLayoutSlideRequest $request)
    {
        return $this->updateLayoutSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setNotesSlideHeaderFooter($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->setNotesSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setNotesSlideHeaderFooterAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->setNotesSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putNotesSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $$dto Header/footer to set. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setNotesSlideHeaderFooterRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putNotesSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putNotesSlideHeaderFooter');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putNotesSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putNotesSlideHeaderFooter(Requests\PutNotesSlideHeaderFooterRequest $request)
    {
        return $this->setNotesSlideHeaderFooter($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putNotesSlideHeaderFooterWithHttpInfo(Requests\PutNotesSlideHeaderFooterRequest $request)
    {
        return $this->setNotesSlideHeaderFooterWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putNotesSlideHeaderFooterAsync(Requests\PutNotesSlideHeaderFooterRequest $request)
    {
        return $this->setNotesSlideHeaderFooterAsync($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putNotesSlideHeaderFooterAsyncWithHttpInfo(Requests\PutNotesSlideHeaderFooterRequest $request)
    {
        return $this->setNotesSlideHeaderFooterAsyncWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function saveNotesSlideShape($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveNotesSlideShapeAsync($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putNotesSlideShapeSaveAs'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putNotesSlideShapeSaveAs');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putNotesSlideShapeSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putNotesSlideShapeSaveAs(Requests\PutNotesSlideShapeSaveAsRequest $request)
    {
        $this->saveNotesSlideShape($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putNotesSlideShapeSaveAsWithHttpInfo(Requests\PutNotesSlideShapeSaveAsRequest $request)
    {
        return $this->saveNotesSlideShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putNotesSlideShapeSaveAsAsync(Requests\PutNotesSlideShapeSaveAsRequest $request)
    {
        return $this->saveNotesSlideShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putNotesSlideShapeSaveAsAsyncWithHttpInfo(Requests\PutNotesSlideShapeSaveAsRequest $request)
    {
        return $this->saveNotesSlideShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function orderedMerge($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->orderedMergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->orderedMergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function orderedMergeWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->orderedMergeRequest($name, $request, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function orderedMergeAsync($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        return $this->orderedMergeAsyncWithHttpInfo($name, $request, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function orderedMergeAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->orderedMergeRequest($name, $request, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putPresentationMerge'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $$request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderedMergeRequest($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putPresentationMerge');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling putPresentationMerge');
        }

        $resourcePath = '/slides/{name}/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putPresentationMerge(Requests\PutPresentationMergeRequest $request)
    {
        return $this->orderedMerge($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putPresentationMergeWithHttpInfo(Requests\PutPresentationMergeRequest $request)
    {
        return $this->orderedMergeWithHttpInfo($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putPresentationMergeAsync(Requests\PutPresentationMergeRequest $request)
    {
        return $this->orderedMergeAsync($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putPresentationMergeAsyncWithHttpInfo(Requests\PutPresentationMergeRequest $request)
    {
        return $this->orderedMergeAsyncWithHttpInfo($request->name, $request->request, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function splitAndSaveOnline($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->splitAndSaveOnlineWithHttpInfo($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitAndSaveOnlineWithHttpInfo($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function splitAndSaveOnlineWithHttpInfo($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitAndSaveOnlineRequest($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitAndSaveOnlineAsync($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->splitAndSaveOnlineAsyncWithHttpInfo($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitAndSaveOnlineAsyncWithHttpInfo($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitAndSaveOnlineRequest($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putPresentationSplit'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format ExportFormat (required)
     * @param  string $$destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. (optional, default to )
     * @param  int $$width Slide width. (optional)
     * @param  int $$height Slide height. (optional)
     * @param  int $$from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. (optional)
     * @param  int $$to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitAndSaveOnlineRequest($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling putPresentationSplit');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putPresentationSplit');
        }

        $resourcePath = '/slides/split/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destFolder !== null) {
            $queryParams['destFolder'] = ObjectSerializer::toQueryValue($destFolder);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putPresentationSplit(Requests\PutPresentationSplitRequest $request)
    {
        return $this->splitAndSaveOnline($request->document, $request->format, $request->destFolder, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putPresentationSplitWithHttpInfo(Requests\PutPresentationSplitRequest $request)
    {
        return $this->splitAndSaveOnlineWithHttpInfo($request->document, $request->format, $request->destFolder, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putPresentationSplitAsync(Requests\PutPresentationSplitRequest $request)
    {
        return $this->splitAndSaveOnlineAsync($request->document, $request->format, $request->destFolder, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putPresentationSplitAsyncWithHttpInfo(Requests\PutPresentationSplitRequest $request)
    {
        return $this->splitAndSaveOnlineAsyncWithHttpInfo($request->document, $request->format, $request->destFolder, $request->width, $request->height, $request->from, $request->to, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function updateSection($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSectionWithHttpInfo($name, $sectionIndex, $sectionName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSectionWithHttpInfo($name, $sectionIndex, $sectionName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSectionWithHttpInfo($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->updateSectionRequest($name, $sectionIndex, $sectionName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSectionAsync($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSectionAsyncWithHttpInfo($name, $sectionIndex, $sectionName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSectionAsyncWithHttpInfo($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->updateSectionRequest($name, $sectionIndex, $sectionName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSection'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$sectionIndex The position of the section to be updated. (required)
     * @param  string $$sectionName Section name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSectionRequest($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSection');
        }
        // verify the required parameter 'section_index' is set
        if ($sectionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionIndex when calling putSection');
        }
        // verify the required parameter 'section_name' is set
        if ($sectionName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionName when calling putSection');
        }

        $resourcePath = '/slides/{name}/sections/{sectionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sectionName !== null) {
            $queryParams['sectionName'] = ObjectSerializer::toQueryValue($sectionName);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sectionIndex", $sectionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSection(Requests\PutSectionRequest $request)
    {
        return $this->updateSection($request->name, $request->sectionIndex, $request->sectionName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSectionWithHttpInfo(Requests\PutSectionRequest $request)
    {
        return $this->updateSectionWithHttpInfo($request->name, $request->sectionIndex, $request->sectionName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSectionAsync(Requests\PutSectionRequest $request)
    {
        return $this->updateSectionAsync($request->name, $request->sectionIndex, $request->sectionName, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSectionAsyncWithHttpInfo(Requests\PutSectionRequest $request)
    {
        return $this->updateSectionAsyncWithHttpInfo($request->name, $request->sectionIndex, $request->sectionName, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setSections($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSectionsWithHttpInfo($name, $sections, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSectionsWithHttpInfo($name, $sections, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSectionsWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->setSectionsRequest($name, $sections, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSectionsAsync($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        return $this->setSectionsAsyncWithHttpInfo($name, $sections, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSectionsAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->setSectionsRequest($name, $sections, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSections'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Sections $$sections Sections DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSectionsRequest($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSections');
        }
        // verify the required parameter 'sections' is set
        if ($sections === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sections when calling putSections');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($sections)) {
            array_push($_tempBody, $sections);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSections(Requests\PutSectionsRequest $request)
    {
        return $this->setSections($request->name, $request->sections, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSectionsWithHttpInfo(Requests\PutSectionsRequest $request)
    {
        return $this->setSectionsWithHttpInfo($request->name, $request->sections, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSectionsAsync(Requests\PutSectionsRequest $request)
    {
        return $this->setSectionsAsync($request->name, $request->sections, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSectionsAsyncWithHttpInfo(Requests\PutSectionsRequest $request)
    {
        return $this->setSectionsAsyncWithHttpInfo($request->name, $request->sections, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updatePortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updatePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updatePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updatePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updatePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updatePortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updatePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updatePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updatePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSetParagraphPortionProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSetParagraphPortionProperties');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSetParagraphPortionProperties');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSetParagraphPortionProperties');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling putSetParagraphPortionProperties');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling putSetParagraphPortionProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSetParagraphPortionProperties');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPortionProperties(Requests\PutSetParagraphPortionPropertiesRequest $request)
    {
        return $this->updatePortion($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPortionPropertiesWithHttpInfo(Requests\PutSetParagraphPortionPropertiesRequest $request)
    {
        return $this->updatePortionWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPortionPropertiesAsync(Requests\PutSetParagraphPortionPropertiesRequest $request)
    {
        return $this->updatePortionAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPortionPropertiesAsyncWithHttpInfo(Requests\PutSetParagraphPortionPropertiesRequest $request)
    {
        return $this->updatePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSetParagraphProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSetParagraphProperties');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSetParagraphProperties');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSetParagraphProperties');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling putSetParagraphProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSetParagraphProperties');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSetParagraphProperties(Requests\PutSetParagraphPropertiesRequest $request)
    {
        return $this->updateParagraph($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPropertiesWithHttpInfo(Requests\PutSetParagraphPropertiesRequest $request)
    {
        return $this->updateParagraphWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPropertiesAsync(Requests\PutSetParagraphPropertiesRequest $request)
    {
        return $this->updateParagraphAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetParagraphPropertiesAsyncWithHttpInfo(Requests\PutSetParagraphPropertiesRequest $request)
    {
        return $this->updateParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateSubshapePortion($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSubshapePortionWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSubshapePortionAsync($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSubshapePortionAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSetSubshapeParagraphPortionProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSubshapePortionRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSetSubshapeParagraphPortionProperties');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSetSubshapeParagraphPortionProperties');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling putSetSubshapeParagraphPortionProperties');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSetSubshapeParagraphPortionProperties');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling putSetSubshapeParagraphPortionProperties');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling putSetSubshapeParagraphPortionProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSetSubshapeParagraphPortionProperties');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPortionProperties(Requests\PutSetSubshapeParagraphPortionPropertiesRequest $request)
    {
        return $this->updateSubshapePortion($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPortionPropertiesWithHttpInfo(Requests\PutSetSubshapeParagraphPortionPropertiesRequest $request)
    {
        return $this->updateSubshapePortionWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPortionPropertiesAsync(Requests\PutSetSubshapeParagraphPortionPropertiesRequest $request)
    {
        return $this->updateSubshapePortionAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPortionPropertiesAsyncWithHttpInfo(Requests\PutSetSubshapeParagraphPortionPropertiesRequest $request)
    {
        return $this->updateSubshapePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateSubshapeParagraph($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSubshapeParagraphWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSubshapeParagraphAsync($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSubshapeParagraphAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSetSubshapeParagraphProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSubshapeParagraphRequest($name, $slideIndex, $path, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSetSubshapeParagraphProperties');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSetSubshapeParagraphProperties');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling putSetSubshapeParagraphProperties');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSetSubshapeParagraphProperties');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling putSetSubshapeParagraphProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSetSubshapeParagraphProperties');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphProperties(Requests\PutSetSubshapeParagraphPropertiesRequest $request)
    {
        return $this->updateSubshapeParagraph($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPropertiesWithHttpInfo(Requests\PutSetSubshapeParagraphPropertiesRequest $request)
    {
        return $this->updateSubshapeParagraphWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPropertiesAsync(Requests\PutSetSubshapeParagraphPropertiesRequest $request)
    {
        return $this->updateSubshapeParagraphAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSetSubshapeParagraphPropertiesAsyncWithHttpInfo(Requests\PutSetSubshapeParagraphPropertiesRequest $request)
    {
        return $this->updateSubshapeParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function saveShape($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveShapeAsync($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putShapeSaveAs'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putShapeSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putShapeSaveAs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putShapeSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putShapeSaveAs');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putShapeSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putShapeSaveAs(Requests\PutShapeSaveAsRequest $request)
    {
        $this->saveShape($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putShapeSaveAsWithHttpInfo(Requests\PutShapeSaveAsRequest $request)
    {
        return $this->saveShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putShapeSaveAsAsync(Requests\PutShapeSaveAsRequest $request)
    {
        return $this->saveShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putShapeSaveAsAsyncWithHttpInfo(Requests\PutShapeSaveAsRequest $request)
    {
        return $this->saveShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function setAnimation($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setAnimationWithHttpInfo($name, $slideIndex, $animation, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setAnimationWithHttpInfo($name, $slideIndex, $animation, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setAnimationWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->setAnimationRequest($name, $slideIndex, $animation, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setAnimationAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        return $this->setAnimationAsyncWithHttpInfo($name, $slideIndex, $animation, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setAnimationAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->setAnimationRequest($name, $slideIndex, $animation, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $$animation Animation DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setAnimationRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideAnimation');
        }
        // verify the required parameter 'animation' is set
        if ($animation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $animation when calling putSlideAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($animation)) {
            array_push($_tempBody, $animation);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideAnimation(Requests\PutSlideAnimationRequest $request)
    {
        return $this->setAnimation($request->name, $request->slideIndex, $request->animation, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationWithHttpInfo(Requests\PutSlideAnimationRequest $request)
    {
        return $this->setAnimationWithHttpInfo($request->name, $request->slideIndex, $request->animation, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationAsync(Requests\PutSlideAnimationRequest $request)
    {
        return $this->setAnimationAsync($request->name, $request->slideIndex, $request->animation, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationAsyncWithHttpInfo(Requests\PutSlideAnimationRequest $request)
    {
        return $this->setAnimationAsyncWithHttpInfo($request->name, $request->slideIndex, $request->animation, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateAnimationEffect($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationEffectRequest($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateAnimationEffectAsync($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->updateAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationEffectRequest($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$effectIndex The position of the effect to be modified. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAnimationEffectRequest($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideAnimationEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling putSlideAnimationEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling putSlideAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationEffect(Requests\PutSlideAnimationEffectRequest $request)
    {
        return $this->updateAnimationEffect($request->name, $request->slideIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationEffectWithHttpInfo(Requests\PutSlideAnimationEffectRequest $request)
    {
        return $this->updateAnimationEffectWithHttpInfo($request->name, $request->slideIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationEffectAsync(Requests\PutSlideAnimationEffectRequest $request)
    {
        return $this->updateAnimationEffectAsync($request->name, $request->slideIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationEffectAsyncWithHttpInfo(Requests\PutSlideAnimationEffectRequest $request)
    {
        return $this->updateAnimationEffectAsyncWithHttpInfo($request->name, $request->slideIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateAnimationInteractiveSequenceEffect($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->updateAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex The position of the interactive sequence. (required)
     * @param  int $$effectIndex The position of the effect to be modified. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling putSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling putSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling putSlideAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationInteractiveSequenceEffect(Requests\PutSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->updateAnimationInteractiveSequenceEffect($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationInteractiveSequenceEffectWithHttpInfo(Requests\PutSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->updateAnimationInteractiveSequenceEffectWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationInteractiveSequenceEffectAsync(Requests\PutSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->updateAnimationInteractiveSequenceEffectAsync($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo(Requests\PutSlideAnimationInteractiveSequenceEffectRequest $request)
    {
        return $this->updateAnimationInteractiveSequenceEffectAsyncWithHttpInfo($request->name, $request->slideIndex, $request->sequenceIndex, $request->effectIndex, $request->effect, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setSlideHeaderFooter($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSlideHeaderFooterWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->setSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSlideHeaderFooterAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->setSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $$dto Footer to set. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSlideHeaderFooterRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideHeaderFooter');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideHeaderFooter(Requests\PutSlideHeaderFooterRequest $request)
    {
        return $this->setSlideHeaderFooter($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideHeaderFooterWithHttpInfo(Requests\PutSlideHeaderFooterRequest $request)
    {
        return $this->setSlideHeaderFooterWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideHeaderFooterAsync(Requests\PutSlideHeaderFooterRequest $request)
    {
        return $this->setSlideHeaderFooterAsync($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideHeaderFooterAsyncWithHttpInfo(Requests\PutSlideHeaderFooterRequest $request)
    {
        return $this->setSlideHeaderFooterAsyncWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function saveSlide($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveSlideWithHttpInfo($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveSlideWithHttpInfo($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveSlideWithHttpInfo($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideRequest($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveSlideAsync($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveSlideAsyncWithHttpInfo($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveSlideAsyncWithHttpInfo($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideRequest($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideSaveAs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  string $$outPath Path to upload the output file to. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  int $$width Output file width; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height Output file height; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveSlideRequest($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putSlideSaveAs');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putSlideSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideSaveAs(Requests\PutSlideSaveAsRequest $request)
    {
        $this->saveSlide($request->name, $request->slideIndex, $request->format, $request->outPath, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlideSaveAsWithHttpInfo(Requests\PutSlideSaveAsRequest $request)
    {
        return $this->saveSlideWithHttpInfo($request->name, $request->slideIndex, $request->format, $request->outPath, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlideSaveAsAsync(Requests\PutSlideSaveAsRequest $request)
    {
        return $this->saveSlideAsync($request->name, $request->slideIndex, $request->format, $request->outPath, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlideSaveAsAsyncWithHttpInfo(Requests\PutSlideSaveAsRequest $request)
    {
        return $this->saveSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->format, $request->outPath, $request->options, $request->width, $request->height, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function updateShape($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateShapeWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateShapeRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateShapeAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateShapeRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideShapeInfo'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShapeRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideShapeInfo');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideShapeInfo');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSlideShapeInfo');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlideShapeInfo');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideShapeInfo(Requests\PutSlideShapeInfoRequest $request)
    {
        return $this->updateShape($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideShapeInfoWithHttpInfo(Requests\PutSlideShapeInfoRequest $request)
    {
        return $this->updateShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideShapeInfoAsync(Requests\PutSlideShapeInfoRequest $request)
    {
        return $this->updateShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideShapeInfoAsyncWithHttpInfo(Requests\PutSlideShapeInfoRequest $request)
    {
        return $this->updateShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateSubshape($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSubshapeAsync($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlideSubshapeInfo'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSubshapeRequest($name, $slideIndex, $path, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlideSubshapeInfo');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlideSubshapeInfo');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling putSlideSubshapeInfo');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSlideSubshapeInfo');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlideSubshapeInfo');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlideSubshapeInfo(Requests\PutSlideSubshapeInfoRequest $request)
    {
        return $this->updateSubshape($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideSubshapeInfoWithHttpInfo(Requests\PutSlideSubshapeInfoRequest $request)
    {
        return $this->updateSubshapeWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideSubshapeInfoAsync(Requests\PutSlideSubshapeInfoRequest $request)
    {
        return $this->updateSubshapeAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlideSubshapeInfoAsyncWithHttpInfo(Requests\PutSlideSubshapeInfoRequest $request)
    {
        return $this->updateSubshapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function convertAndSave($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->convertAndSaveWithHttpInfo($document, $format, $outPath, $password, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->convertAndSaveWithHttpInfo($document, $format, $outPath, $password, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function convertAndSaveWithHttpInfo($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->convertAndSaveRequest($document, $format, $outPath, $password, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function convertAndSaveAsync($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null)
    {
        return $this->convertAndSaveAsyncWithHttpInfo($document, $format, $outPath, $password, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function convertAndSaveAsyncWithHttpInfo($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->convertAndSaveRequest($document, $format, $outPath, $password, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesConvert'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format Export format. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertAndSaveRequest($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling putSlidesConvert');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putSlidesConvert');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putSlidesConvert');
        }

        $resourcePath = '/slides/convert/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesConvert(Requests\PutSlidesConvertRequest $request)
    {
        $this->convertAndSave($request->document, $request->format, $request->outPath, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlidesConvertWithHttpInfo(Requests\PutSlidesConvertRequest $request)
    {
        return $this->convertAndSaveWithHttpInfo($request->document, $request->format, $request->outPath, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlidesConvertAsync(Requests\PutSlidesConvertRequest $request)
    {
        return $this->convertAndSaveAsync($request->document, $request->format, $request->outPath, $request->password, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlidesConvertAsyncWithHttpInfo(Requests\PutSlidesConvertRequest $request)
    {
        return $this->convertAndSaveAsyncWithHttpInfo($request->document, $request->format, $request->outPath, $request->password, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function setPresentationHeaderFooter($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setPresentationHeaderFooterWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setPresentationHeaderFooterWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setPresentationHeaderFooterWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->setPresentationHeaderFooterRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setPresentationHeaderFooterAsync($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setPresentationHeaderFooterAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setPresentationHeaderFooterAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->setPresentationHeaderFooterRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $$dto HeaderFooter instance. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setPresentationHeaderFooterRequest($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesHeaderFooter');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlidesHeaderFooter');
        }

        $resourcePath = '/slides/{name}/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesHeaderFooter(Requests\PutSlidesHeaderFooterRequest $request)
    {
        return $this->setPresentationHeaderFooter($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesHeaderFooterWithHttpInfo(Requests\PutSlidesHeaderFooterRequest $request)
    {
        return $this->setPresentationHeaderFooterWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesHeaderFooterAsync(Requests\PutSlidesHeaderFooterRequest $request)
    {
        return $this->setPresentationHeaderFooterAsync($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesHeaderFooterAsyncWithHttpInfo(Requests\PutSlidesHeaderFooterRequest $request)
    {
        return $this->setPresentationHeaderFooterAsyncWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function mergeAndSaveOnline($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null, $storage = null)
    {
        try {
            $this->mergeAndSaveOnlineWithHttpInfo($outPath, $files, $request, $password, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->mergeAndSaveOnlineWithHttpInfo($outPath, $files, $request, $password, $storage);
        } 
    }

    /**
     */
    public function mergeAndSaveOnlineWithHttpInfo($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->mergeAndSaveOnlineRequest($outPath, $files, $request, $password, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeAndSaveOnlineAsync($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null, $storage = null)
    {
        return $this->mergeAndSaveOnlineAsyncWithHttpInfo($outPath, $files, $request, $password, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeAndSaveOnlineAsyncWithHttpInfo($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->mergeAndSaveOnlineRequest($outPath, $files, $request, $password, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesMerge'
     *
     * @param  string $$outPath Path to save result. (required)
     * @param  array $$files Files to merge (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $$request Merge request. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeAndSaveOnlineRequest($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $password = null, $storage = null)
    {
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putSlidesMerge');
        }

        $resourcePath = '/slides/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        if (isset($files)) {
            $_tempBody = array_merge($_tempBody, $files);
        }
        $this->headerSelector->selectHeadersForMultipart($headerParams, ['application/json']);
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesMerge(Requests\PutSlidesMergeRequest $request)
    {
        $this->mergeAndSaveOnline($request->outPath, $request->files, $request->request, $request->password, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesMergeWithHttpInfo(Requests\PutSlidesMergeRequest $request)
    {
        return $this->mergeAndSaveOnlineWithHttpInfo($request->outPath, $request->files, $request->request, $request->password, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesMergeAsync(Requests\PutSlidesMergeRequest $request)
    {
        return $this->mergeAndSaveOnlineAsync($request->outPath, $request->files, $request->request, $request->password, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesMergeAsyncWithHttpInfo(Requests\PutSlidesMergeRequest $request)
    {
        return $this->mergeAndSaveOnlineAsyncWithHttpInfo($request->outPath, $request->files, $request->request, $request->password, $request->storage);
    }
    /**
     */
    public function setProtection($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setProtectionWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setProtectionWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setProtectionWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->setProtectionRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setProtectionAsync($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setProtectionAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setProtectionAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->setProtectionRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesProtectionProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $$dto Protection properties. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProtectionRequest($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesProtectionProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlidesProtectionProperties');
        }

        $resourcePath = '/slides/{name}/protection';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionProperties(Requests\PutSlidesProtectionPropertiesRequest $request)
    {
        return $this->setProtection($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesWithHttpInfo(Requests\PutSlidesProtectionPropertiesRequest $request)
    {
        return $this->setProtectionWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesAsync(Requests\PutSlidesProtectionPropertiesRequest $request)
    {
        return $this->setProtectionAsync($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesAsyncWithHttpInfo(Requests\PutSlidesProtectionPropertiesRequest $request)
    {
        return $this->setProtectionAsyncWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setProtectionOnline($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        try {
            list($response) = $this->setProtectionOnlineWithHttpInfo($document, $dto, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setProtectionOnlineWithHttpInfo($document, $dto, $password);
            return $response;
        } 
    }

    /**
     */
    public function setProtectionOnlineWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setProtectionOnlineRequest($document, $dto, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setProtectionOnlineAsync($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        return $this->setProtectionOnlineAsyncWithHttpInfo($document, $dto, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setProtectionOnlineAsyncWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setProtectionOnlineRequest($document, $dto, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesProtectionPropertiesOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $$dto Protection properties. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProtectionOnlineRequest($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling putSlidesProtectionPropertiesOnline');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlidesProtectionPropertiesOnline');
        }

        $resourcePath = '/slides/protection';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesOnline(Requests\PutSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->setProtectionOnline($request->document, $request->dto, $request->password);
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesOnlineWithHttpInfo(Requests\PutSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->setProtectionOnlineWithHttpInfo($request->document, $request->dto, $request->password);
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesOnlineAsync(Requests\PutSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->setProtectionOnlineAsync($request->document, $request->dto, $request->password);
    }

    /**
     * @deprecated
     */
    public function putSlidesProtectionPropertiesOnlineAsyncWithHttpInfo(Requests\PutSlidesProtectionPropertiesOnlineRequest $request)
    {
        return $this->setProtectionOnlineAsyncWithHttpInfo($request->document, $request->dto, $request->password);
    }
    /**
     */
    public function savePresentation($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->savePresentationWithHttpInfo($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->savePresentationWithHttpInfo($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function savePresentationWithHttpInfo($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->savePresentationRequest($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function savePresentationAsync($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->savePresentationAsyncWithHttpInfo($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function savePresentationAsyncWithHttpInfo($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->savePresentationRequest($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesSaveAs'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$format Export format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function savePresentationRequest($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putSlidesSaveAs');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putSlidesSaveAs');
        }

        $resourcePath = '/slides/{name}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesSaveAs(Requests\PutSlidesSaveAsRequest $request)
    {
        $this->savePresentation($request->name, $request->format, $request->outPath, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlidesSaveAsWithHttpInfo(Requests\PutSlidesSaveAsRequest $request)
    {
        return $this->savePresentationWithHttpInfo($request->name, $request->format, $request->outPath, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlidesSaveAsAsync(Requests\PutSlidesSaveAsRequest $request)
    {
        return $this->savePresentationAsync($request->name, $request->format, $request->outPath, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSlidesSaveAsAsyncWithHttpInfo(Requests\PutSlidesSaveAsRequest $request)
    {
        return $this->savePresentationAsyncWithHttpInfo($request->name, $request->format, $request->outPath, $request->options, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function setDocumentProperty($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setDocumentPropertyWithHttpInfo($name, $propertyName, $property, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setDocumentPropertyWithHttpInfo($name, $propertyName, $property, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setDocumentPropertyWithHttpInfo($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->setDocumentPropertyRequest($name, $propertyName, $property, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setDocumentPropertyAsync($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        return $this->setDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $property, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setDocumentPropertyAsyncWithHttpInfo($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->setDocumentPropertyRequest($name, $propertyName, $property, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesSetDocumentProperty'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$propertyName The property name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $$property Property with the value. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setDocumentPropertyRequest($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesSetDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($propertyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $propertyName when calling putSlidesSetDocumentProperty');
        }
        // verify the required parameter 'property' is set
        if ($property === null) {
            throw new \InvalidArgumentException('Missing the required parameter $property when calling putSlidesSetDocumentProperty');
        }

        $resourcePath = '/slides/{name}/documentproperties/{propertyName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "propertyName", $propertyName);
        $_tempBody = [];
        if (isset($property)) {
            array_push($_tempBody, $property);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesSetDocumentProperty(Requests\PutSlidesSetDocumentPropertyRequest $request)
    {
        return $this->setDocumentProperty($request->name, $request->propertyName, $request->property, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSetDocumentPropertyWithHttpInfo(Requests\PutSlidesSetDocumentPropertyRequest $request)
    {
        return $this->setDocumentPropertyWithHttpInfo($request->name, $request->propertyName, $request->property, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSetDocumentPropertyAsync(Requests\PutSlidesSetDocumentPropertyRequest $request)
    {
        return $this->setDocumentPropertyAsync($request->name, $request->propertyName, $request->property, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSetDocumentPropertyAsyncWithHttpInfo(Requests\PutSlidesSetDocumentPropertyRequest $request)
    {
        return $this->setDocumentPropertyAsyncWithHttpInfo($request->name, $request->propertyName, $request->property, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->updateSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSlideAsyncWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->updateSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Slide $$slideDto Slide update data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlidesSlide');
        }
        // verify the required parameter 'slide_dto' is set
        if ($slideDto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideDto when calling putSlidesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($slideDto)) {
            array_push($_tempBody, $slideDto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesSlide(Requests\PutSlidesSlideRequest $request)
    {
        return $this->updateSlide($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideWithHttpInfo(Requests\PutSlidesSlideRequest $request)
    {
        return $this->updateSlideWithHttpInfo($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideAsync(Requests\PutSlidesSlideRequest $request)
    {
        return $this->updateSlideAsync($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideAsyncWithHttpInfo(Requests\PutSlidesSlideRequest $request)
    {
        return $this->updateSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->slideDto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setBackground($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setBackgroundWithHttpInfo($name, $slideIndex, $background, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setBackgroundWithHttpInfo($name, $slideIndex, $background, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setBackgroundWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundRequest($name, $slideIndex, $background, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setBackgroundAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        return $this->setBackgroundAsyncWithHttpInfo($name, $slideIndex, $background, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setBackgroundAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundRequest($name, $slideIndex, $background, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesSlideBackground'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $$background Slide background update data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBackgroundRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesSlideBackground');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlidesSlideBackground');
        }
        // verify the required parameter 'background' is set
        if ($background === null) {
            throw new \InvalidArgumentException('Missing the required parameter $background when calling putSlidesSlideBackground');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/background';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($background)) {
            array_push($_tempBody, $background);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackground(Requests\PutSlidesSlideBackgroundRequest $request)
    {
        return $this->setBackground($request->name, $request->slideIndex, $request->background, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundWithHttpInfo(Requests\PutSlidesSlideBackgroundRequest $request)
    {
        return $this->setBackgroundWithHttpInfo($request->name, $request->slideIndex, $request->background, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundAsync(Requests\PutSlidesSlideBackgroundRequest $request)
    {
        return $this->setBackgroundAsync($request->name, $request->slideIndex, $request->background, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundAsyncWithHttpInfo(Requests\PutSlidesSlideBackgroundRequest $request)
    {
        return $this->setBackgroundAsyncWithHttpInfo($request->name, $request->slideIndex, $request->background, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setBackgroundColor($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setBackgroundColorWithHttpInfo($name, $slideIndex, $color, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setBackgroundColorWithHttpInfo($name, $slideIndex, $color, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setBackgroundColorWithHttpInfo($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundColorRequest($name, $slideIndex, $color, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setBackgroundColorAsync($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        return $this->setBackgroundColorAsyncWithHttpInfo($name, $slideIndex, $color, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setBackgroundColorAsyncWithHttpInfo($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundColorRequest($name, $slideIndex, $color, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesSlideBackgroundColor'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$color Slide background target color in RRGGBB format. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBackgroundColorRequest($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesSlideBackgroundColor');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSlidesSlideBackgroundColor');
        }
        // verify the required parameter 'color' is set
        if ($color === null) {
            throw new \InvalidArgumentException('Missing the required parameter $color when calling putSlidesSlideBackgroundColor');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/backgroundColor';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($color !== null) {
            $queryParams['color'] = ObjectSerializer::toQueryValue($color);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundColor(Requests\PutSlidesSlideBackgroundColorRequest $request)
    {
        return $this->setBackgroundColor($request->name, $request->slideIndex, $request->color, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundColorWithHttpInfo(Requests\PutSlidesSlideBackgroundColorRequest $request)
    {
        return $this->setBackgroundColorWithHttpInfo($request->name, $request->slideIndex, $request->color, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundColorAsync(Requests\PutSlidesSlideBackgroundColorRequest $request)
    {
        return $this->setBackgroundColorAsync($request->name, $request->slideIndex, $request->color, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideBackgroundColorAsyncWithHttpInfo(Requests\PutSlidesSlideBackgroundColorRequest $request)
    {
        return $this->setBackgroundColorAsyncWithHttpInfo($request->name, $request->slideIndex, $request->color, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setSlideProperties($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSlidePropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSlidePropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSlidePropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->setSlidePropertiesRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSlidePropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setSlidePropertiesAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSlidePropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->setSlidePropertiesRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesSlideProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $$dto The view properties data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSlidePropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesSlideProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlidesSlideProperties');
        }

        $resourcePath = '/slides/{name}/slideProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesSlideProperties(Requests\PutSlidesSlidePropertiesRequest $request)
    {
        return $this->setSlideProperties($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlidePropertiesWithHttpInfo(Requests\PutSlidesSlidePropertiesRequest $request)
    {
        return $this->setSlidePropertiesWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlidePropertiesAsync(Requests\PutSlidesSlidePropertiesRequest $request)
    {
        return $this->setSlidePropertiesAsync($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesSlidePropertiesAsyncWithHttpInfo(Requests\PutSlidesSlidePropertiesRequest $request)
    {
        return $this->setSlidePropertiesAsyncWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function setViewProperties($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setViewPropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setViewPropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setViewPropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->setViewPropertiesRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setViewPropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setViewPropertiesAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setViewPropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->setViewPropertiesRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSlidesViewProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $$dto The view properties data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setViewPropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSlidesViewProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putSlidesViewProperties');
        }

        $resourcePath = '/slides/{name}/viewProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSlidesViewProperties(Requests\PutSlidesViewPropertiesRequest $request)
    {
        return $this->setViewProperties($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesViewPropertiesWithHttpInfo(Requests\PutSlidesViewPropertiesRequest $request)
    {
        return $this->setViewPropertiesWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesViewPropertiesAsync(Requests\PutSlidesViewPropertiesRequest $request)
    {
        return $this->setViewPropertiesAsync($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putSlidesViewPropertiesAsyncWithHttpInfo(Requests\PutSlidesViewPropertiesRequest $request)
    {
        return $this->setViewPropertiesAsyncWithHttpInfo($request->name, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function saveSubshape($name, $slideIndex, $path, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveSubshapeWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveSubshapeAsync($name, $slideIndex, $path, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveSubshapeAsyncWithHttpInfo($name, $slideIndex, $path, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putSubshapeSaveAs'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$path Shape path (for smart art and group shapes). (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveSubshapeRequest($name, $slideIndex, $path, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putSubshapeSaveAs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putSubshapeSaveAs');
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling putSubshapeSaveAs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putSubshapeSaveAs');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling putSubshapeSaveAs');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling putSubshapeSaveAs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{path}/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putSubshapeSaveAs(Requests\PutSubshapeSaveAsRequest $request)
    {
        $this->saveSubshape($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSubshapeSaveAsWithHttpInfo(Requests\PutSubshapeSaveAsRequest $request)
    {
        return $this->saveSubshapeWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSubshapeSaveAsAsync(Requests\PutSubshapeSaveAsRequest $request)
    {
        return $this->saveSubshapeAsync($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }

    /**
     * @deprecated
     */
    public function putSubshapeSaveAsAsyncWithHttpInfo(Requests\PutSubshapeSaveAsRequest $request)
    {
        return $this->saveSubshapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->path, $request->shapeIndex, $request->format, $request->outPath, $request->options, $request->scaleX, $request->scaleY, $request->bounds, $request->password, $request->folder, $request->storage, $request->fontsFolder);
    }
    /**
     */
    public function updateNotesSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateNotesSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->updateNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateNotesSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateNotesSlideAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateNotesSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->updateNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putUpdateNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $$dto A NotesSlide object with notes slide data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotesSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putUpdateNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putUpdateNotesSlide');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putUpdateNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlide(Requests\PutUpdateNotesSlideRequest $request)
    {
        return $this->updateNotesSlide($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideWithHttpInfo(Requests\PutUpdateNotesSlideRequest $request)
    {
        return $this->updateNotesSlideWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideAsync(Requests\PutUpdateNotesSlideRequest $request)
    {
        return $this->updateNotesSlideAsync($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideAsyncWithHttpInfo(Requests\PutUpdateNotesSlideRequest $request)
    {
        return $this->updateNotesSlideAsyncWithHttpInfo($request->name, $request->slideIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateNotesSlideShape($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateNotesSlideShapeWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateNotesSlideShapeAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateNotesSlideShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putUpdateNotesSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotesSlideShapeRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putUpdateNotesSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putUpdateNotesSlideShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putUpdateNotesSlideShape');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putUpdateNotesSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShape(Requests\PutUpdateNotesSlideShapeRequest $request)
    {
        return $this->updateNotesSlideShape($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeWithHttpInfo(Requests\PutUpdateNotesSlideShapeRequest $request)
    {
        return $this->updateNotesSlideShapeWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeAsync(Requests\PutUpdateNotesSlideShapeRequest $request)
    {
        return $this->updateNotesSlideShapeAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeAsyncWithHttpInfo(Requests\PutUpdateNotesSlideShapeRequest $request)
    {
        return $this->updateNotesSlideShapeAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateNotesSlideParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateNotesSlideParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateNotesSlideParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateNotesSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putUpdateNotesSlideShapeParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotesSlideParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putUpdateNotesSlideShapeParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putUpdateNotesSlideShapeParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putUpdateNotesSlideShapeParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling putUpdateNotesSlideShapeParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putUpdateNotesSlideShapeParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeParagraph(Requests\PutUpdateNotesSlideShapeParagraphRequest $request)
    {
        return $this->updateNotesSlideParagraph($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeParagraphWithHttpInfo(Requests\PutUpdateNotesSlideShapeParagraphRequest $request)
    {
        return $this->updateNotesSlideParagraphWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeParagraphAsync(Requests\PutUpdateNotesSlideShapeParagraphRequest $request)
    {
        return $this->updateNotesSlideParagraphAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapeParagraphAsyncWithHttpInfo(Requests\PutUpdateNotesSlideShapeParagraphRequest $request)
    {
        return $this->updateNotesSlideParagraphAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function updateNotesSlidePortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateNotesSlidePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateNotesSlidePortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateNotesSlidePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'putUpdateNotesSlideShapePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotesSlidePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling putUpdateNotesSlideShapePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling putUpdateNotesSlideShapePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling putUpdateNotesSlideShapePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling putUpdateNotesSlideShapePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling putUpdateNotesSlideShapePortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling putUpdateNotesSlideShapePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapePortion(Requests\PutUpdateNotesSlideShapePortionRequest $request)
    {
        return $this->updateNotesSlidePortion($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapePortionWithHttpInfo(Requests\PutUpdateNotesSlideShapePortionRequest $request)
    {
        return $this->updateNotesSlidePortionWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapePortionAsync(Requests\PutUpdateNotesSlideShapePortionRequest $request)
    {
        return $this->updateNotesSlidePortionAsync($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }

    /**
     * @deprecated
     */
    public function putUpdateNotesSlideShapePortionAsyncWithHttpInfo(Requests\PutUpdateNotesSlideShapePortionRequest $request)
    {
        return $this->updateNotesSlidePortionAsyncWithHttpInfo($request->name, $request->slideIndex, $request->shapeIndex, $request->paragraphIndex, $request->portionIndex, $request->dto, $request->password, $request->folder, $request->storage);
    }
    /**
     */
    public function storageExists($storageName = null)
    {
        try {
            list($response) = $this->storageExistsWithHttpInfo($storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->storageExistsWithHttpInfo($storageName);
            return $response;
        } 
    }

    /**
     */
    public function storageExistsWithHttpInfo($storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\StorageExist';
        $httpRequest = $this->storageExistsRequest($storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\StorageExist', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function storageExistsAsync($storageName = null)
    {
        return $this->storageExistsAsyncWithHttpInfo($storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function storageExistsAsyncWithHttpInfo($storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\StorageExist';
        $httpRequest = $this->storageExistsRequest($storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'storageExists'
     *
     * @param  string $$storageName Storage name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storageExistsRequest($storageName = null)
    {
        if (is_a($storageName, '\Aspose\Slides\Cloud\Sdk\Model\Requests\StorageExistsRequest')) {
            $requestObject = $storageName;
            $storageName = $requestObject->storageName;
        }
        // verify the required parameter 'storage_name' is set
        if ($storageName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storageName when calling storageExists');
        }

        $resourcePath = '/slides/storage/{storageName}/exist';
        $queryParams = [];
        $headerParams = [];


        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "storageName", $storageName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function uploadFile($path = null, $file = null, $storageName = null)
    {
        try {
            list($response) = $this->uploadFileWithHttpInfo($path, $file, $storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->uploadFileWithHttpInfo($path, $file, $storageName);
            return $response;
        } 
    }

    /**
     */
    public function uploadFileWithHttpInfo($path = null, $file = null, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesUploadResult';
        $httpRequest = $this->uploadFileRequest($path, $file, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FilesUploadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function uploadFileAsync($path = null, $file = null, $storageName = null)
    {
        return $this->uploadFileAsyncWithHttpInfo($path, $file, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function uploadFileAsyncWithHttpInfo($path = null, $file = null, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesUploadResult';
        $httpRequest = $this->uploadFileRequest($path, $file, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'uploadFile'
     *
     * @param  string $$path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $$file File to upload (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadFileRequest($path = null, $file = null, $storageName = null)
    {
        if (is_a($path, '\Aspose\Slides\Cloud\Sdk\Model\Requests\UploadFileRequest')) {
            $requestObject = $path;
            $path = $requestObject->path;
            $file = $requestObject->file;
            $storageName = $requestObject->storageName;
        }
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling uploadFile');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling uploadFile');
        }

        $resourcePath = '/slides/storage/file/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        if (isset($file)) {
            array_push($_tempBody, $file);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
}
