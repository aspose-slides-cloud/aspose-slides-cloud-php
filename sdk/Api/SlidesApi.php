<?php
/**
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


namespace Aspose\Slides\Cloud\Sdk\Api;

use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7;
use GuzzleHttp\Psr7\Request;

/**
 * Aspose.Slides for Cloud API.
 */
class SlidesApi extends ApiBase
{
    /*
     * Initialize a new instance of SlidesApi
     * @param ClientInterface   $client client for calling api
     * @param Configuration   $config configuration info
     * @param HeaderSelector   $selector class for header selection
     */
    public function __construct(ClientInterface $client = null, Configuration $config = null, HeaderSelector $selector = null)
    {
        parent::__construct($client, $config, $selector);
    }

    /**
     */
    public function alignShapes($name, $slideIndex, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->alignShapesWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->alignShapesWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function alignShapesWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->alignShapesRequest($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function alignShapesAsync($name, $slideIndex, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->alignShapesAsyncWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function alignShapesAsyncWithHttpInfo($name, $slideIndex, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->alignShapesRequest($name, $slideIndex, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'alignShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$alignmentType Alignment type that will be applied to the shapes. (required)
     * @param  bool $$alignToSlide If true, shapes will be aligned relative to the slide edges. (optional, default to false)
     * @param  array $$shapes Shapes indexes. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function alignShapesRequest($name, $slideIndex, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling alignShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling alignShapes');
        }
        // verify the required parameter 'alignment_type' is set
        if ($alignmentType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $alignmentType when calling alignShapes');
        }
        // verify the value of enum parameter 'alignmentType' is valid
        if (!in_array(strtolower($alignmentType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapesAlignmentType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $alignmentType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapesAlignmentType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/align/{alignmentType}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($alignToSlide !== null) {
            $queryParams['alignToSlide'] = ObjectSerializer::toQueryValue($alignToSlide);
        }
        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "alignmentType", $alignmentType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function alignSpecialSlideShapes($name, $slideIndex, $slideType, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->alignSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->alignSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function alignSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->alignSpecialSlideShapesRequest($name, $slideIndex, $slideType, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function alignSpecialSlideShapesAsync($name, $slideIndex, $slideType, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->alignSpecialSlideShapesAsyncWithHttpInfo($name, $slideIndex, $slideType, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function alignSpecialSlideShapesAsyncWithHttpInfo($name, $slideIndex, $slideType, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->alignSpecialSlideShapesRequest($name, $slideIndex, $slideType, $alignmentType, $alignToSlide, $shapes, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'alignSpecialSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  string $$alignmentType Alignment type that will be applied to the shapes. (required)
     * @param  bool $$alignToSlide If true, shapes will be aligned relative to the slide edges. (optional, default to false)
     * @param  array $$shapes Shapes indexes. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function alignSpecialSlideShapesRequest($name, $slideIndex, $slideType, $alignmentType, $alignToSlide = null, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling alignSpecialSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling alignSpecialSlideShapes');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling alignSpecialSlideShapes');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'alignment_type' is set
        if ($alignmentType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $alignmentType when calling alignSpecialSlideShapes');
        }
        // verify the value of enum parameter 'alignmentType' is valid
        if (!in_array(strtolower($alignmentType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapesAlignmentType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $alignmentType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapesAlignmentType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/align/{alignmentType}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($alignToSlide !== null) {
            $queryParams['alignToSlide'] = ObjectSerializer::toQueryValue($alignToSlide);
        }
        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "alignmentType", $alignmentType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function compressEmbeddedFonts($name, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->compressEmbeddedFontsWithHttpInfo($name, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->compressEmbeddedFontsWithHttpInfo($name, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function compressEmbeddedFontsWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->compressEmbeddedFontsRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function compressEmbeddedFontsAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->compressEmbeddedFontsAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function compressEmbeddedFontsAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->compressEmbeddedFontsRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'compressEmbeddedFonts'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function compressEmbeddedFontsRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling compressEmbeddedFonts');
        }

        $resourcePath = '/slides/{name}/fonts/embedded/compress';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function compressEmbeddedFontsOnline($document, $password = null)
    {
        try {
            list($response) = $this->compressEmbeddedFontsOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->compressEmbeddedFontsOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function compressEmbeddedFontsOnlineWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->compressEmbeddedFontsOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function compressEmbeddedFontsOnlineAsync($document, $password = null)
    {
        return $this->compressEmbeddedFontsOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function compressEmbeddedFontsOnlineAsyncWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->compressEmbeddedFontsOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'compressEmbeddedFontsOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function compressEmbeddedFontsOnlineRequest($document, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling compressEmbeddedFontsOnline');
        }

        $resourcePath = '/slides/fonts/embedded/compress';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function convert($document, $format, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        try {
            list($response) = $this->convertWithHttpInfo($document, $format, $password, $storage, $fontsFolder, $slides, $options);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->convertWithHttpInfo($document, $format, $password, $storage, $fontsFolder, $slides, $options);
            return $response;
        } 
    }

    /**
     */
    public function convertWithHttpInfo($document, $format, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->convertRequest($document, $format, $password, $storage, $fontsFolder, $slides, $options);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function convertAsync($document, $format, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        return $this->convertAsyncWithHttpInfo($document, $format, $password, $storage, $fontsFolder, $slides, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function convertAsyncWithHttpInfo($document, $format, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->convertRequest($document, $format, $password, $storage, $fontsFolder, $slides, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'convert'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format Export format. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     * @param  array $$slides The indices of the slides to be converted. If not specified, all slides are converted by default. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertRequest($document, $format, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling convert');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling convert');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/convert/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($slides !== null) {
            $queryParams['slides'] = ObjectSerializer::toQueryValue($slides);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function convertAndSave($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        try {
            $this->convertAndSaveWithHttpInfo($document, $format, $outPath, $password, $storage, $fontsFolder, $slides, $options);
        }
        catch(RepeatRequestException $ex) {
            $this->convertAndSaveWithHttpInfo($document, $format, $outPath, $password, $storage, $fontsFolder, $slides, $options);
        } 
    }

    /**
     */
    public function convertAndSaveWithHttpInfo($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '';
        $httpRequest = $this->convertAndSaveRequest($document, $format, $outPath, $password, $storage, $fontsFolder, $slides, $options);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function convertAndSaveAsync($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        return $this->convertAndSaveAsyncWithHttpInfo($document, $format, $outPath, $password, $storage, $fontsFolder, $slides, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function convertAndSaveAsyncWithHttpInfo($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '';
        $httpRequest = $this->convertAndSaveRequest($document, $format, $outPath, $password, $storage, $fontsFolder, $slides, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'convertAndSave'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format Export format. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     * @param  array $$slides The indices of the slides to be converted. If not specified, all slides are converted by default. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function convertAndSaveRequest($document, $format, $outPath, $password = null, $storage = null, $fontsFolder = null, array $slides = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling convertAndSave');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling convertAndSave');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling convertAndSave');
        }

        $resourcePath = '/slides/convert/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($slides !== null) {
            $queryParams['slides'] = ObjectSerializer::toQueryValue($slides);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function copyFile($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        try {
            $this->copyFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        }
        catch(RepeatRequestException $ex) {
            $this->copyFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        } 
    }

    /**
     */
    public function copyFileWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyFileAsync($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        return $this->copyFileAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyFileAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copyFile'
     *
     * @param  string $$srcPath Source file path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $$destPath Destination file path (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     * @param  string $$versionId File version ID to copy (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyFileRequest($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling copyFile');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling copyFile');
        }

        $resourcePath = '/slides/storage/file/copy/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function copyFolder($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        try {
            $this->copyFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        }
        catch(RepeatRequestException $ex) {
            $this->copyFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        } 
    }

    /**
     */
    public function copyFolderWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyFolderAsync($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        return $this->copyFolderAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyFolderAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->copyFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copyFolder'
     *
     * @param  string $$srcPath Source folder path e.g. &#39;/src&#39; (required)
     * @param  string $$destPath Destination folder path e.g. &#39;/dst&#39; (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyFolderRequest($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling copyFolder');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling copyFolder');
        }

        $resourcePath = '/slides/storage/folder/copy/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function copyLayoutSlide($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->copyLayoutSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->copyLayoutSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function copyLayoutSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->copyLayoutSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyLayoutSlideAsync($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        return $this->copyLayoutSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyLayoutSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->copyLayoutSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copyLayoutSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param  int $$cloneFromPosition Position of cloned layout slide. (required)
     * @param  string $$cloneFromPassword Password for the document to clone layoutSlide from. (optional)
     * @param  string $$cloneFromStorage Storage of the document to clone layoutSlide from. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyLayoutSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling copyLayoutSlide');
        }
        // verify the required parameter 'clone_from' is set
        if ($cloneFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFrom when calling copyLayoutSlide');
        }
        // verify the required parameter 'clone_from_position' is set
        if ($cloneFromPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFromPosition when calling copyLayoutSlide');
        }

        $resourcePath = '/slides/{name}/layoutSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($cloneFrom !== null) {
            $queryParams['cloneFrom'] = ObjectSerializer::toQueryValue($cloneFrom);
        }
        // query params
        if ($cloneFromPosition !== null) {
            $queryParams['cloneFromPosition'] = ObjectSerializer::toQueryValue($cloneFromPosition);
        }
        // query params
        if ($cloneFromStorage !== null) {
            $queryParams['cloneFromStorage'] = ObjectSerializer::toQueryValue($cloneFromStorage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($cloneFromPassword !== null) {
            $headerParams['cloneFromPassword'] = ObjectSerializer::toHeaderValue($cloneFromPassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function copyMasterSlide($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->copyMasterSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->copyMasterSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function copyMasterSlideWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->copyMasterSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copyMasterSlideAsync($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        return $this->copyMasterSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copyMasterSlideAsyncWithHttpInfo($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->copyMasterSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword, $cloneFromStorage, $applyToAll, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copyMasterSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$cloneFrom Name of the document to clone masterSlide from. (required)
     * @param  int $$cloneFromPosition Position of cloned master slide. (required)
     * @param  string $$cloneFromPassword Password for the document to clone masterSlide from. (optional)
     * @param  string $$cloneFromStorage Storage of the document to clone masterSlide from. (optional)
     * @param  bool $$applyToAll True to apply cloned master slide to every existing slide. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyMasterSlideRequest($name, $cloneFrom, $cloneFromPosition, $cloneFromPassword = null, $cloneFromStorage = null, $applyToAll = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling copyMasterSlide');
        }
        // verify the required parameter 'clone_from' is set
        if ($cloneFrom === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFrom when calling copyMasterSlide');
        }
        // verify the required parameter 'clone_from_position' is set
        if ($cloneFromPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cloneFromPosition when calling copyMasterSlide');
        }

        $resourcePath = '/slides/{name}/masterSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($cloneFrom !== null) {
            $queryParams['cloneFrom'] = ObjectSerializer::toQueryValue($cloneFrom);
        }
        // query params
        if ($cloneFromPosition !== null) {
            $queryParams['cloneFromPosition'] = ObjectSerializer::toQueryValue($cloneFromPosition);
        }
        // query params
        if ($cloneFromStorage !== null) {
            $queryParams['cloneFromStorage'] = ObjectSerializer::toQueryValue($cloneFromStorage);
        }
        // query params
        if ($applyToAll !== null) {
            $queryParams['applyToAll'] = ObjectSerializer::toQueryValue($applyToAll);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($cloneFromPassword !== null) {
            $headerParams['cloneFromPassword'] = ObjectSerializer::toHeaderValue($cloneFromPassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function copySlide($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->copySlideWithHttpInfo($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->copySlideWithHttpInfo($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function copySlideWithHttpInfo($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->copySlideRequest($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function copySlideAsync($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        return $this->copySlideAsyncWithHttpInfo($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function copySlideAsyncWithHttpInfo($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->copySlideRequest($name, $slideToCopy, $position, $source, $sourcePassword, $sourceStorage, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'copySlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param  int $$position The target position at which to copy the slide. Copy to the end by default. (optional)
     * @param  string $$source Name of the document to copy a slide from. (optional)
     * @param  string $$sourcePassword Password for the document to copy a slide from. (optional)
     * @param  string $$sourceStorage Template storage name. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copySlideRequest($name, $slideToCopy, $position = null, $source = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling copySlide');
        }
        // verify the required parameter 'slide_to_copy' is set
        if ($slideToCopy === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideToCopy when calling copySlide');
        }

        $resourcePath = '/slides/{name}/slides/copy';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($slideToCopy !== null) {
            $queryParams['slideToCopy'] = ObjectSerializer::toQueryValue($slideToCopy);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($source !== null) {
            $queryParams['source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($sourceStorage !== null) {
            $queryParams['sourceStorage'] = ObjectSerializer::toQueryValue($sourceStorage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($sourcePassword !== null) {
            $headerParams['sourcePassword'] = ObjectSerializer::toHeaderValue($sourcePassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createAnimationEffect($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createAnimationEffectWithHttpInfo($name, $slideIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createAnimationEffectWithHttpInfo($name, $slideIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createAnimationEffectWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationEffectRequest($name, $slideIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createAnimationEffectAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->createAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createAnimationEffectAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationEffectRequest($name, $slideIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnimationEffectRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createAnimationEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling createAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createAnimationInteractiveSequence($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequence, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequence, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceRequest($name, $slideIndex, $sequence, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createAnimationInteractiveSequenceAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        return $this->createAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $sequence, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceRequest($name, $slideIndex, $sequence, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createAnimationInteractiveSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $$sequence Animation sequence DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnimationInteractiveSequenceRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createAnimationInteractiveSequence');
        }
        // verify the required parameter 'sequence' is set
        if ($sequence === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequence when calling createAnimationInteractiveSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($sequence)) {
            array_push($_tempBody, $sequence);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createAnimationInteractiveSequenceEffect($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->createAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex The position of the interactive sequence. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling createAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling createAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createChartCategory($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartCategoryRequest($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createChartCategoryAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        return $this->createChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartCategoryRequest($name, $slideIndex, $shapeIndex, $category, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createChartCategory'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $$category Category DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChartCategoryRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createChartCategory');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createChartCategory');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createChartCategory');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling createChartCategory');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($category)) {
            array_push($_tempBody, $category);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createChartDataPoint($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createChartDataPointAsync($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        return $this->createChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $dataPoint, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createChartDataPoint'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DataPoint $$dataPoint Data point DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createChartDataPoint');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createChartDataPoint');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createChartDataPoint');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling createChartDataPoint');
        }
        // verify the required parameter 'data_point' is set
        if ($dataPoint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dataPoint when calling createChartDataPoint');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $_tempBody = [];
        if (isset($dataPoint)) {
            array_push($_tempBody, $dataPoint);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createChartSeries($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartSeriesRequest($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createChartSeriesAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        return $this->createChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->createChartSeriesRequest($name, $slideIndex, $shapeIndex, $series, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createChartSeries'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Series $$series Series DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChartSeriesRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createChartSeries');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createChartSeries');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createChartSeries');
        }
        // verify the required parameter 'series' is set
        if ($series === null) {
            throw new \InvalidArgumentException('Missing the required parameter $series when calling createChartSeries');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($series)) {
            array_push($_tempBody, $series);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createComment($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createCommentWithHttpInfo($name, $slideIndex, $dto, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createCommentWithHttpInfo($name, $slideIndex, $dto, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createCommentWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->createCommentRequest($name, $slideIndex, $dto, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideComments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createCommentAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createCommentAsyncWithHttpInfo($name, $slideIndex, $dto, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createCommentAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->createCommentRequest($name, $slideIndex, $dto, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createComment'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $$dto Comment DTO. (required)
     * @param  int $$shapeIndex Shape index. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCommentRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createComment');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createComment');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createComment');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/comments';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeIndex !== null) {
            $queryParams['shapeIndex'] = ObjectSerializer::toQueryValue($shapeIndex);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createCommentOnline($document, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null)
    {
        try {
            list($response) = $this->createCommentOnlineWithHttpInfo($document, $slideIndex, $dto, $shapeIndex, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createCommentOnlineWithHttpInfo($document, $slideIndex, $dto, $shapeIndex, $password);
            return $response;
        } 
    }

    /**
     */
    public function createCommentOnlineWithHttpInfo($document, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createCommentOnlineRequest($document, $slideIndex, $dto, $shapeIndex, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createCommentOnlineAsync($document, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null)
    {
        return $this->createCommentOnlineAsyncWithHttpInfo($document, $slideIndex, $dto, $shapeIndex, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createCommentOnlineAsyncWithHttpInfo($document, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createCommentOnlineRequest($document, $slideIndex, $dto, $shapeIndex, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createCommentOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $$dto Comment DTO. (required)
     * @param  int $$shapeIndex Shape index. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCommentOnlineRequest($document, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase $dto, $shapeIndex = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling createCommentOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createCommentOnline');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createCommentOnline');
        }

        $resourcePath = '/slides/slides/{slideIndex}/comments';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeIndex !== null) {
            $queryParams['shapeIndex'] = ObjectSerializer::toQueryValue($shapeIndex);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createFolder($path, $storageName = null)
    {
        try {
            $this->createFolderWithHttpInfo($path, $storageName);
        }
        catch(RepeatRequestException $ex) {
            $this->createFolderWithHttpInfo($path, $storageName);
        } 
    }

    /**
     */
    public function createFolderWithHttpInfo($path, $storageName = null)
    {
        $returnType = '';
        $httpRequest = $this->createFolderRequest($path, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createFolderAsync($path, $storageName = null)
    {
        return $this->createFolderAsyncWithHttpInfo($path, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createFolderAsyncWithHttpInfo($path, $storageName = null)
    {
        $returnType = '';
        $httpRequest = $this->createFolderRequest($path, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createFolder'
     *
     * @param  string $$path Folder path to create e.g. &#39;folder_1/folder_2/&#39; (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createFolderRequest($path, $storageName = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling createFolder');
        }

        $resourcePath = '/slides/storage/folder/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function createImageWatermark($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->createImageWatermarkWithHttpInfo($name, $image, $pictureFrame, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->createImageWatermarkWithHttpInfo($name, $image, $pictureFrame, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function createImageWatermarkWithHttpInfo($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createImageWatermarkRequest($name, $image, $pictureFrame, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createImageWatermarkAsync($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createImageWatermarkAsyncWithHttpInfo($name, $image, $pictureFrame, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createImageWatermarkAsyncWithHttpInfo($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createImageWatermarkRequest($name, $image, $pictureFrame, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createImageWatermark'
     *
     * @param  string $$name Document name. (required)
     * @param  \SplFileObject $$image Image data. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $$pictureFrame PictureFrame DTO (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createImageWatermarkRequest($name, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createImageWatermark');
        }

        $resourcePath = '/slides/{name}/watermark/image';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($pictureFrame)) {
            array_push($_tempBody, $pictureFrame);
        }
        if (isset($image)) {
            array_push($_tempBody, $image);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createImageWatermarkOnline($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        try {
            list($response) = $this->createImageWatermarkOnlineWithHttpInfo($document, $image, $pictureFrame, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createImageWatermarkOnlineWithHttpInfo($document, $image, $pictureFrame, $password);
            return $response;
        } 
    }

    /**
     */
    public function createImageWatermarkOnlineWithHttpInfo($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createImageWatermarkOnlineRequest($document, $image, $pictureFrame, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createImageWatermarkOnlineAsync($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        return $this->createImageWatermarkOnlineAsyncWithHttpInfo($document, $image, $pictureFrame, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createImageWatermarkOnlineAsyncWithHttpInfo($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createImageWatermarkOnlineRequest($document, $image, $pictureFrame, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createImageWatermarkOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \SplFileObject $$image Image data. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $$pictureFrame PictureFrame DTO. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createImageWatermarkOnlineRequest($document, $image = null, \Aspose\Slides\Cloud\Sdk\Model\PictureFrame $pictureFrame = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling createImageWatermarkOnline');
        }

        $resourcePath = '/slides/watermark/image';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($pictureFrame)) {
            array_push($_tempBody, $pictureFrame);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        if (isset($image)) {
            array_push($_tempBody, $image);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createNotesSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createNotesSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->createNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createNotesSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->createNotesSlideAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createNotesSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->createNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $$dto A NotesSlide object with notes slide data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createNotesSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createNotesSlide');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createParagraph($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->createParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function createParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createParagraphRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createParagraphAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->createParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createParagraphRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  int $$position Position of the new paragraph in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createParagraphRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createPortion($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->createPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function createPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->createPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  int $$position Position of the new portion in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling createPortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createPresentation($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPresentationWithHttpInfo($name, $data, $inputPassword, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPresentationWithHttpInfo($name, $data, $inputPassword, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPresentationWithHttpInfo($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationRequest($name, $data, $inputPassword, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPresentationAsync($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPresentationAsyncWithHttpInfo($name, $data, $inputPassword, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPresentationAsyncWithHttpInfo($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationRequest($name, $data, $inputPassword, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createPresentation'
     *
     * @param  string $$name Document name. (required)
     * @param  \SplFileObject $$data Source presentation binary data. (optional)
     * @param  string $$inputPassword The password for source presentation. (optional)
     * @param  string $$password The document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPresentationRequest($name, $data = null, $inputPassword = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createPresentation');
        }

        $resourcePath = '/slides/{name}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($inputPassword !== null) {
            $headerParams['inputPassword'] = ObjectSerializer::toHeaderValue($inputPassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($data)) {
            array_push($_tempBody, $data);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createPresentationFromSource($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPresentationFromSourceWithHttpInfo($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPresentationFromSourceWithHttpInfo($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPresentationFromSourceWithHttpInfo($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromSourceRequest($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPresentationFromSourceAsync($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPresentationFromSourceAsyncWithHttpInfo($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPresentationFromSourceAsyncWithHttpInfo($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromSourceRequest($name, $sourcePath, $sourcePassword, $sourceStorage, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createPresentationFromSource'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$sourcePath Source file path. (optional)
     * @param  string $$sourcePassword Source file password. (optional)
     * @param  string $$sourceStorage Source storage name. (optional)
     * @param  string $$password The document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPresentationFromSourceRequest($name, $sourcePath = null, $sourcePassword = null, $sourceStorage = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createPresentationFromSource');
        }

        $resourcePath = '/slides/{name}/fromSource';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sourcePath !== null) {
            $queryParams['sourcePath'] = ObjectSerializer::toQueryValue($sourcePath);
        }
        // query params
        if ($sourceStorage !== null) {
            $queryParams['sourceStorage'] = ObjectSerializer::toQueryValue($sourceStorage);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($sourcePassword !== null) {
            $headerParams['sourcePassword'] = ObjectSerializer::toHeaderValue($sourcePassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createPresentationFromTemplate($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createPresentationFromTemplateWithHttpInfo($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createPresentationFromTemplateWithHttpInfo($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createPresentationFromTemplateWithHttpInfo($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromTemplateRequest($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createPresentationFromTemplateAsync($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createPresentationFromTemplateAsyncWithHttpInfo($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createPresentationFromTemplateAsyncWithHttpInfo($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->createPresentationFromTemplateRequest($name, $templatePath, $data, $templatePassword, $templateStorage, $isImageDataEmbedded, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createPresentationFromTemplate'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$templatePath Template file path. (required)
     * @param  string $$data Document input data. (optional)
     * @param  string $$templatePassword Template file password. (optional)
     * @param  string $$templateStorage Template storage name. (optional)
     * @param  bool $$isImageDataEmbedded True if image data is embedded. (optional, default to false)
     * @param  string $$password The document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createPresentationFromTemplateRequest($name, $templatePath, $data = null, $templatePassword = null, $templateStorage = null, $isImageDataEmbedded = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createPresentationFromTemplate');
        }
        // verify the required parameter 'template_path' is set
        if ($templatePath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $templatePath when calling createPresentationFromTemplate');
        }

        $resourcePath = '/slides/{name}/fromTemplate';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($templatePath !== null) {
            $queryParams['templatePath'] = ObjectSerializer::toQueryValue($templatePath);
        }
        // query params
        if ($templateStorage !== null) {
            $queryParams['templateStorage'] = ObjectSerializer::toQueryValue($templateStorage);
        }
        // query params
        if ($isImageDataEmbedded !== null) {
            $queryParams['isImageDataEmbedded'] = ObjectSerializer::toQueryValue($isImageDataEmbedded);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($templatePassword !== null) {
            $headerParams['templatePassword'] = ObjectSerializer::toHeaderValue($templatePassword);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($data)) {
            array_push($_tempBody, $data);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSection($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSectionWithHttpInfo($name, $sectionName, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSectionWithHttpInfo($name, $sectionName, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSectionWithHttpInfo($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->createSectionRequest($name, $sectionName, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSectionAsync($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->createSectionAsyncWithHttpInfo($name, $sectionName, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSectionAsyncWithHttpInfo($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->createSectionRequest($name, $sectionName, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSection'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$sectionName Section name. (required)
     * @param  int $$slideIndex Slide index (one-based). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSectionRequest($name, $sectionName, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSection');
        }
        // verify the required parameter 'section_name' is set
        if ($sectionName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionName when calling createSection');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSection');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sectionName !== null) {
            $queryParams['sectionName'] = ObjectSerializer::toQueryValue($sectionName);
        }
        // query params
        if ($slideIndex !== null) {
            $queryParams['slideIndex'] = ObjectSerializer::toQueryValue($slideIndex);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createShape($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->createShapeWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createShapeWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function createShapeWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createShapeRequest($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createShapeAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->createShapeAsyncWithHttpInfo($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createShapeAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createShapeRequest($name, $slideIndex, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (optional)
     * @param  int $$shapeToClone Optional index for clone shape instead of adding a new one. (optional)
     * @param  int $$position Position of the new shape in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createShapeRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeToClone !== null) {
            $queryParams['shapeToClone'] = ObjectSerializer::toQueryValue($shapeToClone);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSlide($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSlideWithHttpInfo($name, $layoutAlias, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSlideWithHttpInfo($name, $layoutAlias, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSlideWithHttpInfo($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->createSlideRequest($name, $layoutAlias, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSlideAsync($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createSlideAsyncWithHttpInfo($name, $layoutAlias, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSlideAsyncWithHttpInfo($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->createSlideRequest($name, $layoutAlias, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index (optional)
     * @param  int $$position The target position at which to create the slide. Add to the end by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSlideRequest($name, $layoutAlias = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSlide');
        }

        $resourcePath = '/slides/{name}/slides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($layoutAlias !== null) {
            $queryParams['layoutAlias'] = ObjectSerializer::toQueryValue($layoutAlias);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSmartArtNode($name, $slideIndex, $smartArtIndex, $subNode = null, $text = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSmartArtNodeWithHttpInfo($name, $slideIndex, $smartArtIndex, $subNode, $text, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSmartArtNodeWithHttpInfo($name, $slideIndex, $smartArtIndex, $subNode, $text, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSmartArtNodeWithHttpInfo($name, $slideIndex, $smartArtIndex, $subNode = null, $text = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SmartArt';
        $httpRequest = $this->createSmartArtNodeRequest($name, $slideIndex, $smartArtIndex, $subNode, $text, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SmartArt', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSmartArtNodeAsync($name, $slideIndex, $smartArtIndex, $subNode = null, $text = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createSmartArtNodeAsyncWithHttpInfo($name, $slideIndex, $smartArtIndex, $subNode, $text, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSmartArtNodeAsyncWithHttpInfo($name, $slideIndex, $smartArtIndex, $subNode = null, $text = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SmartArt';
        $httpRequest = $this->createSmartArtNodeRequest($name, $slideIndex, $smartArtIndex, $subNode, $text, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSmartArtNode'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param  string $$subNode Sub-node path (e.g. \&quot;3\&quot;, \&quot;3/nodes/2). (optional)
     * @param  string $$text Node text. (optional)
     * @param  int $$position Position to insert a new node. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSmartArtNodeRequest($name, $slideIndex, $smartArtIndex, $subNode = null, $text = null, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSmartArtNode');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSmartArtNode');
        }
        // verify the required parameter 'smart_art_index' is set
        if ($smartArtIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smartArtIndex when calling createSmartArtNode');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/smartArts/{smartArtIndex}/nodes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($subNode !== null) {
            $queryParams['subNode'] = ObjectSerializer::toQueryValue($subNode);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "smartArtIndex", $smartArtIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSpecialSlideAnimationEffect($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSpecialSlideAnimationEffectAsync($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->createSpecialSlideAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSpecialSlideAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSpecialSlideAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling createSpecialSlideAnimationEffect');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling createSpecialSlideAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSpecialSlideAnimationInteractiveSequence($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSpecialSlideAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $slideType, $sequence, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSpecialSlideAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $slideType, $sequence, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createSpecialSlideAnimationInteractiveSequenceRequest($name, $slideIndex, $slideType, $sequence, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceAsync($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        return $this->createSpecialSlideAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequence, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createSpecialSlideAnimationInteractiveSequenceRequest($name, $slideIndex, $slideType, $sequence, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSpecialSlideAnimationInteractiveSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $$sequence Animation sequence DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSpecialSlideAnimationInteractiveSequenceRequest($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence $sequence, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSpecialSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSpecialSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling createSpecialSlideAnimationInteractiveSequence');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'sequence' is set
        if ($sequence === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequence when calling createSpecialSlideAnimationInteractiveSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        if (isset($sequence)) {
            array_push($_tempBody, $sequence);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceEffect($name, $slideIndex, $slideType, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $slideType, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->createSpecialSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSpecialSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->createSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSpecialSlideAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$sequenceIndex The position of the interactive sequence. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling createSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling createSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling createSpecialSlideAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSpecialSlideParagraph($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->createSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function createSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSpecialSlideParagraphAsync($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->createSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $dto, $position, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSpecialSlideParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  int $$position Position of the new paragraph in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling createSpecialSlideParagraph');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createSpecialSlideParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createSpecialSlideParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSpecialSlidePortion($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->createSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function createSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSpecialSlidePortionAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->createSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $position, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSpecialSlidePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  int $$position Position of the new portion in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSpecialSlidePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSpecialSlidePortion');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling createSpecialSlidePortion');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createSpecialSlidePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling createSpecialSlidePortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createSpecialSlidePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createSpecialSlideShape($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->createSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function createSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createSpecialSlideShapeRequest($name, $slideIndex, $slideType, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createSpecialSlideShapeAsync($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->createSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->createSpecialSlideShapeRequest($name, $slideIndex, $slideType, $dto, $shapeToClone, $position, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createSpecialSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (optional)
     * @param  int $$shapeToClone Optional index for clone shape instead of adding a new one. (optional)
     * @param  int $$position Position of the new shape in the list. Default is at the end of the list. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSpecialSlideShapeRequest($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto = null, $shapeToClone = null, $position = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createSpecialSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createSpecialSlideShape');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling createSpecialSlideShape');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeToClone !== null) {
            $queryParams['shapeToClone'] = ObjectSerializer::toQueryValue($shapeToClone);
        }
        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createTableCellParagraph($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createTableCellParagraphAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->createTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->createTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createTableCellParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createTableCellParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createTableCellParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createTableCellParagraph');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling createTableCellParagraph');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling createTableCellParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createTableCellParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createTableCellPortion($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createTableCellPortionAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->createTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->createTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createTableCellPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createTableCellPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createTableCellPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createTableCellPortion');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling createTableCellPortion');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling createTableCellPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling createTableCellPortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createTableCellPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createTableRow($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->createTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function createTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TableRow';
        $httpRequest = $this->createTableRowRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TableRow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createTableRowAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createTableRowAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createTableRowAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TableRow';
        $httpRequest = $this->createTableRowRequest($name, $slideIndex, $shapeIndex, $dto, $position, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createTableRow'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\TableRow $$dto Table row data. (required)
     * @param  int $$position Position. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTableRowRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $position = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createTableRow');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling createTableRow');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling createTableRow');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling createTableRow');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($position !== null) {
            $queryParams['position'] = ObjectSerializer::toQueryValue($position);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createWatermark($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->createWatermarkWithHttpInfo($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->createWatermarkWithHttpInfo($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function createWatermarkWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createWatermarkRequest($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createWatermarkAsync($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        return $this->createWatermarkAsyncWithHttpInfo($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createWatermarkAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->createWatermarkRequest($name, $shape, $fontHeight, $text, $fontName, $fontColor, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createWatermark'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Shape $$shape Shape DTO (optional)
     * @param  float $$fontHeight Watermark font height. (optional)
     * @param  string $$text Watermark text. (optional)
     * @param  string $$fontName Watermark font name. (optional)
     * @param  string $$fontColor Watermark font color. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWatermarkRequest($name, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling createWatermark');
        }

        $resourcePath = '/slides/{name}/watermark';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($fontHeight !== null) {
            $queryParams['fontHeight'] = ObjectSerializer::toQueryValue($fontHeight);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($fontName !== null) {
            $queryParams['fontName'] = ObjectSerializer::toQueryValue($fontName);
        }
        // query params
        if ($fontColor !== null) {
            $queryParams['fontColor'] = ObjectSerializer::toQueryValue($fontColor);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($shape)) {
            array_push($_tempBody, $shape);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function createWatermarkOnline($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        try {
            list($response) = $this->createWatermarkOnlineWithHttpInfo($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->createWatermarkOnlineWithHttpInfo($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);
            return $response;
        } 
    }

    /**
     */
    public function createWatermarkOnlineWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createWatermarkOnlineRequest($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function createWatermarkOnlineAsync($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        return $this->createWatermarkOnlineAsyncWithHttpInfo($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function createWatermarkOnlineAsyncWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->createWatermarkOnlineRequest($document, $shape, $fontHeight, $text, $fontName, $fontColor, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'createWatermarkOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Shape $$shape Shape DTO (optional)
     * @param  float $$fontHeight Watermark font height. (optional)
     * @param  string $$text Watermark text. (optional)
     * @param  string $$fontName Watermark font name. (optional)
     * @param  string $$fontColor Watermark font color. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWatermarkOnlineRequest($document, \Aspose\Slides\Cloud\Sdk\Model\Shape $shape = null, $fontHeight = null, $text = null, $fontName = null, $fontColor = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling createWatermarkOnline');
        }

        $resourcePath = '/slides/watermark';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($fontHeight !== null) {
            $queryParams['fontHeight'] = ObjectSerializer::toQueryValue($fontHeight);
        }
        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($fontName !== null) {
            $queryParams['fontName'] = ObjectSerializer::toQueryValue($fontName);
        }
        // query params
        if ($fontColor !== null) {
            $queryParams['fontColor'] = ObjectSerializer::toQueryValue($fontColor);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($shape)) {
            array_push($_tempBody, $shape);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteAnimation($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteAnimationEffect($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationEffectRequest($name, $slideIndex, $effectIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationEffectAsync($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationEffectRequest($name, $slideIndex, $effectIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$effectIndex Index of the effect to be removed. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationEffectRequest($name, $slideIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteAnimationEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling deleteAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteAnimationInteractiveSequence($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceRequest($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceAsync($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceRequest($name, $slideIndex, $sequenceIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteAnimationInteractiveSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationInteractiveSequenceRequest($name, $slideIndex, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteAnimationInteractiveSequence');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling deleteAnimationInteractiveSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteAnimationInteractiveSequenceEffect($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex Interactive sequence index. (required)
     * @param  int $$effectIndex Index of the effect to be removed. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling deleteAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling deleteAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteAnimationInteractiveSequences($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequencesRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationInteractiveSequencesAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationInteractiveSequencesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationInteractiveSequencesAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationInteractiveSequencesRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteAnimationInteractiveSequences'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationInteractiveSequencesRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAnimationInteractiveSequences');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteAnimationInteractiveSequences');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteAnimationMainSequence($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteAnimationMainSequenceWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteAnimationMainSequenceWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteAnimationMainSequenceWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationMainSequenceRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteAnimationMainSequenceAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteAnimationMainSequenceAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteAnimationMainSequenceAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteAnimationMainSequenceRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteAnimationMainSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAnimationMainSequenceRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteAnimationMainSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteAnimationMainSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteBackground($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteBackgroundWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->deleteBackgroundRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteBackgroundAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteBackgroundAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteBackgroundAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->deleteBackgroundRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteBackground'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteBackgroundRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteBackground');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteBackground');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/background';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteChartCategory($name, $slideIndex, $shapeIndex, $categoryIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteChartCategoryAsync($name, $slideIndex, $shapeIndex, $categoryIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteChartCategory'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$categoryIndex Category index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteChartCategory');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteChartCategory');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteChartCategory');
        }
        // verify the required parameter 'category_index' is set
        if ($categoryIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $categoryIndex when calling deleteChartCategory');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "categoryIndex", $categoryIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteChartDataPoint($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteChartDataPointAsync($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteChartDataPoint'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  int $$pointIndex Data point index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteChartDataPoint');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteChartDataPoint');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteChartDataPoint');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling deleteChartDataPoint');
        }
        // verify the required parameter 'point_index' is set
        if ($pointIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pointIndex when calling deleteChartDataPoint');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "pointIndex", $pointIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteChartSeries($name, $slideIndex, $shapeIndex, $seriesIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteChartSeriesAsync($name, $slideIndex, $shapeIndex, $seriesIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->deleteChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteChartSeries'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteChartSeries');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteChartSeries');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteChartSeries');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling deleteChartSeries');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteComments($name, $author = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->deleteCommentsWithHttpInfo($name, $author, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteCommentsWithHttpInfo($name, $author, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function deleteCommentsWithHttpInfo($name, $author = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteCommentsRequest($name, $author, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteCommentsAsync($name, $author = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteCommentsAsyncWithHttpInfo($name, $author, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteCommentsAsyncWithHttpInfo($name, $author = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteCommentsRequest($name, $author, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteComments'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$author Author of comments. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCommentsRequest($name, $author = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteComments');
        }

        $resourcePath = '/slides/{name}/comments';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteCommentsOnline($document, $author = null, $password = null)
    {
        try {
            list($response) = $this->deleteCommentsOnlineWithHttpInfo($document, $author, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteCommentsOnlineWithHttpInfo($document, $author, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteCommentsOnlineWithHttpInfo($document, $author = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteCommentsOnlineRequest($document, $author, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteCommentsOnlineAsync($document, $author = null, $password = null)
    {
        return $this->deleteCommentsOnlineAsyncWithHttpInfo($document, $author, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteCommentsOnlineAsyncWithHttpInfo($document, $author = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteCommentsOnlineRequest($document, $author, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteCommentsOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$author Author of comments. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCommentsOnlineRequest($document, $author = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteCommentsOnline');
        }

        $resourcePath = '/slides/comments/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteDocumentProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteDocumentPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteDocumentPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteDocumentPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteDocumentPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteDocumentProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDocumentPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteDocumentProperties');
        }

        $resourcePath = '/slides/{name}/documentproperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteDocumentProperty($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteDocumentPropertyWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteDocumentPropertyAsync($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->deleteDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteDocumentProperty'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$propertyName The property name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteDocumentPropertyRequest($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($propertyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $propertyName when calling deleteDocumentProperty');
        }

        $resourcePath = '/slides/{name}/documentproperties/{propertyName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "propertyName", $propertyName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteEmbeddedFont($name, $fontName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteEmbeddedFontWithHttpInfo($name, $fontName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteEmbeddedFontWithHttpInfo($name, $fontName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteEmbeddedFontWithHttpInfo($name, $fontName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->deleteEmbeddedFontRequest($name, $fontName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteEmbeddedFontAsync($name, $fontName, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteEmbeddedFontAsyncWithHttpInfo($name, $fontName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteEmbeddedFontAsyncWithHttpInfo($name, $fontName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->deleteEmbeddedFontRequest($name, $fontName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteEmbeddedFont'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$fontName Font name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmbeddedFontRequest($name, $fontName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteEmbeddedFont');
        }
        // verify the required parameter 'font_name' is set
        if ($fontName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fontName when calling deleteEmbeddedFont');
        }

        $resourcePath = '/slides/{name}/fonts/embedded/{fontName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "fontName", $fontName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteEmbeddedFontOnline($document, $fontName, $password = null)
    {
        try {
            list($response) = $this->deleteEmbeddedFontOnlineWithHttpInfo($document, $fontName, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteEmbeddedFontOnlineWithHttpInfo($document, $fontName, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteEmbeddedFontOnlineWithHttpInfo($document, $fontName, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteEmbeddedFontOnlineRequest($document, $fontName, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteEmbeddedFontOnlineAsync($document, $fontName, $password = null)
    {
        return $this->deleteEmbeddedFontOnlineAsyncWithHttpInfo($document, $fontName, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteEmbeddedFontOnlineAsyncWithHttpInfo($document, $fontName, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteEmbeddedFontOnlineRequest($document, $fontName, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteEmbeddedFontOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$fontName Font name. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEmbeddedFontOnlineRequest($document, $fontName, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteEmbeddedFontOnline');
        }
        // verify the required parameter 'font_name' is set
        if ($fontName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fontName when calling deleteEmbeddedFontOnline');
        }

        $resourcePath = '/slides/fonts/embedded/{fontName}/delete';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "fontName", $fontName);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteFile($path, $storageName = null, $versionId = null)
    {
        try {
            $this->deleteFileWithHttpInfo($path, $storageName, $versionId);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteFileWithHttpInfo($path, $storageName, $versionId);
        } 
    }

    /**
     */
    public function deleteFileWithHttpInfo($path, $storageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFileRequest($path, $storageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteFileAsync($path, $storageName = null, $versionId = null)
    {
        return $this->deleteFileAsyncWithHttpInfo($path, $storageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteFileAsyncWithHttpInfo($path, $storageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFileRequest($path, $storageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteFile'
     *
     * @param  string $$path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  string $$versionId File version ID to delete (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFileRequest($path, $storageName = null, $versionId = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteFile');
        }

        $resourcePath = '/slides/storage/file/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteFolder($path, $storageName = null, $recursive = null)
    {
        try {
            $this->deleteFolderWithHttpInfo($path, $storageName, $recursive);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteFolderWithHttpInfo($path, $storageName, $recursive);
        } 
    }

    /**
     */
    public function deleteFolderWithHttpInfo($path, $storageName = null, $recursive = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFolderRequest($path, $storageName, $recursive);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteFolderAsync($path, $storageName = null, $recursive = null)
    {
        return $this->deleteFolderAsyncWithHttpInfo($path, $storageName, $recursive)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteFolderAsyncWithHttpInfo($path, $storageName = null, $recursive = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteFolderRequest($path, $storageName, $recursive);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteFolder'
     *
     * @param  string $$path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  bool $$recursive Enable to delete folders, subfolders and files (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteFolderRequest($path, $storageName = null, $recursive = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling deleteFolder');
        }

        $resourcePath = '/slides/storage/folder/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($recursive !== null) {
            $queryParams['recursive'] = ObjectSerializer::toQueryValue($recursive);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteNotesSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteNotesSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->deleteNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteNotesSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteNotesSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteNotesSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->deleteNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteNotesSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteParagraphs($name, $slideIndex, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphsRequest($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteParagraphsAsync($name, $slideIndex, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteParagraphsRequest($name, $slideIndex, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  array $$paragraphs The indices of the paragraphs to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteParagraphsRequest($name, $slideIndex, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($paragraphs !== null) {
            $queryParams['paragraphs'] = ObjectSerializer::toQueryValue($paragraphs);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deletePortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deletePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deletePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deletePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deletePortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deletePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deletePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deletePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deletePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deletePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deletePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deletePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling deletePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deletePortions($name, $slideIndex, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deletePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deletePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deletePortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deletePortionsAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deletePortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deletePortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deletePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deletePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  array $$portions The indices of the portions to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deletePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deletePortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deletePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deletePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($portions !== null) {
            $queryParams['portions'] = ObjectSerializer::toQueryValue($portions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteProtection($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteProtectionWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteProtectionWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteProtectionWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->deleteProtectionRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteProtectionAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteProtectionAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteProtectionAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->deleteProtectionRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteProtection'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Presentation password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProtectionRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteProtection');
        }

        $resourcePath = '/slides/{name}/protection';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteProtectionOnline($document, $password)
    {
        try {
            list($response) = $this->deleteProtectionOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteProtectionOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteProtectionOnlineWithHttpInfo($document, $password)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteProtectionOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteProtectionOnlineAsync($document, $password)
    {
        return $this->deleteProtectionOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteProtectionOnlineAsyncWithHttpInfo($document, $password)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteProtectionOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteProtectionOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$password Presentation password. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteProtectionOnlineRequest($document, $password)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteProtectionOnline');
        }
        // verify the required parameter 'password' is set
        if ($password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $password when calling deleteProtectionOnline');
        }

        $resourcePath = '/slides/protection/delete';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteSection($name, $sectionIndex, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSectionWithHttpInfo($name, $sectionIndex, $withSlides, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSectionWithHttpInfo($name, $sectionIndex, $withSlides, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSectionWithHttpInfo($name, $sectionIndex, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionRequest($name, $sectionIndex, $withSlides, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSectionAsync($name, $sectionIndex, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSectionAsyncWithHttpInfo($name, $sectionIndex, $withSlides, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSectionAsyncWithHttpInfo($name, $sectionIndex, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionRequest($name, $sectionIndex, $withSlides, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSection'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$sectionIndex Section index. (required)
     * @param  bool $$withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSectionRequest($name, $sectionIndex, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSection');
        }
        // verify the required parameter 'section_index' is set
        if ($sectionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionIndex when calling deleteSection');
        }

        $resourcePath = '/slides/{name}/sections/{sectionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withSlides !== null) {
            $queryParams['withSlides'] = ObjectSerializer::toQueryValue($withSlides);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sectionIndex", $sectionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSections($name, array $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSectionsWithHttpInfo($name, $sections, $withSlides, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSectionsWithHttpInfo($name, $sections, $withSlides, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSectionsWithHttpInfo($name, array $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionsRequest($name, $sections, $withSlides, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSectionsAsync($name, array $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSectionsAsyncWithHttpInfo($name, $sections, $withSlides, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSectionsAsyncWithHttpInfo($name, array $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->deleteSectionsRequest($name, $sections, $withSlides, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSections'
     *
     * @param  string $$name Document name. (required)
     * @param  array $$sections The indices of the sections to be deleted; delete all by default. (optional)
     * @param  bool $$withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSectionsRequest($name, array $sections = null, $withSlides = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSections');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sections !== null) {
            $queryParams['sections'] = ObjectSerializer::toQueryValue($sections);
        }
        // query params
        if ($withSlides !== null) {
            $queryParams['withSlides'] = ObjectSerializer::toQueryValue($withSlides);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteShape($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteShapeAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShapeRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteShapes($name, $slideIndex, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteShapesWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteShapesWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteShapesWithHttpInfo($name, $slideIndex, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapesRequest($name, $slideIndex, $shapes, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteShapesAsync($name, $slideIndex, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteShapesAsyncWithHttpInfo($name, $slideIndex, $shapes, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteShapesAsyncWithHttpInfo($name, $slideIndex, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteShapesRequest($name, $slideIndex, $shapes, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  array $$shapes The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteShapesRequest($name, $slideIndex, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteShapes');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSlideComments($name, $slideIndex, $author = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSlideCommentsWithHttpInfo($name, $slideIndex, $author, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSlideCommentsWithHttpInfo($name, $slideIndex, $author, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSlideCommentsWithHttpInfo($name, $slideIndex, $author = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->deleteSlideCommentsRequest($name, $slideIndex, $author, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideComments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSlideCommentsAsync($name, $slideIndex, $author = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSlideCommentsAsyncWithHttpInfo($name, $slideIndex, $author, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSlideCommentsAsyncWithHttpInfo($name, $slideIndex, $author = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->deleteSlideCommentsRequest($name, $slideIndex, $author, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideComments'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$author Author of comments. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSlideCommentsRequest($name, $slideIndex, $author = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlideComments');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideComments');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/comments';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSlideCommentsOnline($document, $slideIndex, $author = null, $password = null)
    {
        try {
            list($response) = $this->deleteSlideCommentsOnlineWithHttpInfo($document, $slideIndex, $author, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSlideCommentsOnlineWithHttpInfo($document, $slideIndex, $author, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteSlideCommentsOnlineWithHttpInfo($document, $slideIndex, $author = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteSlideCommentsOnlineRequest($document, $slideIndex, $author, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSlideCommentsOnlineAsync($document, $slideIndex, $author = null, $password = null)
    {
        return $this->deleteSlideCommentsOnlineAsyncWithHttpInfo($document, $slideIndex, $author, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSlideCommentsOnlineAsyncWithHttpInfo($document, $slideIndex, $author = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteSlideCommentsOnlineRequest($document, $slideIndex, $author, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlideCommentsOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex (required)
     * @param  string $$author Author of comments. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSlideCommentsOnlineRequest($document, $slideIndex, $author = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteSlideCommentsOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSlideCommentsOnline');
        }

        $resourcePath = '/slides/slides/{slideIndex}/comments/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteSlides($name, array $slides = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSlidesWithHttpInfo($name, $slides, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSlidesWithHttpInfo($name, $slides, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSlidesWithHttpInfo($name, array $slides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlidesRequest($name, $slides, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSlidesAsync($name, array $slides = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSlidesAsyncWithHttpInfo($name, $slides, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSlidesAsyncWithHttpInfo($name, array $slides = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->deleteSlidesRequest($name, $slides, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  array $$slides The indices of the slides to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSlidesRequest($name, array $slides = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSlides');
        }

        $resourcePath = '/slides/{name}/slides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($slides !== null) {
            $queryParams['slides'] = ObjectSerializer::toQueryValue($slides);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSmartArtNode($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSmartArtNodeWithHttpInfo($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSmartArtNodeWithHttpInfo($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSmartArtNodeWithHttpInfo($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SmartArt';
        $httpRequest = $this->deleteSmartArtNodeRequest($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SmartArt', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSmartArtNodeAsync($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSmartArtNodeAsyncWithHttpInfo($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSmartArtNodeAsyncWithHttpInfo($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SmartArt';
        $httpRequest = $this->deleteSmartArtNodeRequest($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSmartArtNode'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param  int $$nodeIndex Root level node index. (required)
     * @param  string $$subNode Sub-node path (e.g. \&quot;3\&quot;, \&quot;3/nodes/2). (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSmartArtNodeRequest($name, $slideIndex, $smartArtIndex, $nodeIndex, $subNode = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSmartArtNode');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSmartArtNode');
        }
        // verify the required parameter 'smart_art_index' is set
        if ($smartArtIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $smartArtIndex when calling deleteSmartArtNode');
        }
        // verify the required parameter 'node_index' is set
        if ($nodeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $nodeIndex when calling deleteSmartArtNode');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/smartArts/{smartArtIndex}/nodes/{nodeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($subNode !== null) {
            $queryParams['subNode'] = ObjectSerializer::toQueryValue($subNode);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "smartArtIndex", $smartArtIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "nodeIndex", $nodeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideAnimation($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideAnimationAsync($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSpecialSlideAnimationAsyncWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideAnimationAsyncWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideAnimation');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideAnimation');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideAnimationEffect($name, $slideIndex, $slideType, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effectIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideAnimationEffectAsync($name, $slideIndex, $slideType, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSpecialSlideAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effectIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$effectIndex Index of the effect to be removed. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideAnimationEffect');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling deleteSpecialSlideAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequence($name, $slideIndex, $slideType, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationInteractiveSequenceRequest($name, $slideIndex, $slideType, $sequenceIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceAsync($name, $slideIndex, $slideType, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSpecialSlideAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationInteractiveSequenceRequest($name, $slideIndex, $slideType, $sequenceIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideAnimationInteractiveSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideAnimationInteractiveSequenceRequest($name, $slideIndex, $slideType, $sequenceIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideAnimationInteractiveSequence');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideAnimationInteractiveSequence');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling deleteSpecialSlideAnimationInteractiveSequence');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceEffect($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSpecialSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$sequenceIndex Interactive sequence index. (required)
     * @param  int $$effectIndex Index of the effect to be removed. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling deleteSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling deleteSpecialSlideAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequences($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequencesWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationInteractiveSequencesRequest($name, $slideIndex, $slideType, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequencesAsync($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSpecialSlideAnimationInteractiveSequencesAsyncWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideAnimationInteractiveSequencesAsyncWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationInteractiveSequencesRequest($name, $slideIndex, $slideType, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideAnimationInteractiveSequences'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideAnimationInteractiveSequencesRequest($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideAnimationInteractiveSequences');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideAnimationInteractiveSequences');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideAnimationInteractiveSequences');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideAnimationMainSequence($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideAnimationMainSequenceWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideAnimationMainSequenceWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideAnimationMainSequenceWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationMainSequenceRequest($name, $slideIndex, $slideType, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideAnimationMainSequenceAsync($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteSpecialSlideAnimationMainSequenceAsyncWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideAnimationMainSequenceAsyncWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->deleteSpecialSlideAnimationMainSequenceRequest($name, $slideIndex, $slideType, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideAnimationMainSequence'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideAnimationMainSequenceRequest($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideAnimationMainSequence');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideAnimationMainSequence');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideAnimationMainSequence');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideParagraph($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideParagraphAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideParagraph');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSpecialSlideParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteSpecialSlideParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideParagraphs($name, $slideIndex, $slideType, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideParagraphsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideParagraphsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideParagraphsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSpecialSlideParagraphsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideParagraphsAsync($name, $slideIndex, $slideType, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteSpecialSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteSpecialSlideParagraphsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphs, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  array $$paragraphs The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideParagraphsRequest($name, $slideIndex, $slideType, $shapeIndex, array $paragraphs = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideParagraphs');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideParagraphs');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSpecialSlideParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($paragraphs !== null) {
            $queryParams['paragraphs'] = ObjectSerializer::toQueryValue($paragraphs);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlidePortion($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlidePortionAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlidePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlidePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlidePortion');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlidePortion');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSpecialSlidePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteSpecialSlidePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling deleteSpecialSlidePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlidePortions($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteSpecialSlidePortionsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlidePortionsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlidePortionsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSpecialSlidePortionsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlidePortionsAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteSpecialSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteSpecialSlidePortionsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portions, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlidePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  array $$portions The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlidePortionsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, array $portions = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlidePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlidePortions');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlidePortions');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSpecialSlidePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteSpecialSlidePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($portions !== null) {
            $queryParams['portions'] = ObjectSerializer::toQueryValue($portions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideShape($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideShapeAsync($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideShape');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideShape');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteSpecialSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteSpecialSlideShapes($name, $slideIndex, $slideType, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->deleteSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $shapes, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function deleteSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSpecialSlideShapesRequest($name, $slideIndex, $slideType, $shapes, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteSpecialSlideShapesAsync($name, $slideIndex, $slideType, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->deleteSpecialSlideShapesAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapes, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteSpecialSlideShapesAsyncWithHttpInfo($name, $slideIndex, $slideType, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->deleteSpecialSlideShapesRequest($name, $slideIndex, $slideType, $shapes, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteSpecialSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  array $$shapes The indices of the shapes to be deleted; delete all by default. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSpecialSlideShapesRequest($name, $slideIndex, $slideType, array $shapes = null, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteSpecialSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteSpecialSlideShapes');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling deleteSpecialSlideShapes');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteTableCellParagraph($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteTableCellParagraphAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->deleteTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteTableCellParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteTableCellParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteTableCellParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteTableCellParagraph');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling deleteTableCellParagraph');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling deleteTableCellParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteTableCellParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteTableCellPortion($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteTableCellPortionAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->deleteTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteTableCellPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteTableCellPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteTableCellPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteTableCellPortion');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling deleteTableCellPortion');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling deleteTableCellPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling deleteTableCellPortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling deleteTableCellPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteTableRow($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Table';
        $httpRequest = $this->deleteTableRowRequest($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Table', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteTableRowAsync($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteTableRowAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteTableRowAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Table';
        $httpRequest = $this->deleteTableRowRequest($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteTableRow'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  bool $$withAttachedRows Also delete all attached rows. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTableRowRequest($name, $slideIndex, $shapeIndex, $rowIndex, $withAttachedRows = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteTableRow');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling deleteTableRow');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling deleteTableRow');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling deleteTableRow');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withAttachedRows !== null) {
            $queryParams['withAttachedRows'] = ObjectSerializer::toQueryValue($withAttachedRows);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteUnusedLayoutSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteUnusedLayoutSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteUnusedLayoutSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteUnusedLayoutSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides';
        $httpRequest = $this->deleteUnusedLayoutSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteUnusedLayoutSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteUnusedLayoutSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteUnusedLayoutSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides';
        $httpRequest = $this->deleteUnusedLayoutSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteUnusedLayoutSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUnusedLayoutSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteUnusedLayoutSlides');
        }

        $resourcePath = '/slides/{name}/layoutSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteUnusedLayoutSlidesOnline($document, $password = null)
    {
        try {
            list($response) = $this->deleteUnusedLayoutSlidesOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteUnusedLayoutSlidesOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteUnusedLayoutSlidesOnlineWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteUnusedLayoutSlidesOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteUnusedLayoutSlidesOnlineAsync($document, $password = null)
    {
        return $this->deleteUnusedLayoutSlidesOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteUnusedLayoutSlidesOnlineAsyncWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteUnusedLayoutSlidesOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteUnusedLayoutSlidesOnline'
     *
     * @param  \SplFileObject $$document Document data (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUnusedLayoutSlidesOnlineRequest($document, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteUnusedLayoutSlidesOnline');
        }

        $resourcePath = '/slides/layoutSlides/delete';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteUnusedMasterSlides($name, $ignorePreserveField = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->deleteUnusedMasterSlidesWithHttpInfo($name, $ignorePreserveField, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteUnusedMasterSlidesWithHttpInfo($name, $ignorePreserveField, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function deleteUnusedMasterSlidesWithHttpInfo($name, $ignorePreserveField = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides';
        $httpRequest = $this->deleteUnusedMasterSlidesRequest($name, $ignorePreserveField, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteUnusedMasterSlidesAsync($name, $ignorePreserveField = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteUnusedMasterSlidesAsyncWithHttpInfo($name, $ignorePreserveField, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteUnusedMasterSlidesAsyncWithHttpInfo($name, $ignorePreserveField = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides';
        $httpRequest = $this->deleteUnusedMasterSlidesRequest($name, $ignorePreserveField, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteUnusedMasterSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  bool $$ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUnusedMasterSlidesRequest($name, $ignorePreserveField = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteUnusedMasterSlides');
        }

        $resourcePath = '/slides/{name}/masterSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($ignorePreserveField !== null) {
            $queryParams['ignorePreserveField'] = ObjectSerializer::toQueryValue($ignorePreserveField);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteUnusedMasterSlidesOnline($document, $ignorePreserveField = null, $password = null)
    {
        try {
            list($response) = $this->deleteUnusedMasterSlidesOnlineWithHttpInfo($document, $ignorePreserveField, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteUnusedMasterSlidesOnlineWithHttpInfo($document, $ignorePreserveField, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteUnusedMasterSlidesOnlineWithHttpInfo($document, $ignorePreserveField = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteUnusedMasterSlidesOnlineRequest($document, $ignorePreserveField, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteUnusedMasterSlidesOnlineAsync($document, $ignorePreserveField = null, $password = null)
    {
        return $this->deleteUnusedMasterSlidesOnlineAsyncWithHttpInfo($document, $ignorePreserveField, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteUnusedMasterSlidesOnlineAsyncWithHttpInfo($document, $ignorePreserveField = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteUnusedMasterSlidesOnlineRequest($document, $ignorePreserveField, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteUnusedMasterSlidesOnline'
     *
     * @param  \SplFileObject $$document Document data (required)
     * @param  bool $$ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. (optional, default to false)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteUnusedMasterSlidesOnlineRequest($document, $ignorePreserveField = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteUnusedMasterSlidesOnline');
        }

        $resourcePath = '/slides/masterSlides/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($ignorePreserveField !== null) {
            $queryParams['ignorePreserveField'] = ObjectSerializer::toQueryValue($ignorePreserveField);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function deleteWatermark($name, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->deleteWatermarkWithHttpInfo($name, $shapeName, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->deleteWatermarkWithHttpInfo($name, $shapeName, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function deleteWatermarkWithHttpInfo($name, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteWatermarkRequest($name, $shapeName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteWatermarkAsync($name, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        return $this->deleteWatermarkAsyncWithHttpInfo($name, $shapeName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteWatermarkAsyncWithHttpInfo($name, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->deleteWatermarkRequest($name, $shapeName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteWatermark'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$shapeName Name of the watermark shape. If null, default value \&quot;watermark\&quot;is used. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWatermarkRequest($name, $shapeName = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling deleteWatermark');
        }

        $resourcePath = '/slides/{name}/watermark/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeName !== null) {
            $queryParams['shapeName'] = ObjectSerializer::toQueryValue($shapeName);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'DELETE');
    }
    /**
     */
    public function deleteWatermarkOnline($document, $shapeName = null, $password = null)
    {
        try {
            list($response) = $this->deleteWatermarkOnlineWithHttpInfo($document, $shapeName, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->deleteWatermarkOnlineWithHttpInfo($document, $shapeName, $password);
            return $response;
        } 
    }

    /**
     */
    public function deleteWatermarkOnlineWithHttpInfo($document, $shapeName = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteWatermarkOnlineRequest($document, $shapeName, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function deleteWatermarkOnlineAsync($document, $shapeName = null, $password = null)
    {
        return $this->deleteWatermarkOnlineAsyncWithHttpInfo($document, $shapeName, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function deleteWatermarkOnlineAsyncWithHttpInfo($document, $shapeName = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->deleteWatermarkOnlineRequest($document, $shapeName, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'deleteWatermarkOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$shapeName Name of the watermark shape. If null, default value \&quot;watermark\&quot;is used. (optional)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWatermarkOnlineRequest($document, $shapeName = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling deleteWatermarkOnline');
        }

        $resourcePath = '/slides/watermark/delete';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeName !== null) {
            $queryParams['shapeName'] = ObjectSerializer::toQueryValue($shapeName);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadFile($path, $storageName = null, $versionId = null)
    {
        try {
            list($response) = $this->downloadFileWithHttpInfo($path, $storageName, $versionId);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadFileWithHttpInfo($path, $storageName, $versionId);
            return $response;
        } 
    }

    /**
     */
    public function downloadFileWithHttpInfo($path, $storageName = null, $versionId = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadFileRequest($path, $storageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadFileAsync($path, $storageName = null, $versionId = null)
    {
        return $this->downloadFileAsyncWithHttpInfo($path, $storageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadFileAsyncWithHttpInfo($path, $storageName = null, $versionId = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadFileRequest($path, $storageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadFile'
     *
     * @param  string $$path File path e.g. &#39;/folder/file.ext&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  string $$versionId File version ID to download (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadFileRequest($path, $storageName = null, $versionId = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling downloadFile');
        }

        $resourcePath = '/slides/storage/file/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function downloadImage($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImageWithHttpInfo($name, $index, $format, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageWithHttpInfo($name, $index, $format, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageWithHttpInfo($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageRequest($name, $index, $format, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageAsync($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImageAsyncWithHttpInfo($name, $index, $format, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageAsyncWithHttpInfo($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageRequest($name, $index, $format, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImage'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageRequest($name, $index, $format, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadImage');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling downloadImage');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadImage');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/images/{index}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function downloadImageDefaultFormat($name, $index, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImageDefaultFormatWithHttpInfo($name, $index, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageDefaultFormatWithHttpInfo($name, $index, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageDefaultFormatWithHttpInfo($name, $index, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatRequest($name, $index, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageDefaultFormatAsync($name, $index, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImageDefaultFormatAsyncWithHttpInfo($name, $index, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageDefaultFormatAsyncWithHttpInfo($name, $index, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatRequest($name, $index, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImageDefaultFormat'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageDefaultFormatRequest($name, $index, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadImageDefaultFormat');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling downloadImageDefaultFormat');
        }

        $resourcePath = '/slides/{name}/images/{index}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function downloadImageDefaultFormatOnline($document, $index, $password = null)
    {
        try {
            list($response) = $this->downloadImageDefaultFormatOnlineWithHttpInfo($document, $index, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageDefaultFormatOnlineWithHttpInfo($document, $index, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageDefaultFormatOnlineWithHttpInfo($document, $index, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatOnlineRequest($document, $index, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageDefaultFormatOnlineAsync($document, $index, $password = null)
    {
        return $this->downloadImageDefaultFormatOnlineAsyncWithHttpInfo($document, $index, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageDefaultFormatOnlineAsyncWithHttpInfo($document, $index, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageDefaultFormatOnlineRequest($document, $index, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImageDefaultFormatOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageDefaultFormatOnlineRequest($document, $index, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadImageDefaultFormatOnline');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling downloadImageDefaultFormatOnline');
        }

        $resourcePath = '/slides/images/{index}';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadImageOnline($document, $index, $format, $password = null)
    {
        try {
            list($response) = $this->downloadImageOnlineWithHttpInfo($document, $index, $format, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImageOnlineWithHttpInfo($document, $index, $format, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImageOnlineWithHttpInfo($document, $index, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageOnlineRequest($document, $index, $format, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImageOnlineAsync($document, $index, $format, $password = null)
    {
        return $this->downloadImageOnlineAsyncWithHttpInfo($document, $index, $format, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImageOnlineAsyncWithHttpInfo($document, $index, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImageOnlineRequest($document, $index, $format, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImageOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$index Image index. (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImageOnlineRequest($document, $index, $format, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadImageOnline');
        }
        // verify the required parameter 'index' is set
        if ($index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $index when calling downloadImageOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadImageOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/images/{index}/{format}';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "index", $index);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadImages($name, $format, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImagesWithHttpInfo($name, $format, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesWithHttpInfo($name, $format, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesWithHttpInfo($name, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesRequest($name, $format, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesAsync($name, $format, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImagesAsyncWithHttpInfo($name, $format, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesAsyncWithHttpInfo($name, $format, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesRequest($name, $format, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImages'
     *
     * @param  string $$name (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesRequest($name, $format, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadImages');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadImages');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/images/download/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadImagesDefaultFormat($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadImagesDefaultFormatWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesDefaultFormatWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesDefaultFormatWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesDefaultFormatAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadImagesDefaultFormatAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesDefaultFormatAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImagesDefaultFormat'
     *
     * @param  string $$name (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesDefaultFormatRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadImagesDefaultFormat');
        }

        $resourcePath = '/slides/{name}/images/download';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadImagesDefaultFormatOnline($document, $password = null)
    {
        try {
            list($response) = $this->downloadImagesDefaultFormatOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesDefaultFormatOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesDefaultFormatOnlineWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesDefaultFormatOnlineAsync($document, $password = null)
    {
        return $this->downloadImagesDefaultFormatOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesDefaultFormatOnlineAsyncWithHttpInfo($document, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesDefaultFormatOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImagesDefaultFormatOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesDefaultFormatOnlineRequest($document, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadImagesDefaultFormatOnline');
        }

        $resourcePath = '/slides/images/download';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadImagesOnline($document, $format, $password = null)
    {
        try {
            list($response) = $this->downloadImagesOnlineWithHttpInfo($document, $format, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadImagesOnlineWithHttpInfo($document, $format, $password);
            return $response;
        } 
    }

    /**
     */
    public function downloadImagesOnlineWithHttpInfo($document, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesOnlineRequest($document, $format, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadImagesOnlineAsync($document, $format, $password = null)
    {
        return $this->downloadImagesOnlineAsyncWithHttpInfo($document, $format, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadImagesOnlineAsyncWithHttpInfo($document, $format, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadImagesOnlineRequest($document, $format, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadImagesOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format Export format (png, jpg, gif). (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadImagesOnlineRequest($document, $format, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadImagesOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadImagesOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ImageExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/images/download/{format}';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadNotesSlide($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadNotesSlideWithHttpInfo($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadNotesSlideWithHttpInfo($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadNotesSlideWithHttpInfo($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideRequest($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadNotesSlideAsync($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadNotesSlideAsyncWithHttpInfo($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadNotesSlideAsyncWithHttpInfo($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideRequest($name, $slideIndex, $format, $width, $height, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  int $$width The width of the slide representation in the output format. (optional)
     * @param  int $$height The height of the slide representation in the output format (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadNotesSlideRequest($name, $slideIndex, $format, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadNotesSlide');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadNotesSlide');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\NotesSlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\NotesSlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function downloadNotesSlideOnline($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadNotesSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadNotesSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadNotesSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadNotesSlideOnlineAsync($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        return $this->downloadNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadNotesSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadNotesSlideOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  int $$width The width of the slide representation in the output format. (optional)
     * @param  int $$height The height of the slide representation in the output format. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadNotesSlideOnlineRequest($document, $slideIndex, $format, $width = null, $height = null, $password = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadNotesSlideOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadNotesSlideOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadNotesSlideOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\NotesSlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\NotesSlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/slides/{slideIndex}/notesSlide/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadPortionAsMathMl($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->downloadPortionAsMathMlWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadPortionAsMathMlWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function downloadPortionAsMathMlWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadPortionAsMathMlRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadPortionAsMathMlAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->downloadPortionAsMathMlAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadPortionAsMathMlAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadPortionAsMathMlRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadPortionAsMathMl'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadPortionAsMathMlRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadPortionAsMathMl');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadPortionAsMathMl');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling downloadPortionAsMathMl');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling downloadPortionAsMathMl');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling downloadPortionAsMathMl');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/mathml';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadPresentation($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        try {
            list($response) = $this->downloadPresentationWithHttpInfo($name, $format, $options, $password, $folder, $storage, $fontsFolder, $slides);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadPresentationWithHttpInfo($name, $format, $options, $password, $folder, $storage, $fontsFolder, $slides);
            return $response;
        } 
    }

    /**
     */
    public function downloadPresentationWithHttpInfo($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadPresentationRequest($name, $format, $options, $password, $folder, $storage, $fontsFolder, $slides);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadPresentationAsync($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        return $this->downloadPresentationAsyncWithHttpInfo($name, $format, $options, $password, $folder, $storage, $fontsFolder, $slides)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadPresentationAsyncWithHttpInfo($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadPresentationRequest($name, $format, $options, $password, $folder, $storage, $fontsFolder, $slides);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadPresentation'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$format Export format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     * @param  array $$slides The indices of the slides to be saved. If not specified, all slides are saved by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadPresentationRequest($name, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadPresentation');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadPresentation');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($slides !== null) {
            $queryParams['slides'] = ObjectSerializer::toQueryValue($slides);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadShape($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        try {
            list($response) = $this->downloadShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function downloadShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeRequest($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadShapeAsync($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        return $this->downloadShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeRequest($name, $slideIndex, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadShape'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadShapeRequest($name, $slideIndex, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling downloadShape');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadShape');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the value of enum parameter 'bounds' is valid
        if ($bounds != null && !in_array(strtolower($bounds), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $bounds . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadShapeFromDto($format, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto)
    {
        try {
            list($response) = $this->downloadShapeFromDtoWithHttpInfo($format, $dto);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadShapeFromDtoWithHttpInfo($format, $dto);
            return $response;
        } 
    }

    /**
     */
    public function downloadShapeFromDtoWithHttpInfo($format, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeFromDtoRequest($format, $dto);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadShapeFromDtoAsync($format, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto)
    {
        return $this->downloadShapeFromDtoAsyncWithHttpInfo($format, $dto)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadShapeFromDtoAsyncWithHttpInfo($format, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeFromDtoRequest($format, $dto);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadShapeFromDto'
     *
     * @param  string $$format Export format (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadShapeFromDtoRequest($format, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto)
    {
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadShapeFromDto');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling downloadShapeFromDto');
        }

        $resourcePath = '/slides/shape/{format}';
        $queryParams = [];
        $headerParams = [];


        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadShapeOnline($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        try {
            list($response) = $this->downloadShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);
            return $response;
        } 
    }

    /**
     */
    public function downloadShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadShapeOnlineAsync($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        return $this->downloadShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadShapeOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadShapeOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadShapeOnline');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling downloadShapeOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadShapeOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the value of enum parameter 'bounds' is valid
        if ($bounds != null && !in_array(strtolower($bounds), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $bounds . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadSlide($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->downloadSlideWithHttpInfo($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadSlideWithHttpInfo($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function downloadSlideWithHttpInfo($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideRequest($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadSlideAsync($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->downloadSlideAsyncWithHttpInfo($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadSlideAsyncWithHttpInfo($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideRequest($name, $slideIndex, $format, $options, $width, $height, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  int $$width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSlideRequest($name, $slideIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadSlide');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadSlide');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadSlideOnline($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        try {
            list($response) = $this->downloadSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder, $options);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder, $options);
            return $response;
        } 
    }

    /**
     */
    public function downloadSlideOnlineWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder, $options);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadSlideOnlineAsync($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        return $this->downloadSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSlideOnlineRequest($document, $slideIndex, $format, $width, $height, $password, $storage, $fontsFolder, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadSlideOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  int $$width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSlideOnlineRequest($document, $slideIndex, $format, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling downloadSlideOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadSlideOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadSlideOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function downloadSpecialSlideShape($name, $slideIndex, $slideType, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        try {
            list($response) = $this->downloadSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->downloadSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function downloadSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function downloadSpecialSlideShapeAsync($name, $slideIndex, $slideType, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        return $this->downloadSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function downloadSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->downloadSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $format, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'downloadSpecialSlideShape'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options Export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $format, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling downloadSpecialSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling downloadSpecialSlideShape');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling downloadSpecialSlideShape');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling downloadSpecialSlideShape');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling downloadSpecialSlideShape');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the value of enum parameter 'bounds' is valid
        if ($bounds != null && !in_array(strtolower($bounds), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $bounds . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function getAnimation($name, $slideIndex, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getAnimationWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getAnimationWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getAnimationWithHttpInfo($name, $slideIndex, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->getAnimationRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getAnimationAsync($name, $slideIndex, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getAnimationAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getAnimationAsyncWithHttpInfo($name, $slideIndex, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->getAnimationRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. If specified, only effects related to that shape are returned. (optional)
     * @param  int $$paragraphIndex Paragraph index. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAnimationRequest($name, $slideIndex, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeIndex !== null) {
            $queryParams['shapeIndex'] = ObjectSerializer::toQueryValue($shapeIndex);
        }
        // query params
        if ($paragraphIndex !== null) {
            $queryParams['paragraphIndex'] = ObjectSerializer::toQueryValue($paragraphIndex);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getApiInfo()
    {
        try {
            list($response) = $this->getApiInfoWithHttpInfo();
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getApiInfoWithHttpInfo();
            return $response;
        } 
    }

    /**
     */
    public function getApiInfoWithHttpInfo()
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ApiInfo';
        $httpRequest = $this->getApiInfoRequest();
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ApiInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getApiInfoAsync()
    {
        return $this->getApiInfoAsyncWithHttpInfo()
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getApiInfoAsyncWithHttpInfo()
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ApiInfo';
        $httpRequest = $this->getApiInfoRequest();

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getApiInfo'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getApiInfoRequest()
    {

        $resourcePath = '/slides/info';
        $queryParams = [];
        $headerParams = [];


        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getBackground($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getBackgroundWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getBackgroundWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->getBackgroundRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getBackgroundAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getBackgroundAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getBackgroundAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->getBackgroundRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getBackground'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBackgroundRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getBackground');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getBackground');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/background';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getColorScheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getColorSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getColorSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getColorSchemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ColorScheme';
        $httpRequest = $this->getColorSchemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ColorScheme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getColorSchemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getColorSchemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getColorSchemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ColorScheme';
        $httpRequest = $this->getColorSchemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getColorScheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getColorSchemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getColorScheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getColorScheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme/colorScheme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getDiscUsage($storageName = null)
    {
        try {
            list($response) = $this->getDiscUsageWithHttpInfo($storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getDiscUsageWithHttpInfo($storageName);
            return $response;
        } 
    }

    /**
     */
    public function getDiscUsageWithHttpInfo($storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DiscUsage';
        $httpRequest = $this->getDiscUsageRequest($storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DiscUsage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getDiscUsageAsync($storageName = null)
    {
        return $this->getDiscUsageAsyncWithHttpInfo($storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getDiscUsageAsyncWithHttpInfo($storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DiscUsage';
        $httpRequest = $this->getDiscUsageRequest($storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getDiscUsage'
     *
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDiscUsageRequest($storageName = null)
    {

        $resourcePath = '/slides/storage/disc';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getDocumentProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getDocumentPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getDocumentPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->getDocumentPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getDocumentPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getDocumentPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getDocumentPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->getDocumentPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getDocumentProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentProperties');
        }

        $resourcePath = '/slides/{name}/documentproperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getDocumentProperty($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getDocumentPropertyWithHttpInfo($name, $propertyName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getDocumentPropertyWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->getDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getDocumentPropertyAsync($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        return $this->getDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->getDocumentPropertyRequest($name, $propertyName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getDocumentProperty'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$propertyName The property name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getDocumentPropertyRequest($name, $propertyName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($propertyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $propertyName when calling getDocumentProperty');
        }

        $resourcePath = '/slides/{name}/documentproperties/{propertyName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "propertyName", $propertyName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFileVersions($path, $storageName = null)
    {
        try {
            list($response) = $this->getFileVersionsWithHttpInfo($path, $storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFileVersionsWithHttpInfo($path, $storageName);
            return $response;
        } 
    }

    /**
     */
    public function getFileVersionsWithHttpInfo($path, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FileVersions';
        $httpRequest = $this->getFileVersionsRequest($path, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FileVersions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFileVersionsAsync($path, $storageName = null)
    {
        return $this->getFileVersionsAsyncWithHttpInfo($path, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFileVersionsAsyncWithHttpInfo($path, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FileVersions';
        $httpRequest = $this->getFileVersionsRequest($path, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFileVersions'
     *
     * @param  string $$path File path e.g. &#39;/file.ext&#39; (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFileVersionsRequest($path, $storageName = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getFileVersions');
        }

        $resourcePath = '/slides/storage/version/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFilesList($path, $storageName = null)
    {
        try {
            list($response) = $this->getFilesListWithHttpInfo($path, $storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFilesListWithHttpInfo($path, $storageName);
            return $response;
        } 
    }

    /**
     */
    public function getFilesListWithHttpInfo($path, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesList';
        $httpRequest = $this->getFilesListRequest($path, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FilesList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFilesListAsync($path, $storageName = null)
    {
        return $this->getFilesListAsyncWithHttpInfo($path, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFilesListAsyncWithHttpInfo($path, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesList';
        $httpRequest = $this->getFilesListRequest($path, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFilesList'
     *
     * @param  string $$path Folder path e.g. &#39;/folder&#39; (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFilesListRequest($path, $storageName = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling getFilesList');
        }

        $resourcePath = '/slides/storage/folder/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFontScheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getFontSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFontSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getFontSchemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontScheme';
        $httpRequest = $this->getFontSchemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontScheme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFontSchemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getFontSchemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFontSchemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontScheme';
        $httpRequest = $this->getFontSchemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFontScheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFontSchemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFontScheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getFontScheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme/fontScheme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFonts($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getFontsWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFontsWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getFontsWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->getFontsRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFontsAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getFontsAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFontsAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->getFontsRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFonts'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFontsRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFonts');
        }

        $resourcePath = '/slides/{name}/fonts';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getFontsOnline($document, $password = null)
    {
        try {
            list($response) = $this->getFontsOnlineWithHttpInfo($document, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFontsOnlineWithHttpInfo($document, $password);
            return $response;
        } 
    }

    /**
     */
    public function getFontsOnlineWithHttpInfo($document, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->getFontsOnlineRequest($document, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFontsOnlineAsync($document, $password = null)
    {
        return $this->getFontsOnlineAsyncWithHttpInfo($document, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFontsOnlineAsyncWithHttpInfo($document, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->getFontsOnlineRequest($document, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFontsOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFontsOnlineRequest($document, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling getFontsOnline');
        }

        $resourcePath = '/slides/fonts';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function getFormatScheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getFormatSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getFormatSchemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getFormatSchemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FormatScheme';
        $httpRequest = $this->getFormatSchemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FormatScheme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getFormatSchemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getFormatSchemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getFormatSchemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FormatScheme';
        $httpRequest = $this->getFormatSchemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getFormatScheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getFormatSchemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getFormatScheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getFormatScheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme/formatScheme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getLayoutSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getLayoutSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getLayoutSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getLayoutSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->getLayoutSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getLayoutSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getLayoutSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getLayoutSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->getLayoutSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getLayoutSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLayoutSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getLayoutSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getLayoutSlide');
        }

        $resourcePath = '/slides/{name}/layoutSlides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getLayoutSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getLayoutSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getLayoutSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getLayoutSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides';
        $httpRequest = $this->getLayoutSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getLayoutSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getLayoutSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getLayoutSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlides';
        $httpRequest = $this->getLayoutSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getLayoutSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getLayoutSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getLayoutSlides');
        }

        $resourcePath = '/slides/{name}/layoutSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getMasterSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getMasterSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getMasterSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getMasterSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->getMasterSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getMasterSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getMasterSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getMasterSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlide';
        $httpRequest = $this->getMasterSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getMasterSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMasterSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getMasterSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getMasterSlide');
        }

        $resourcePath = '/slides/{name}/masterSlides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getMasterSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getMasterSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getMasterSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getMasterSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides';
        $httpRequest = $this->getMasterSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getMasterSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getMasterSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getMasterSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\MasterSlides';
        $httpRequest = $this->getMasterSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getMasterSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getMasterSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getMasterSlides');
        }

        $resourcePath = '/slides/{name}/masterSlides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getNotesSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getNotesSlideHeaderFooter($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->getNotesSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideHeaderFooterAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->getNotesSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideHeaderFooterRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getNotesSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getNotesSlideOnline($document, $slideIndex, $password = null)
    {
        try {
            list($response) = $this->getNotesSlideOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getNotesSlideOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        } 
    }

    /**
     */
    public function getNotesSlideOnlineWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideOnlineRequest($document, $slideIndex, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getNotesSlideOnlineAsync($document, $slideIndex, $password = null)
    {
        return $this->getNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getNotesSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->getNotesSlideOnlineRequest($document, $slideIndex, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getNotesSlideOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getNotesSlideOnlineRequest($document, $slideIndex, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling getNotesSlideOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getNotesSlideOnline');
        }

        $resourcePath = '/slides/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function getParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getParagraphEffective($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getParagraphEffectiveWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getParagraphEffectiveWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getParagraphEffectiveWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getParagraphEffectiveRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getParagraphEffectiveAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getParagraphEffectiveAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getParagraphEffectiveAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getParagraphEffectiveRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getParagraphEffective'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParagraphEffectiveRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getParagraphEffective');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getParagraphEffective');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getParagraphEffective');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getParagraphEffective');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/effective';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getParagraphRectangle($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getParagraphRectangleWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getParagraphRectangleWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getParagraphRectangleWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextBounds';
        $httpRequest = $this->getParagraphRectangleRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TextBounds', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getParagraphRectangleAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getParagraphRectangleAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getParagraphRectangleAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextBounds';
        $httpRequest = $this->getParagraphRectangleRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getParagraphRectangle'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParagraphRectangleRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getParagraphRectangle');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getParagraphRectangle');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getParagraphRectangle');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getParagraphRectangle');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/bounds';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getParagraphs($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getParagraphsRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getParagraphsAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getParagraphsRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getParagraphsRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPlaceholder($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPlaceholderWithHttpInfo($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPlaceholderWithHttpInfo($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPlaceholderWithHttpInfo($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholder';
        $httpRequest = $this->getPlaceholderRequest($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Placeholder', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPlaceholderAsync($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPlaceholderAsyncWithHttpInfo($name, $slideIndex, $placeholderIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPlaceholderAsyncWithHttpInfo($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholder';
        $httpRequest = $this->getPlaceholderRequest($name, $slideIndex, $placeholderIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPlaceholder'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$placeholderIndex Placeholder index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlaceholderRequest($name, $slideIndex, $placeholderIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPlaceholder');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getPlaceholder');
        }
        // verify the required parameter 'placeholder_index' is set
        if ($placeholderIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $placeholderIndex when calling getPlaceholder');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/placeholders/{placeholderIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "placeholderIndex", $placeholderIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPlaceholders($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPlaceholdersWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPlaceholdersWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPlaceholdersWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholders';
        $httpRequest = $this->getPlaceholdersRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Placeholders', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPlaceholdersAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPlaceholdersAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPlaceholdersAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Placeholders';
        $httpRequest = $this->getPlaceholdersRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPlaceholders'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlaceholdersRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPlaceholders');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getPlaceholders');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/placeholders';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getPortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPortionEffective($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getPortionEffectiveWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPortionEffectiveWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getPortionEffectiveWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getPortionEffectiveRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPortionEffectiveAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getPortionEffectiveAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPortionEffectiveAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getPortionEffectiveRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPortionEffective'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortionEffectiveRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPortionEffective');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getPortionEffective');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getPortionEffective');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getPortionEffective');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getPortionEffective');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/effective';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPortionRectangle($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPortionRectangleWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPortionRectangleWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPortionRectangleWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextBounds';
        $httpRequest = $this->getPortionRectangleRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TextBounds', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPortionRectangleAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getPortionRectangleAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPortionRectangleAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextBounds';
        $httpRequest = $this->getPortionRectangleRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPortionRectangle'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortionRectangleRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPortionRectangle');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getPortionRectangle');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getPortionRectangle');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getPortionRectangle');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getPortionRectangle');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/bounds';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPortions($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getPortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPortionsAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getPortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getPortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPortionsRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getPortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getPortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getPortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPresentation($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPresentationWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPresentationWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPresentationWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->getPresentationRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPresentationAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getPresentationAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPresentationAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->getPresentationRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPresentation'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPresentationRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPresentation');
        }

        $resourcePath = '/slides/{name}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPresentationImages($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPresentationImagesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPresentationImagesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPresentationImagesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getPresentationImagesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Images', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPresentationImagesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getPresentationImagesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPresentationImagesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getPresentationImagesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPresentationImages'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPresentationImagesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPresentationImages');
        }

        $resourcePath = '/slides/{name}/images';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getPresentationTextItems($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getPresentationTextItemsWithHttpInfo($name, $withEmpty, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getPresentationTextItemsWithHttpInfo($name, $withEmpty, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getPresentationTextItemsWithHttpInfo($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getPresentationTextItemsRequest($name, $withEmpty, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TextItems', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getPresentationTextItemsAsync($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getPresentationTextItemsAsyncWithHttpInfo($name, $withEmpty, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getPresentationTextItemsAsyncWithHttpInfo($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getPresentationTextItemsRequest($name, $withEmpty, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getPresentationTextItems'
     *
     * @param  string $$name Document name. (required)
     * @param  bool $$withEmpty True to incude empty items. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPresentationTextItemsRequest($name, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getPresentationTextItems');
        }

        $resourcePath = '/slides/{name}/textItems';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withEmpty !== null) {
            $queryParams['withEmpty'] = ObjectSerializer::toQueryValue($withEmpty);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getProtectionProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getProtectionPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getProtectionPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getProtectionPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->getProtectionPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getProtectionPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getProtectionPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getProtectionPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->getProtectionPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getProtectionProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProtectionPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getProtectionProperties');
        }

        $resourcePath = '/slides/{name}/protection';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSections($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSectionsWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSectionsWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSectionsWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->getSectionsRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSectionsAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getSectionsAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSectionsAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->getSectionsRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSections'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSectionsRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSections');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getShape($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getShapeAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getShapeRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShapeRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getShapeGeometryPath($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getShapeGeometryPathWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getShapeGeometryPathWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getShapeGeometryPathWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths';
        $httpRequest = $this->getShapeGeometryPathRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getShapeGeometryPathAsync($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getShapeGeometryPathAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getShapeGeometryPathAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths';
        $httpRequest = $this->getShapeGeometryPathRequest($name, $slideIndex, $shapeIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getShapeGeometryPath'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShapeGeometryPathRequest($name, $slideIndex, $shapeIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getShapeGeometryPath');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getShapeGeometryPath');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getShapeGeometryPath');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/geometryPath';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getShapes($name, $slideIndex, $password = null, $folder = null, $storage = null, $shapeType = null, $subShape = null)
    {
        try {
            list($response) = $this->getShapesWithHttpInfo($name, $slideIndex, $password, $folder, $storage, $shapeType, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getShapesWithHttpInfo($name, $slideIndex, $password, $folder, $storage, $shapeType, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getShapesWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null, $shapeType = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getShapesRequest($name, $slideIndex, $password, $folder, $storage, $shapeType, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getShapesAsync($name, $slideIndex, $password = null, $folder = null, $storage = null, $shapeType = null, $subShape = null)
    {
        return $this->getShapesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage, $shapeType, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getShapesAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null, $shapeType = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getShapesRequest($name, $slideIndex, $password, $folder, $storage, $shapeType, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$shapeType Shape type. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getShapesRequest($name, $slideIndex, $password = null, $folder = null, $storage = null, $shapeType = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getShapes');
        }
        // verify the value of enum parameter 'shapeType' is valid
        if ($shapeType != null && !in_array(strtolower($shapeType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $shapeType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($shapeType !== null) {
            $queryParams['shapeType'] = ObjectSerializer::toQueryValue($shapeType);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlide($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->getSlideRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->getSlideRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlideComments($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideCommentsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideCommentsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideCommentsWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->getSlideCommentsRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideComments', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideCommentsAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideCommentsAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideCommentsAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideComments';
        $httpRequest = $this->getSlideCommentsRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideComments'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideCommentsRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideComments');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideComments');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/comments';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlideHeaderFooter($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideHeaderFooterWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->getSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideHeaderFooterAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->getSlideHeaderFooterRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideHeaderFooterRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlideImages($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideImagesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideImagesWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideImagesWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getSlideImagesRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Images', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideImagesAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideImagesAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideImagesAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Images';
        $httpRequest = $this->getSlideImagesRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideImages'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideImagesRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideImages');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideImages');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/images';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlideProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlidePropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlidePropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlidePropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->getSlidePropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlidePropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlidePropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlidePropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->getSlidePropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlidePropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideProperties');
        }

        $resourcePath = '/slides/{name}/slideProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlideShowProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideShowPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideShowPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideShowPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties';
        $httpRequest = $this->getSlideShowPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideShowPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideShowPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideShowPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties';
        $httpRequest = $this->getSlideShowPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideShowProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideShowPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideShowProperties');
        }

        $resourcePath = '/slides/{name}/slideShowProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlideTextItems($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlideTextItemsWithHttpInfo($name, $slideIndex, $withEmpty, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlideTextItemsWithHttpInfo($name, $slideIndex, $withEmpty, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlideTextItemsWithHttpInfo($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getSlideTextItemsRequest($name, $slideIndex, $withEmpty, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TextItems', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlideTextItemsAsync($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlideTextItemsAsyncWithHttpInfo($name, $slideIndex, $withEmpty, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlideTextItemsAsyncWithHttpInfo($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TextItems';
        $httpRequest = $this->getSlideTextItemsRequest($name, $slideIndex, $withEmpty, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlideTextItems'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  bool $$withEmpty True to include empty items. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlideTextItemsRequest($name, $slideIndex, $withEmpty = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlideTextItems');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSlideTextItems');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/textItems';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($withEmpty !== null) {
            $queryParams['withEmpty'] = ObjectSerializer::toQueryValue($withEmpty);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSlides($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSlidesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSlidesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->getSlidesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSlidesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getSlidesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSlidesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->getSlidesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSlidesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSlides');
        }

        $resourcePath = '/slides/{name}/slides';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlideAnimation($name, $slideIndex, $slideType, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->getSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlideAnimationAsync($name, $slideIndex, $slideType, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        return $this->getSpecialSlideAnimationAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlideAnimationAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->getSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlideAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. If specified, only effects related to that shape are returned. (optional)
     * @param  int $$paragraphIndex Paragraph index. If specified, only effects related to that paragraph are returned. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $shapeIndex = null, $paragraphIndex = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlideAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlideAnimation');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlideAnimation');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($shapeIndex !== null) {
            $queryParams['shapeIndex'] = ObjectSerializer::toQueryValue($shapeIndex);
        }
        // query params
        if ($paragraphIndex !== null) {
            $queryParams['paragraphIndex'] = ObjectSerializer::toQueryValue($paragraphIndex);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlideParagraph($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlideParagraphAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlideParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlideParagraph');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSpecialSlideParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSpecialSlideParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlideParagraphs($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getSpecialSlideParagraphsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlideParagraphsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlideParagraphsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getSpecialSlideParagraphsRequest($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlideParagraphsAsync($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getSpecialSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlideParagraphsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getSpecialSlideParagraphsRequest($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlideParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlideParagraphsRequest($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlideParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlideParagraphs');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlideParagraphs');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSpecialSlideParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlidePortion($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlidePortionAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlidePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlidePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlidePortion');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlidePortion');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSpecialSlidePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSpecialSlidePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getSpecialSlidePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlidePortions($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getSpecialSlidePortionsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlidePortionsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlidePortionsWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getSpecialSlidePortionsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlidePortionsAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getSpecialSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlidePortionsAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getSpecialSlidePortionsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlidePortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlidePortionsRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlidePortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlidePortions');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlidePortions');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSpecialSlidePortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getSpecialSlidePortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlideShape($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlideShapeAsync($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->getSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlideShape');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlideShape');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getSpecialSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getSpecialSlideShapes($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->getSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function getSpecialSlideShapesWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getSpecialSlideShapesRequest($name, $slideIndex, $slideType, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getSpecialSlideShapesAsync($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->getSpecialSlideShapesAsyncWithHttpInfo($name, $slideIndex, $slideType, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getSpecialSlideShapesAsyncWithHttpInfo($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->getSpecialSlideShapesRequest($name, $slideIndex, $slideType, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getSpecialSlideShapes'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSpecialSlideShapesRequest($name, $slideIndex, $slideType, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getSpecialSlideShapes');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getSpecialSlideShapes');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling getSpecialSlideShapes');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getTableCellParagraph($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getTableCellParagraphAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->getTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getTableCellParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTableCellParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getTableCellParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getTableCellParagraph');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling getTableCellParagraph');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling getTableCellParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getTableCellParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getTableCellParagraphs($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getTableCellParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getTableCellParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getTableCellParagraphsWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getTableCellParagraphsRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getTableCellParagraphsAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getTableCellParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getTableCellParagraphsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraphs';
        $httpRequest = $this->getTableCellParagraphsRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getTableCellParagraphs'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTableCellParagraphsRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTableCellParagraphs');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getTableCellParagraphs');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getTableCellParagraphs');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling getTableCellParagraphs');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling getTableCellParagraphs');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getTableCellPortion($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getTableCellPortionAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->getTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getTableCellPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTableCellPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getTableCellPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getTableCellPortion');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling getTableCellPortion');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling getTableCellPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getTableCellPortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling getTableCellPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getTableCellPortions($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getTableCellPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getTableCellPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getTableCellPortionsWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getTableCellPortionsRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portions', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getTableCellPortionsAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getTableCellPortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getTableCellPortionsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portions';
        $httpRequest = $this->getTableCellPortionsRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getTableCellPortions'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTableCellPortionsRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTableCellPortions');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getTableCellPortions');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling getTableCellPortions');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling getTableCellPortions');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling getTableCellPortions');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling getTableCellPortions');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getTheme($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getThemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getThemeWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getThemeWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Theme';
        $httpRequest = $this->getThemeRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Theme', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getThemeAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->getThemeAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getThemeAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Theme';
        $httpRequest = $this->getThemeRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getTheme'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getThemeRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getTheme');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling getTheme');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/theme';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function getViewProperties($name, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->getViewPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->getViewPropertiesWithHttpInfo($name, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function getViewPropertiesWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->getViewPropertiesRequest($name, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function getViewPropertiesAsync($name, $password = null, $folder = null, $storage = null)
    {
        return $this->getViewPropertiesAsyncWithHttpInfo($name, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function getViewPropertiesAsyncWithHttpInfo($name, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->getViewPropertiesRequest($name, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'getViewProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getViewPropertiesRequest($name, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getViewProperties');
        }

        $resourcePath = '/slides/{name}/viewProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function highlightShapeRegex($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->highlightShapeRegexWithHttpInfo($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->highlightShapeRegexWithHttpInfo($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function highlightShapeRegexWithHttpInfo($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shape';
        $httpRequest = $this->highlightShapeRegexRequest($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shape', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function highlightShapeRegexAsync($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        return $this->highlightShapeRegexAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function highlightShapeRegexAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shape';
        $httpRequest = $this->highlightShapeRegexRequest($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'highlightShapeRegex'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$regex Regular expression. (required)
     * @param  string $$color Highlighting color. (required)
     * @param  bool $$wholeWordsOnly Match only whole words. (optional, default to false)
     * @param  bool $$ignoreCase True to search ignoring char case. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function highlightShapeRegexRequest($name, $slideIndex, $shapeIndex, $regex, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling highlightShapeRegex');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling highlightShapeRegex');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling highlightShapeRegex');
        }
        // verify the required parameter 'regex' is set
        if ($regex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $regex when calling highlightShapeRegex');
        }
        // verify the required parameter 'color' is set
        if ($color === null) {
            throw new \InvalidArgumentException('Missing the required parameter $color when calling highlightShapeRegex');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/highlightRegex';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($regex !== null) {
            $queryParams['regex'] = ObjectSerializer::toQueryValue($regex);
        }
        // query params
        if ($color !== null) {
            $queryParams['color'] = ObjectSerializer::toQueryValue($color);
        }
        // query params
        if ($wholeWordsOnly !== null) {
            $queryParams['wholeWordsOnly'] = ObjectSerializer::toQueryValue($wholeWordsOnly);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function highlightShapeText($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->highlightShapeTextWithHttpInfo($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->highlightShapeTextWithHttpInfo($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function highlightShapeTextWithHttpInfo($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shape';
        $httpRequest = $this->highlightShapeTextRequest($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shape', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function highlightShapeTextAsync($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        return $this->highlightShapeTextAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function highlightShapeTextAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shape';
        $httpRequest = $this->highlightShapeTextRequest($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly, $ignoreCase, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'highlightShapeText'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$text Text sample to highlight. (required)
     * @param  string $$color Highlighting color. (required)
     * @param  bool $$wholeWordsOnly Match only whole words. (optional, default to false)
     * @param  bool $$ignoreCase True to search ignoring char case. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function highlightShapeTextRequest($name, $slideIndex, $shapeIndex, $text, $color, $wholeWordsOnly = null, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling highlightShapeText');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling highlightShapeText');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling highlightShapeText');
        }
        // verify the required parameter 'text' is set
        if ($text === null) {
            throw new \InvalidArgumentException('Missing the required parameter $text when calling highlightShapeText');
        }
        // verify the required parameter 'color' is set
        if ($color === null) {
            throw new \InvalidArgumentException('Missing the required parameter $color when calling highlightShapeText');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/highlightText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($text !== null) {
            $queryParams['text'] = ObjectSerializer::toQueryValue($text);
        }
        // query params
        if ($color !== null) {
            $queryParams['color'] = ObjectSerializer::toQueryValue($color);
        }
        // query params
        if ($wholeWordsOnly !== null) {
            $queryParams['wholeWordsOnly'] = ObjectSerializer::toQueryValue($wholeWordsOnly);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function importFromHtml($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->importFromHtmlWithHttpInfo($name, $html, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->importFromHtmlWithHttpInfo($name, $html, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function importFromHtmlWithHttpInfo($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromHtmlRequest($name, $html, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function importFromHtmlAsync($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        return $this->importFromHtmlAsyncWithHttpInfo($name, $html, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function importFromHtmlAsyncWithHttpInfo($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromHtmlRequest($name, $html, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'importFromHtml'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$html HTML data. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importFromHtmlRequest($name, $html = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling importFromHtml');
        }

        $resourcePath = '/slides/{name}/fromHtml';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($html)) {
            array_push($_tempBody, $html);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function importFromPdf($name, $pdf, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->importFromPdfWithHttpInfo($name, $pdf, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->importFromPdfWithHttpInfo($name, $pdf, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function importFromPdfWithHttpInfo($name, $pdf, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromPdfRequest($name, $pdf, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function importFromPdfAsync($name, $pdf, $password = null, $folder = null, $storage = null)
    {
        return $this->importFromPdfAsyncWithHttpInfo($name, $pdf, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function importFromPdfAsyncWithHttpInfo($name, $pdf, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->importFromPdfRequest($name, $pdf, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'importFromPdf'
     *
     * @param  string $$name Document name. (required)
     * @param  \SplFileObject $$pdf PDF data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importFromPdfRequest($name, $pdf, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling importFromPdf');
        }
        // verify the required parameter 'pdf' is set
        if ($pdf === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pdf when calling importFromPdf');
        }

        $resourcePath = '/slides/{name}/fromPdf';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($pdf)) {
            array_push($_tempBody, $pdf);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function importShapesFromSvg($name, $slideIndex, $image = null, $x = null, $y = null, $width = null, $height = null, array $shapes = null, $group = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->importShapesFromSvgWithHttpInfo($name, $slideIndex, $image, $x, $y, $width, $height, $shapes, $group, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->importShapesFromSvgWithHttpInfo($name, $slideIndex, $image, $x, $y, $width, $height, $shapes, $group, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function importShapesFromSvgWithHttpInfo($name, $slideIndex, $image = null, $x = null, $y = null, $width = null, $height = null, array $shapes = null, $group = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->importShapesFromSvgRequest($name, $slideIndex, $image, $x, $y, $width, $height, $shapes, $group, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Shapes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function importShapesFromSvgAsync($name, $slideIndex, $image = null, $x = null, $y = null, $width = null, $height = null, array $shapes = null, $group = null, $password = null, $folder = null, $storage = null)
    {
        return $this->importShapesFromSvgAsyncWithHttpInfo($name, $slideIndex, $image, $x, $y, $width, $height, $shapes, $group, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function importShapesFromSvgAsyncWithHttpInfo($name, $slideIndex, $image = null, $x = null, $y = null, $width = null, $height = null, array $shapes = null, $group = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Shapes';
        $httpRequest = $this->importShapesFromSvgRequest($name, $slideIndex, $image, $x, $y, $width, $height, $shapes, $group, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'importShapesFromSvg'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \SplFileObject $$image SVG image data. (optional)
     * @param  int $$x The X coordinate of the imported group of shapes (0 is default if not specified). (optional)
     * @param  int $$y The Y coordinate of the imported group of shapes (0 is default if not specified). (optional)
     * @param  int $$width The width of the imported group of shapes (default is SVG image width). (optional)
     * @param  int $$height The height of the imported group of shapes (default is SVG image width). (optional)
     * @param  array $$shapes Indexes of shapes to import. All shapes are imported if not specified. (optional)
     * @param  bool $$group If true, the set of shapes will be imported as a one group shape. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function importShapesFromSvgRequest($name, $slideIndex, $image = null, $x = null, $y = null, $width = null, $height = null, array $shapes = null, $group = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling importShapesFromSvg');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling importShapesFromSvg');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/fromSvg';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($x !== null) {
            $queryParams['x'] = ObjectSerializer::toQueryValue($x);
        }
        // query params
        if ($y !== null) {
            $queryParams['y'] = ObjectSerializer::toQueryValue($y);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($shapes !== null) {
            $queryParams['shapes'] = ObjectSerializer::toQueryValue($shapes);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($image)) {
            array_push($_tempBody, $image);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function merge($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->mergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->mergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function mergeWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->mergeRequest($name, $request, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeAsync($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        return $this->mergeAsyncWithHttpInfo($name, $request, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->mergeRequest($name, $request, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'merge'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $$request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeRequest($name, \Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling merge');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling merge');
        }

        $resourcePath = '/slides/{name}/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function mergeAndSaveOnline($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        try {
            $this->mergeAndSaveOnlineWithHttpInfo($outPath, $files, $request, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->mergeAndSaveOnlineWithHttpInfo($outPath, $files, $request, $storage);
        } 
    }

    /**
     */
    public function mergeAndSaveOnlineWithHttpInfo($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->mergeAndSaveOnlineRequest($outPath, $files, $request, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeAndSaveOnlineAsync($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        return $this->mergeAndSaveOnlineAsyncWithHttpInfo($outPath, $files, $request, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeAndSaveOnlineAsyncWithHttpInfo($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->mergeAndSaveOnlineRequest($outPath, $files, $request, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'mergeAndSaveOnline'
     *
     * @param  string $$outPath Path to save result. (required)
     * @param  array $$files Files to merge (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $$request Merge request. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeAndSaveOnlineRequest($outPath, array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling mergeAndSaveOnline');
        }

        $resourcePath = '/slides/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        if (isset($files)) {
            $_tempBody = array_merge($_tempBody, $files);
        }
        $this->headerSelector->selectHeadersForMultipart($headerParams, ['application/json']);
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function mergeOnline(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        try {
            list($response) = $this->mergeOnlineWithHttpInfo($files, $request, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->mergeOnlineWithHttpInfo($files, $request, $storage);
            return $response;
        } 
    }

    /**
     */
    public function mergeOnlineWithHttpInfo(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->mergeOnlineRequest($files, $request, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeOnlineAsync(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        return $this->mergeOnlineAsyncWithHttpInfo($files, $request, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeOnlineAsyncWithHttpInfo(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->mergeOnlineRequest($files, $request, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'mergeOnline'
     *
     * @param  array $$files Files to merge (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $$request Merge request. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeOnlineRequest(array $files = null, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request = null, $storage = null)
    {

        $resourcePath = '/slides/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }

        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        if (isset($files)) {
            $_tempBody = array_merge($_tempBody, $files);
        }
        $this->headerSelector->selectHeadersForMultipart($headerParams, ['multipart/form-data']);
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function mergeTableCells($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCellMergeOptions $tableCellMergeOptions, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->mergeTableCellsWithHttpInfo($name, $slideIndex, $shapeIndex, $tableCellMergeOptions, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->mergeTableCellsWithHttpInfo($name, $slideIndex, $shapeIndex, $tableCellMergeOptions, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function mergeTableCellsWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCellMergeOptions $tableCellMergeOptions, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Table';
        $httpRequest = $this->mergeTableCellsRequest($name, $slideIndex, $shapeIndex, $tableCellMergeOptions, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Table', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function mergeTableCellsAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCellMergeOptions $tableCellMergeOptions, $password = null, $folder = null, $storage = null)
    {
        return $this->mergeTableCellsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $tableCellMergeOptions, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function mergeTableCellsAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCellMergeOptions $tableCellMergeOptions, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Table';
        $httpRequest = $this->mergeTableCellsRequest($name, $slideIndex, $shapeIndex, $tableCellMergeOptions, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'mergeTableCells'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\TableCellMergeOptions $$tableCellMergeOptions Merge settings. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function mergeTableCellsRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCellMergeOptions $tableCellMergeOptions, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling mergeTableCells');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling mergeTableCells');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling mergeTableCells');
        }
        // verify the required parameter 'table_cell_merge_options' is set
        if ($tableCellMergeOptions === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tableCellMergeOptions when calling mergeTableCells');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/mergeCells';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($tableCellMergeOptions)) {
            array_push($_tempBody, $tableCellMergeOptions);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function moveFile($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        try {
            $this->moveFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        }
        catch(RepeatRequestException $ex) {
            $this->moveFileWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        } 
    }

    /**
     */
    public function moveFileWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveFileAsync($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        return $this->moveFileAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveFileAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFileRequest($srcPath, $destPath, $srcStorageName, $destStorageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'moveFile'
     *
     * @param  string $$srcPath Source file path e.g. &#39;/src.ext&#39; (required)
     * @param  string $$destPath Destination file path e.g. &#39;/dest.ext&#39; (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     * @param  string $$versionId File version ID to move (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveFileRequest($srcPath, $destPath, $srcStorageName = null, $destStorageName = null, $versionId = null)
    {
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling moveFile');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling moveFile');
        }

        $resourcePath = '/slides/storage/file/move/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function moveFolder($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        try {
            $this->moveFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        }
        catch(RepeatRequestException $ex) {
            $this->moveFolderWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName);
        } 
    }

    /**
     */
    public function moveFolderWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveFolderAsync($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        return $this->moveFolderAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName, $destStorageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveFolderAsyncWithHttpInfo($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        $returnType = '';
        $httpRequest = $this->moveFolderRequest($srcPath, $destPath, $srcStorageName, $destStorageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'moveFolder'
     *
     * @param  string $$srcPath Folder path to move e.g. &#39;/folder&#39; (required)
     * @param  string $$destPath Destination folder path to move to e.g &#39;/dst&#39; (required)
     * @param  string $$srcStorageName Source storage name (optional)
     * @param  string $$destStorageName Destination storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveFolderRequest($srcPath, $destPath, $srcStorageName = null, $destStorageName = null)
    {
        // verify the required parameter 'src_path' is set
        if ($srcPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $srcPath when calling moveFolder');
        }
        // verify the required parameter 'dest_path' is set
        if ($destPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $destPath when calling moveFolder');
        }

        $resourcePath = '/slides/storage/folder/move/{srcPath}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destPath !== null) {
            $queryParams['destPath'] = ObjectSerializer::toQueryValue($destPath);
        }
        // query params
        if ($srcStorageName !== null) {
            $queryParams['srcStorageName'] = ObjectSerializer::toQueryValue($srcStorageName);
        }
        // query params
        if ($destStorageName !== null) {
            $queryParams['destStorageName'] = ObjectSerializer::toQueryValue($destStorageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "srcPath", $srcPath);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function moveSection($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->moveSectionWithHttpInfo($name, $sectionIndex, $newPosition, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->moveSectionWithHttpInfo($name, $sectionIndex, $newPosition, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function moveSectionWithHttpInfo($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->moveSectionRequest($name, $sectionIndex, $newPosition, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveSectionAsync($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        return $this->moveSectionAsyncWithHttpInfo($name, $sectionIndex, $newPosition, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveSectionAsyncWithHttpInfo($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->moveSectionRequest($name, $sectionIndex, $newPosition, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'moveSection'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$sectionIndex The position of the section to be reordered. (required)
     * @param  int $$newPosition The new position of the reordered section. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveSectionRequest($name, $sectionIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling moveSection');
        }
        // verify the required parameter 'section_index' is set
        if ($sectionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionIndex when calling moveSection');
        }
        // verify the required parameter 'new_position' is set
        if ($newPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newPosition when calling moveSection');
        }

        $resourcePath = '/slides/{name}/sections/{sectionIndex}/move';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($newPosition !== null) {
            $queryParams['newPosition'] = ObjectSerializer::toQueryValue($newPosition);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sectionIndex", $sectionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function moveSlide($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->moveSlideWithHttpInfo($name, $slideIndex, $newPosition, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->moveSlideWithHttpInfo($name, $slideIndex, $newPosition, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function moveSlideWithHttpInfo($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->moveSlideRequest($name, $slideIndex, $newPosition, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function moveSlideAsync($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        return $this->moveSlideAsyncWithHttpInfo($name, $slideIndex, $newPosition, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function moveSlideAsyncWithHttpInfo($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->moveSlideRequest($name, $slideIndex, $newPosition, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'moveSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  int $$newPosition The new position of the reordered slide. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function moveSlideRequest($name, $slideIndex, $newPosition, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling moveSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling moveSlide');
        }
        // verify the required parameter 'new_position' is set
        if ($newPosition === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newPosition when calling moveSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/move';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($newPosition !== null) {
            $queryParams['newPosition'] = ObjectSerializer::toQueryValue($newPosition);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function notesSlideExists($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->notesSlideExistsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->notesSlideExistsWithHttpInfo($name, $slideIndex, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function notesSlideExistsWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsRequest($name, $slideIndex, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\EntityExists', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function notesSlideExistsAsync($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        return $this->notesSlideExistsAsyncWithHttpInfo($name, $slideIndex, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function notesSlideExistsAsyncWithHttpInfo($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsRequest($name, $slideIndex, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'notesSlideExists'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesSlideExistsRequest($name, $slideIndex, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling notesSlideExists');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling notesSlideExists');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/exist';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function notesSlideExistsOnline($document, $slideIndex, $password = null)
    {
        try {
            list($response) = $this->notesSlideExistsOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->notesSlideExistsOnlineWithHttpInfo($document, $slideIndex, $password);
            return $response;
        } 
    }

    /**
     */
    public function notesSlideExistsOnlineWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsOnlineRequest($document, $slideIndex, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\EntityExists', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function notesSlideExistsOnlineAsync($document, $slideIndex, $password = null)
    {
        return $this->notesSlideExistsOnlineAsyncWithHttpInfo($document, $slideIndex, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function notesSlideExistsOnlineAsyncWithHttpInfo($document, $slideIndex, $password = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\EntityExists';
        $httpRequest = $this->notesSlideExistsOnlineRequest($document, $slideIndex, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'notesSlideExistsOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function notesSlideExistsOnlineRequest($document, $slideIndex, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling notesSlideExistsOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling notesSlideExistsOnline');
        }

        $resourcePath = '/slides/slides/{slideIndex}/notesSlide/exist';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function objectExists($path, $storageName = null, $versionId = null)
    {
        try {
            list($response) = $this->objectExistsWithHttpInfo($path, $storageName, $versionId);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->objectExistsWithHttpInfo($path, $storageName, $versionId);
            return $response;
        } 
    }

    /**
     */
    public function objectExistsWithHttpInfo($path, $storageName = null, $versionId = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ObjectExist';
        $httpRequest = $this->objectExistsRequest($path, $storageName, $versionId);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ObjectExist', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function objectExistsAsync($path, $storageName = null, $versionId = null)
    {
        return $this->objectExistsAsyncWithHttpInfo($path, $storageName, $versionId)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function objectExistsAsyncWithHttpInfo($path, $storageName = null, $versionId = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ObjectExist';
        $httpRequest = $this->objectExistsRequest($path, $storageName, $versionId);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'objectExists'
     *
     * @param  string $$path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39; (required)
     * @param  string $$storageName Storage name (optional)
     * @param  string $$versionId File version ID (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function objectExistsRequest($path, $storageName = null, $versionId = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling objectExists');
        }

        $resourcePath = '/slides/storage/exist/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }
        // query params
        if ($versionId !== null) {
            $queryParams['versionId'] = ObjectSerializer::toQueryValue($versionId);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function orderedMerge($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->orderedMergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->orderedMergeWithHttpInfo($name, $request, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function orderedMergeWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->orderedMergeRequest($name, $request, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function orderedMergeAsync($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        return $this->orderedMergeAsyncWithHttpInfo($name, $request, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function orderedMergeAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->orderedMergeRequest($name, $request, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'orderedMerge'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $$request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderedMergeRequest($name, \Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest $request, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling orderedMerge');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling orderedMerge');
        }

        $resourcePath = '/slides/{name}/merge';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($request)) {
            array_push($_tempBody, $request);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function pipeline(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        try {
            list($response) = $this->pipelineWithHttpInfo($pipeline, $files);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->pipelineWithHttpInfo($pipeline, $files);
            return $response;
        } 
    }

    /**
     */
    public function pipelineWithHttpInfo(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->pipelineRequest($pipeline, $files);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function pipelineAsync(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        return $this->pipelineAsyncWithHttpInfo($pipeline, $files)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function pipelineAsyncWithHttpInfo(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->pipelineRequest($pipeline, $files);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'pipeline'
     *
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Pipeline $$pipeline A Pipeline object. (required)
     * @param  array $$files Files to upload with the pipeline (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pipelineRequest(\Aspose\Slides\Cloud\Sdk\Model\Pipeline $pipeline, array $files = null)
    {
        // verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pipeline when calling pipeline');
        }

        $resourcePath = '/slides/pipeline';
        $queryParams = [];
        $headerParams = [];


        $_tempBody = [];
        if (isset($pipeline)) {
            array_push($_tempBody, $pipeline);
        }
        if (isset($files)) {
            $_tempBody = array_merge($_tempBody, $files);
        }
        $this->headerSelector->selectHeadersForMultipart($headerParams, ['multipart/form-data']);
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function reorderSlides($name, array $oldPositions = null, array $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->reorderSlidesWithHttpInfo($name, $oldPositions, $newPositions, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->reorderSlidesWithHttpInfo($name, $oldPositions, $newPositions, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function reorderSlidesWithHttpInfo($name, array $oldPositions = null, array $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->reorderSlidesRequest($name, $oldPositions, $newPositions, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slides', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function reorderSlidesAsync($name, array $oldPositions = null, array $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        return $this->reorderSlidesAsyncWithHttpInfo($name, $oldPositions, $newPositions, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function reorderSlidesAsyncWithHttpInfo($name, array $oldPositions = null, array $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slides';
        $httpRequest = $this->reorderSlidesRequest($name, $oldPositions, $newPositions, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'reorderSlides'
     *
     * @param  string $$name Document name. (required)
     * @param  array $$oldPositions A comma separated array of positions of slides to be reordered. (optional)
     * @param  array $$newPositions A comma separated array of new slide positions. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reorderSlidesRequest($name, array $oldPositions = null, array $newPositions = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling reorderSlides');
        }

        $resourcePath = '/slides/{name}/slides/reorder';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldPositions !== null) {
            $queryParams['oldPositions'] = ObjectSerializer::toQueryValue($oldPositions);
        }
        // query params
        if ($newPositions !== null) {
            $queryParams['newPositions'] = ObjectSerializer::toQueryValue($newPositions);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function replaceFont($name, $sourceFont, $targetFont, $embed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->replaceFontWithHttpInfo($name, $sourceFont, $targetFont, $embed, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replaceFontWithHttpInfo($name, $sourceFont, $targetFont, $embed, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function replaceFontWithHttpInfo($name, $sourceFont, $targetFont, $embed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->replaceFontRequest($name, $sourceFont, $targetFont, $embed, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replaceFontAsync($name, $sourceFont, $targetFont, $embed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->replaceFontAsyncWithHttpInfo($name, $sourceFont, $targetFont, $embed, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replaceFontAsyncWithHttpInfo($name, $sourceFont, $targetFont, $embed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->replaceFontRequest($name, $sourceFont, $targetFont, $embed, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'replaceFont'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$sourceFont Source font name. (required)
     * @param  string $$targetFont Target font name. (required)
     * @param  bool $$embed Embed target font. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceFontRequest($name, $sourceFont, $targetFont, $embed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceFont');
        }
        // verify the required parameter 'source_font' is set
        if ($sourceFont === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceFont when calling replaceFont');
        }
        // verify the required parameter 'target_font' is set
        if ($targetFont === null) {
            throw new \InvalidArgumentException('Missing the required parameter $targetFont when calling replaceFont');
        }

        $resourcePath = '/slides/{name}/fonts/{sourceFont}/replace/{targetFont}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($embed !== null) {
            $queryParams['embed'] = ObjectSerializer::toQueryValue($embed);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sourceFont", $sourceFont);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "targetFont", $targetFont);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function replaceFontOnline($document, $sourceFont, $targetFont, $embed = null, $password = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->replaceFontOnlineWithHttpInfo($document, $sourceFont, $targetFont, $embed, $password, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replaceFontOnlineWithHttpInfo($document, $sourceFont, $targetFont, $embed, $password, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function replaceFontOnlineWithHttpInfo($document, $sourceFont, $targetFont, $embed = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replaceFontOnlineRequest($document, $sourceFont, $targetFont, $embed, $password, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replaceFontOnlineAsync($document, $sourceFont, $targetFont, $embed = null, $password = null, $fontsFolder = null)
    {
        return $this->replaceFontOnlineAsyncWithHttpInfo($document, $sourceFont, $targetFont, $embed, $password, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replaceFontOnlineAsyncWithHttpInfo($document, $sourceFont, $targetFont, $embed = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replaceFontOnlineRequest($document, $sourceFont, $targetFont, $embed, $password, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'replaceFontOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$sourceFont Source font name. (required)
     * @param  string $$targetFont Target font name. (required)
     * @param  bool $$embed Embed target font. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceFontOnlineRequest($document, $sourceFont, $targetFont, $embed = null, $password = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling replaceFontOnline');
        }
        // verify the required parameter 'source_font' is set
        if ($sourceFont === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sourceFont when calling replaceFontOnline');
        }
        // verify the required parameter 'target_font' is set
        if ($targetFont === null) {
            throw new \InvalidArgumentException('Missing the required parameter $targetFont when calling replaceFontOnline');
        }

        $resourcePath = '/slides/fonts/{sourceFont}/replace/{targetFont}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($embed !== null) {
            $queryParams['embed'] = ObjectSerializer::toQueryValue($embed);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sourceFont", $sourceFont);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "targetFont", $targetFont);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function replacePresentationText($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->replacePresentationTextWithHttpInfo($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replacePresentationTextWithHttpInfo($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function replacePresentationTextWithHttpInfo($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentReplaceResult';
        $httpRequest = $this->replacePresentationTextRequest($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentReplaceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replacePresentationTextAsync($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        return $this->replacePresentationTextAsyncWithHttpInfo($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replacePresentationTextAsyncWithHttpInfo($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentReplaceResult';
        $httpRequest = $this->replacePresentationTextRequest($name, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'replacePresentationText'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replacePresentationTextRequest($name, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replacePresentationText');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling replacePresentationText');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling replacePresentationText');
        }

        $resourcePath = '/slides/{name}/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function replacePresentationTextOnline($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        try {
            list($response) = $this->replacePresentationTextOnlineWithHttpInfo($document, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replacePresentationTextOnlineWithHttpInfo($document, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        } 
    }

    /**
     */
    public function replacePresentationTextOnlineWithHttpInfo($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replacePresentationTextOnlineRequest($document, $oldValue, $newValue, $ignoreCase, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replacePresentationTextOnlineAsync($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        return $this->replacePresentationTextOnlineAsyncWithHttpInfo($document, $oldValue, $newValue, $ignoreCase, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replacePresentationTextOnlineAsyncWithHttpInfo($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replacePresentationTextOnlineRequest($document, $oldValue, $newValue, $ignoreCase, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'replacePresentationTextOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replacePresentationTextOnlineRequest($document, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling replacePresentationTextOnline');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling replacePresentationTextOnline');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling replacePresentationTextOnline');
        }

        $resourcePath = '/slides/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function replaceSlideText($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->replaceSlideTextWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replaceSlideTextWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function replaceSlideTextWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideReplaceResult';
        $httpRequest = $this->replaceSlideTextRequest($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideReplaceResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replaceSlideTextAsync($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        return $this->replaceSlideTextAsyncWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replaceSlideTextAsyncWithHttpInfo($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideReplaceResult';
        $httpRequest = $this->replaceSlideTextRequest($name, $slideIndex, $oldValue, $newValue, $ignoreCase, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'replaceSlideText'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceSlideTextRequest($name, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling replaceSlideText');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling replaceSlideText');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling replaceSlideText');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling replaceSlideText');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function replaceSlideTextOnline($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        try {
            list($response) = $this->replaceSlideTextOnlineWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->replaceSlideTextOnlineWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);
            return $response;
        } 
    }

    /**
     */
    public function replaceSlideTextOnlineWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replaceSlideTextOnlineRequest($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function replaceSlideTextOnlineAsync($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        return $this->replaceSlideTextOnlineAsyncWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function replaceSlideTextOnlineAsyncWithHttpInfo($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->replaceSlideTextOnlineRequest($document, $slideIndex, $oldValue, $newValue, $ignoreCase, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'replaceSlideTextOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Index of target slide. (required)
     * @param  string $$oldValue Text value to be replaced. (required)
     * @param  string $$newValue Text value to replace with. (required)
     * @param  bool $$ignoreCase True if character case must be ignored. (optional, default to false)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function replaceSlideTextOnlineRequest($document, $slideIndex, $oldValue, $newValue, $ignoreCase = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling replaceSlideTextOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling replaceSlideTextOnline');
        }
        // verify the required parameter 'old_value' is set
        if ($oldValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $oldValue when calling replaceSlideTextOnline');
        }
        // verify the required parameter 'new_value' is set
        if ($newValue === null) {
            throw new \InvalidArgumentException('Missing the required parameter $newValue when calling replaceSlideTextOnline');
        }

        $resourcePath = '/slides/slides/{slideIndex}/replaceText';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($oldValue !== null) {
            $queryParams['oldValue'] = ObjectSerializer::toQueryValue($oldValue);
        }
        // query params
        if ($newValue !== null) {
            $queryParams['newValue'] = ObjectSerializer::toQueryValue($newValue);
        }
        // query params
        if ($ignoreCase !== null) {
            $queryParams['ignoreCase'] = ObjectSerializer::toQueryValue($ignoreCase);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function savePortionAsMathMl($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password = null, $folder = null, $storage = null)
    {
        try {
            $this->savePortionAsMathMlWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password, $folder, $storage);
        }
        catch(RepeatRequestException $ex) {
            $this->savePortionAsMathMlWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password, $folder, $storage);
        } 
    }

    /**
     */
    public function savePortionAsMathMlWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->savePortionAsMathMlRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function savePortionAsMathMlAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password = null, $folder = null, $storage = null)
    {
        return $this->savePortionAsMathMlAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function savePortionAsMathMlAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password = null, $folder = null, $storage = null)
    {
        $returnType = '';
        $httpRequest = $this->savePortionAsMathMlRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'savePortionAsMathMl'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function savePortionAsMathMlRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $outPath, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling savePortionAsMathMl');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling savePortionAsMathMl');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling savePortionAsMathMl');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling savePortionAsMathMl');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling savePortionAsMathMl');
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling savePortionAsMathMl');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/mathml';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function savePresentation($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        try {
            $this->savePresentationWithHttpInfo($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder, $slides);
        }
        catch(RepeatRequestException $ex) {
            $this->savePresentationWithHttpInfo($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder, $slides);
        } 
    }

    /**
     */
    public function savePresentationWithHttpInfo($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        $returnType = '';
        $httpRequest = $this->savePresentationRequest($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder, $slides);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function savePresentationAsync($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        return $this->savePresentationAsyncWithHttpInfo($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder, $slides)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function savePresentationAsyncWithHttpInfo($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        $returnType = '';
        $httpRequest = $this->savePresentationRequest($name, $format, $outPath, $options, $password, $folder, $storage, $fontsFolder, $slides);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'savePresentation'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$format Export format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     * @param  array $$slides The indices of the slides to be saved. If not specified, all slides are saved by default. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function savePresentationRequest($name, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, array $slides = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling savePresentation');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling savePresentation');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling savePresentation');
        }

        $resourcePath = '/slides/{name}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($slides !== null) {
            $queryParams['slides'] = ObjectSerializer::toQueryValue($slides);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function saveShape($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        try {
            $this->saveShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        }
        catch(RepeatRequestException $ex) {
            $this->saveShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        } 
    }

    /**
     */
    public function saveShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveShapeAsync($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        return $this->saveShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'saveShape'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveShapeRequest($name, $slideIndex, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling saveShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling saveShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling saveShape');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling saveShape');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling saveShape');
        }
        // verify the value of enum parameter 'bounds' is valid
        if ($bounds != null && !in_array(strtolower($bounds), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $bounds . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function saveShapeOnline($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        try {
            $this->saveShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);
        }
        catch(RepeatRequestException $ex) {
            $this->saveShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);
        } 
    }

    /**
     */
    public function saveShapeOnlineWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveShapeOnlineAsync($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        return $this->saveShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveShapeOnlineAsyncWithHttpInfo($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        $returnType = '';
        $httpRequest = $this->saveShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX, $scaleY, $bounds, $password, $storage, $fontsFolder, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'saveShapeOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveShapeOnlineRequest($document, $slideIndex, $shapeIndex, $format, $outPath, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling saveShapeOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling saveShapeOnline');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling saveShapeOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling saveShapeOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling saveShapeOnline');
        }
        // verify the value of enum parameter 'bounds' is valid
        if ($bounds != null && !in_array(strtolower($bounds), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $bounds . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function saveSlide($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            $this->saveSlideWithHttpInfo($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        }
        catch(RepeatRequestException $ex) {
            $this->saveSlideWithHttpInfo($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        } 
    }

    /**
     */
    public function saveSlideWithHttpInfo($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideRequest($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveSlideAsync($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->saveSlideAsyncWithHttpInfo($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveSlideAsyncWithHttpInfo($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideRequest($name, $slideIndex, $format, $outPath, $options, $width, $height, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'saveSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  string $$outPath Path to upload the output file to. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  int $$width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveSlideRequest($name, $slideIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $width = null, $height = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling saveSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling saveSlide');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling saveSlide');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling saveSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function saveSlideOnline($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        try {
            $this->saveSlideOnlineWithHttpInfo($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder, $options);
        }
        catch(RepeatRequestException $ex) {
            $this->saveSlideOnlineWithHttpInfo($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder, $options);
        } 
    }

    /**
     */
    public function saveSlideOnlineWithHttpInfo($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideOnlineRequest($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder, $options);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveSlideOnlineAsync($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        return $this->saveSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveSlideOnlineAsyncWithHttpInfo($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSlideOnlineRequest($document, $slideIndex, $format, $outPath, $width, $height, $password, $storage, $fontsFolder, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'saveSlideOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$format Output file format. (required)
     * @param  string $$outPath Path to save result. (required)
     * @param  int $$width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  int $$height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. (optional, default to 0)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Storage folder containing custom fonts to be used with the document. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveSlideOnlineRequest($document, $slideIndex, $format, $outPath, $width = null, $height = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling saveSlideOnline');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling saveSlideOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling saveSlideOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling saveSlideOnline');
        }

        $resourcePath = '/slides/slides/{slideIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function saveSpecialSlideShape($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        try {
            $this->saveSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        }
        catch(RepeatRequestException $ex) {
            $this->saveSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        } 
    }

    /**
     */
    public function saveSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            return [null, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function saveSpecialSlideShapeAsync($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        return $this->saveSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function saveSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        $returnType = '';
        $httpRequest = $this->saveSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, $options, $scaleX, $scaleY, $bounds, $password, $folder, $storage, $fontsFolder, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'saveSpecialSlideShape'
     *
     * @param  string $$name Presentation name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Index of shape starting from 1 (required)
     * @param  string $$format Export picture format. (required)
     * @param  string $$outPath Output path. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $$options export options (optional)
     * @param  float $$scaleX X scale ratio. (optional, default to 0.0)
     * @param  float $$scaleY Y scale ratio. (optional, default to 0.0)
     * @param  string $$bounds Shape thumbnail bounds type. (optional, default to 1)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Presentation folder. (optional)
     * @param  string $$storage Presentation storage. (optional)
     * @param  string $$fontsFolder Fonts folder. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saveSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $format, $outPath, \Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions $options = null, $scaleX = null, $scaleY = null, $bounds = null, $password = null, $folder = null, $storage = null, $fontsFolder = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling saveSpecialSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling saveSpecialSlideShape');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling saveSpecialSlideShape');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling saveSpecialSlideShape');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling saveSpecialSlideShape');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeExportFormat::getAllowableEnumValues()));
        }
        // verify the required parameter 'out_path' is set
        if ($outPath === null) {
            throw new \InvalidArgumentException('Missing the required parameter $outPath when calling saveSpecialSlideShape');
        }
        // verify the value of enum parameter 'bounds' is valid
        if ($bounds != null && !in_array(strtolower($bounds), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $bounds . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ShapeThumbnailBounds::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($outPath !== null) {
            $queryParams['outPath'] = ObjectSerializer::toQueryValue($outPath);
        }
        // query params
        if ($scaleX !== null) {
            $queryParams['scaleX'] = ObjectSerializer::toQueryValue($scaleX);
        }
        // query params
        if ($scaleY !== null) {
            $queryParams['scaleY'] = ObjectSerializer::toQueryValue($scaleY);
        }
        // query params
        if ($bounds !== null) {
            $queryParams['bounds'] = ObjectSerializer::toQueryValue($bounds);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setAnimation($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setAnimationWithHttpInfo($name, $slideIndex, $animation, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setAnimationWithHttpInfo($name, $slideIndex, $animation, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setAnimationWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->setAnimationRequest($name, $slideIndex, $animation, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setAnimationAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        return $this->setAnimationAsyncWithHttpInfo($name, $slideIndex, $animation, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setAnimationAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->setAnimationRequest($name, $slideIndex, $animation, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $$animation Animation DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setAnimationRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setAnimation');
        }
        // verify the required parameter 'animation' is set
        if ($animation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $animation when calling setAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($animation)) {
            array_push($_tempBody, $animation);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setBackground($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setBackgroundWithHttpInfo($name, $slideIndex, $background, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setBackgroundWithHttpInfo($name, $slideIndex, $background, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setBackgroundWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundRequest($name, $slideIndex, $background, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setBackgroundAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        return $this->setBackgroundAsyncWithHttpInfo($name, $slideIndex, $background, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setBackgroundAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundRequest($name, $slideIndex, $background, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setBackground'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $$background Slide background update data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBackgroundRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\SlideBackground $background, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setBackground');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setBackground');
        }
        // verify the required parameter 'background' is set
        if ($background === null) {
            throw new \InvalidArgumentException('Missing the required parameter $background when calling setBackground');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/background';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($background)) {
            array_push($_tempBody, $background);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setBackgroundColor($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setBackgroundColorWithHttpInfo($name, $slideIndex, $color, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setBackgroundColorWithHttpInfo($name, $slideIndex, $color, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setBackgroundColorWithHttpInfo($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundColorRequest($name, $slideIndex, $color, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setBackgroundColorAsync($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        return $this->setBackgroundColorAsyncWithHttpInfo($name, $slideIndex, $color, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setBackgroundColorAsyncWithHttpInfo($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground';
        $httpRequest = $this->setBackgroundColorRequest($name, $slideIndex, $color, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setBackgroundColor'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  string $$color Slide background target color in RRGGBB format. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setBackgroundColorRequest($name, $slideIndex, $color, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setBackgroundColor');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setBackgroundColor');
        }
        // verify the required parameter 'color' is set
        if ($color === null) {
            throw new \InvalidArgumentException('Missing the required parameter $color when calling setBackgroundColor');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/backgroundColor';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($color !== null) {
            $queryParams['color'] = ObjectSerializer::toQueryValue($color);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setChartAxis($name, $slideIndex, $shapeIndex, $axisType, \Aspose\Slides\Cloud\Sdk\Model\Axis $axis, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setChartAxisWithHttpInfo($name, $slideIndex, $shapeIndex, $axisType, $axis, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setChartAxisWithHttpInfo($name, $slideIndex, $shapeIndex, $axisType, $axis, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setChartAxisWithHttpInfo($name, $slideIndex, $shapeIndex, $axisType, \Aspose\Slides\Cloud\Sdk\Model\Axis $axis, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Axis';
        $httpRequest = $this->setChartAxisRequest($name, $slideIndex, $shapeIndex, $axisType, $axis, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Axis', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setChartAxisAsync($name, $slideIndex, $shapeIndex, $axisType, \Aspose\Slides\Cloud\Sdk\Model\Axis $axis, $password = null, $folder = null, $storage = null)
    {
        return $this->setChartAxisAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $axisType, $axis, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setChartAxisAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $axisType, \Aspose\Slides\Cloud\Sdk\Model\Axis $axis, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Axis';
        $httpRequest = $this->setChartAxisRequest($name, $slideIndex, $shapeIndex, $axisType, $axis, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setChartAxis'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$axisType Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Axis $$axis Axis DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setChartAxisRequest($name, $slideIndex, $shapeIndex, $axisType, \Aspose\Slides\Cloud\Sdk\Model\Axis $axis, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setChartAxis');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setChartAxis');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling setChartAxis');
        }
        // verify the required parameter 'axis_type' is set
        if ($axisType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $axisType when calling setChartAxis');
        }
        // verify the value of enum parameter 'axisType' is valid
        if (!in_array(strtolower($axisType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\AxisType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $axisType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\AxisType::getAllowableEnumValues()));
        }
        // verify the required parameter 'axis' is set
        if ($axis === null) {
            throw new \InvalidArgumentException('Missing the required parameter $axis when calling setChartAxis');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{axisType}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "axisType", $axisType);
        $_tempBody = [];
        if (isset($axis)) {
            array_push($_tempBody, $axis);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setChartLegend($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Legend $legend, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setChartLegendWithHttpInfo($name, $slideIndex, $shapeIndex, $legend, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setChartLegendWithHttpInfo($name, $slideIndex, $shapeIndex, $legend, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setChartLegendWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Legend $legend, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Legend';
        $httpRequest = $this->setChartLegendRequest($name, $slideIndex, $shapeIndex, $legend, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Legend', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setChartLegendAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Legend $legend, $password = null, $folder = null, $storage = null)
    {
        return $this->setChartLegendAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $legend, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setChartLegendAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Legend $legend, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Legend';
        $httpRequest = $this->setChartLegendRequest($name, $slideIndex, $shapeIndex, $legend, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setChartLegend'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Legend $$legend Chart legend DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setChartLegendRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\Legend $legend, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setChartLegend');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setChartLegend');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling setChartLegend');
        }
        // verify the required parameter 'legend' is set
        if ($legend === null) {
            throw new \InvalidArgumentException('Missing the required parameter $legend when calling setChartLegend');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/legend';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($legend)) {
            array_push($_tempBody, $legend);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setChartSeriesGroup($name, $slideIndex, $shapeIndex, $seriesGroupIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup $seriesGroup, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setChartSeriesGroupWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesGroupIndex, $seriesGroup, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setChartSeriesGroupWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesGroupIndex, $seriesGroup, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setChartSeriesGroupWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesGroupIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup $seriesGroup, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->setChartSeriesGroupRequest($name, $slideIndex, $shapeIndex, $seriesGroupIndex, $seriesGroup, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setChartSeriesGroupAsync($name, $slideIndex, $shapeIndex, $seriesGroupIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup $seriesGroup, $password = null, $folder = null, $storage = null)
    {
        return $this->setChartSeriesGroupAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesGroupIndex, $seriesGroup, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setChartSeriesGroupAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesGroupIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup $seriesGroup, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->setChartSeriesGroupRequest($name, $slideIndex, $shapeIndex, $seriesGroupIndex, $seriesGroup, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setChartSeriesGroup'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  int $$seriesGroupIndex Series group index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup $$seriesGroup Series group DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setChartSeriesGroupRequest($name, $slideIndex, $shapeIndex, $seriesGroupIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup $seriesGroup, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setChartSeriesGroup');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setChartSeriesGroup');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling setChartSeriesGroup');
        }
        // verify the required parameter 'series_group_index' is set
        if ($seriesGroupIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesGroupIndex when calling setChartSeriesGroup');
        }
        // verify the required parameter 'series_group' is set
        if ($seriesGroup === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesGroup when calling setChartSeriesGroup');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/seriesGroup/{seriesGroupIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesGroupIndex", $seriesGroupIndex);
        $_tempBody = [];
        if (isset($seriesGroup)) {
            array_push($_tempBody, $seriesGroup);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setChartWall($name, $slideIndex, $shapeIndex, $chartWallType, \Aspose\Slides\Cloud\Sdk\Model\ChartWall $chartWall, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setChartWallWithHttpInfo($name, $slideIndex, $shapeIndex, $chartWallType, $chartWall, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setChartWallWithHttpInfo($name, $slideIndex, $shapeIndex, $chartWallType, $chartWall, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setChartWallWithHttpInfo($name, $slideIndex, $shapeIndex, $chartWallType, \Aspose\Slides\Cloud\Sdk\Model\ChartWall $chartWall, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ChartWall';
        $httpRequest = $this->setChartWallRequest($name, $slideIndex, $shapeIndex, $chartWallType, $chartWall, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ChartWall', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setChartWallAsync($name, $slideIndex, $shapeIndex, $chartWallType, \Aspose\Slides\Cloud\Sdk\Model\ChartWall $chartWall, $password = null, $folder = null, $storage = null)
    {
        return $this->setChartWallAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $chartWallType, $chartWall, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setChartWallAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $chartWallType, \Aspose\Slides\Cloud\Sdk\Model\ChartWall $chartWall, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ChartWall';
        $httpRequest = $this->setChartWallRequest($name, $slideIndex, $shapeIndex, $chartWallType, $chartWall, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setChartWall'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  string $$chartWallType Chart wall type: floor, sideWall or backWall. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ChartWall $$chartWall Chart wall DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setChartWallRequest($name, $slideIndex, $shapeIndex, $chartWallType, \Aspose\Slides\Cloud\Sdk\Model\ChartWall $chartWall, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setChartWall');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setChartWall');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling setChartWall');
        }
        // verify the required parameter 'chart_wall_type' is set
        if ($chartWallType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chartWallType when calling setChartWall');
        }
        // verify the value of enum parameter 'chartWallType' is valid
        if (!in_array(strtolower($chartWallType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\ChartWallType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $chartWallType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\ChartWallType::getAllowableEnumValues()));
        }
        // verify the required parameter 'chart_wall' is set
        if ($chartWall === null) {
            throw new \InvalidArgumentException('Missing the required parameter $chartWall when calling setChartWall');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{chartWallType}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "chartWallType", $chartWallType);
        $_tempBody = [];
        if (isset($chartWall)) {
            array_push($_tempBody, $chartWall);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setDocumentProperties($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setDocumentPropertiesWithHttpInfo($name, $properties, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setDocumentPropertiesWithHttpInfo($name, $properties, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setDocumentPropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->setDocumentPropertiesRequest($name, $properties, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setDocumentPropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        return $this->setDocumentPropertiesAsyncWithHttpInfo($name, $properties, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setDocumentPropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties';
        $httpRequest = $this->setDocumentPropertiesRequest($name, $properties, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setDocumentProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $$properties New properties. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setDocumentPropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperties $properties, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setDocumentProperties');
        }
        // verify the required parameter 'properties' is set
        if ($properties === null) {
            throw new \InvalidArgumentException('Missing the required parameter $properties when calling setDocumentProperties');
        }

        $resourcePath = '/slides/{name}/documentproperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($properties)) {
            array_push($_tempBody, $properties);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function setDocumentProperty($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setDocumentPropertyWithHttpInfo($name, $propertyName, $property, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setDocumentPropertyWithHttpInfo($name, $propertyName, $property, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setDocumentPropertyWithHttpInfo($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->setDocumentPropertyRequest($name, $propertyName, $property, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setDocumentPropertyAsync($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        return $this->setDocumentPropertyAsyncWithHttpInfo($name, $propertyName, $property, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setDocumentPropertyAsyncWithHttpInfo($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty';
        $httpRequest = $this->setDocumentPropertyRequest($name, $propertyName, $property, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setDocumentProperty'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$propertyName The property name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $$property Property with the value. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setDocumentPropertyRequest($name, $propertyName, \Aspose\Slides\Cloud\Sdk\Model\DocumentProperty $property, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setDocumentProperty');
        }
        // verify the required parameter 'property_name' is set
        if ($propertyName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $propertyName when calling setDocumentProperty');
        }
        // verify the required parameter 'property' is set
        if ($property === null) {
            throw new \InvalidArgumentException('Missing the required parameter $property when calling setDocumentProperty');
        }

        $resourcePath = '/slides/{name}/documentproperties/{propertyName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "propertyName", $propertyName);
        $_tempBody = [];
        if (isset($property)) {
            array_push($_tempBody, $property);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setEmbeddedFont($name, $fontName, $onlyUsed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->setEmbeddedFontWithHttpInfo($name, $fontName, $onlyUsed, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setEmbeddedFontWithHttpInfo($name, $fontName, $onlyUsed, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function setEmbeddedFontWithHttpInfo($name, $fontName, $onlyUsed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->setEmbeddedFontRequest($name, $fontName, $onlyUsed, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setEmbeddedFontAsync($name, $fontName, $onlyUsed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->setEmbeddedFontAsyncWithHttpInfo($name, $fontName, $onlyUsed, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setEmbeddedFontAsyncWithHttpInfo($name, $fontName, $onlyUsed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->setEmbeddedFontRequest($name, $fontName, $onlyUsed, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setEmbeddedFont'
     *
     * @param  string $$name Document name. (required)
     * @param  string $$fontName Font name. (required)
     * @param  bool $$onlyUsed Only used characters will be embedded. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setEmbeddedFontRequest($name, $fontName, $onlyUsed = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setEmbeddedFont');
        }
        // verify the required parameter 'font_name' is set
        if ($fontName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fontName when calling setEmbeddedFont');
        }

        $resourcePath = '/slides/{name}/fonts/embedded/{fontName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($onlyUsed !== null) {
            $queryParams['onlyUsed'] = ObjectSerializer::toQueryValue($onlyUsed);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "fontName", $fontName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function setEmbeddedFontFromRequest($font, $name, $onlyUsed = null, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setEmbeddedFontFromRequestWithHttpInfo($font, $name, $onlyUsed, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setEmbeddedFontFromRequestWithHttpInfo($font, $name, $onlyUsed, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setEmbeddedFontFromRequestWithHttpInfo($font, $name, $onlyUsed = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->setEmbeddedFontFromRequestRequest($font, $name, $onlyUsed, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FontsData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setEmbeddedFontFromRequestAsync($font, $name, $onlyUsed = null, $password = null, $folder = null, $storage = null)
    {
        return $this->setEmbeddedFontFromRequestAsyncWithHttpInfo($font, $name, $onlyUsed, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setEmbeddedFontFromRequestAsyncWithHttpInfo($font, $name, $onlyUsed = null, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FontsData';
        $httpRequest = $this->setEmbeddedFontFromRequestRequest($font, $name, $onlyUsed, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setEmbeddedFontFromRequest'
     *
     * @param  \SplFileObject $$font Font data. (required)
     * @param  string $$name Document name. (required)
     * @param  bool $$onlyUsed Only used characters will be embedded. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setEmbeddedFontFromRequestRequest($font, $name, $onlyUsed = null, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'font' is set
        if ($font === null) {
            throw new \InvalidArgumentException('Missing the required parameter $font when calling setEmbeddedFontFromRequest');
        }
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setEmbeddedFontFromRequest');
        }

        $resourcePath = '/slides/{name}/fonts/embedded';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($onlyUsed !== null) {
            $queryParams['onlyUsed'] = ObjectSerializer::toQueryValue($onlyUsed);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($font)) {
            array_push($_tempBody, $font);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function setEmbeddedFontFromRequestOnline($document, $font, $onlyUsed = null, $password = null)
    {
        try {
            list($response) = $this->setEmbeddedFontFromRequestOnlineWithHttpInfo($document, $font, $onlyUsed, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setEmbeddedFontFromRequestOnlineWithHttpInfo($document, $font, $onlyUsed, $password);
            return $response;
        } 
    }

    /**
     */
    public function setEmbeddedFontFromRequestOnlineWithHttpInfo($document, $font, $onlyUsed = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setEmbeddedFontFromRequestOnlineRequest($document, $font, $onlyUsed, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setEmbeddedFontFromRequestOnlineAsync($document, $font, $onlyUsed = null, $password = null)
    {
        return $this->setEmbeddedFontFromRequestOnlineAsyncWithHttpInfo($document, $font, $onlyUsed, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setEmbeddedFontFromRequestOnlineAsyncWithHttpInfo($document, $font, $onlyUsed = null, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setEmbeddedFontFromRequestOnlineRequest($document, $font, $onlyUsed, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setEmbeddedFontFromRequestOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \SplFileObject $$font Font data. (required)
     * @param  bool $$onlyUsed Only used characters will be embedded. (optional, default to false)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setEmbeddedFontFromRequestOnlineRequest($document, $font, $onlyUsed = null, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling setEmbeddedFontFromRequestOnline');
        }
        // verify the required parameter 'font' is set
        if ($font === null) {
            throw new \InvalidArgumentException('Missing the required parameter $font when calling setEmbeddedFontFromRequestOnline');
        }

        $resourcePath = '/slides/fonts/embedded';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($onlyUsed !== null) {
            $queryParams['onlyUsed'] = ObjectSerializer::toQueryValue($onlyUsed);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        if (isset($font)) {
            array_push($_tempBody, $font);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function setEmbeddedFontOnline($document, $fontName, $onlyUsed = null, $password = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->setEmbeddedFontOnlineWithHttpInfo($document, $fontName, $onlyUsed, $password, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setEmbeddedFontOnlineWithHttpInfo($document, $fontName, $onlyUsed, $password, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function setEmbeddedFontOnlineWithHttpInfo($document, $fontName, $onlyUsed = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setEmbeddedFontOnlineRequest($document, $fontName, $onlyUsed, $password, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setEmbeddedFontOnlineAsync($document, $fontName, $onlyUsed = null, $password = null, $fontsFolder = null)
    {
        return $this->setEmbeddedFontOnlineAsyncWithHttpInfo($document, $fontName, $onlyUsed, $password, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setEmbeddedFontOnlineAsyncWithHttpInfo($document, $fontName, $onlyUsed = null, $password = null, $fontsFolder = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setEmbeddedFontOnlineRequest($document, $fontName, $onlyUsed, $password, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setEmbeddedFontOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$fontName Font name. (required)
     * @param  bool $$onlyUsed Only used characters will be embedded. (optional, default to false)
     * @param  string $$password Document password. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setEmbeddedFontOnlineRequest($document, $fontName, $onlyUsed = null, $password = null, $fontsFolder = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling setEmbeddedFontOnline');
        }
        // verify the required parameter 'font_name' is set
        if ($fontName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fontName when calling setEmbeddedFontOnline');
        }

        $resourcePath = '/slides/fonts/embedded/{fontName}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($onlyUsed !== null) {
            $queryParams['onlyUsed'] = ObjectSerializer::toQueryValue($onlyUsed);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "fontName", $fontName);
        $_tempBody = [];
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function setNotesSlideHeaderFooter($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setNotesSlideHeaderFooterWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->setNotesSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setNotesSlideHeaderFooterAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setNotesSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter';
        $httpRequest = $this->setNotesSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setNotesSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $$dto Header/footer to set. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setNotesSlideHeaderFooterRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setNotesSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setNotesSlideHeaderFooter');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setNotesSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setPresentationHeaderFooter($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setPresentationHeaderFooterWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setPresentationHeaderFooterWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setPresentationHeaderFooterWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->setPresentationHeaderFooterRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Document', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setPresentationHeaderFooterAsync($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setPresentationHeaderFooterAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setPresentationHeaderFooterAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Document';
        $httpRequest = $this->setPresentationHeaderFooterRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setPresentationHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $$dto HeaderFooter instance. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setPresentationHeaderFooterRequest($name, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setPresentationHeaderFooter');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setPresentationHeaderFooter');
        }

        $resourcePath = '/slides/{name}/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setProtection($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setProtectionWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setProtectionWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setProtectionWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->setProtectionRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setProtectionAsync($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setProtectionAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setProtectionAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties';
        $httpRequest = $this->setProtectionRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setProtection'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $$dto Protection properties. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProtectionRequest($name, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setProtection');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setProtection');
        }

        $resourcePath = '/slides/{name}/protection';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setProtectionOnline($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        try {
            list($response) = $this->setProtectionOnlineWithHttpInfo($document, $dto, $password);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setProtectionOnlineWithHttpInfo($document, $dto, $password);
            return $response;
        } 
    }

    /**
     */
    public function setProtectionOnlineWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setProtectionOnlineRequest($document, $dto, $password);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setProtectionOnlineAsync($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        return $this->setProtectionOnlineAsyncWithHttpInfo($document, $dto, $password)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setProtectionOnlineAsyncWithHttpInfo($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->setProtectionOnlineRequest($document, $dto, $password);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setProtectionOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $$dto Protection properties. (required)
     * @param  string $$password Document password. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setProtectionOnlineRequest($document, \Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties $dto, $password = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling setProtectionOnline');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setProtectionOnline');
        }

        $resourcePath = '/slides/protection';
        $queryParams = [];
        $headerParams = [];

        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setSections($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSectionsWithHttpInfo($name, $sections, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSectionsWithHttpInfo($name, $sections, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSectionsWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->setSectionsRequest($name, $sections, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSectionsAsync($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        return $this->setSectionsAsyncWithHttpInfo($name, $sections, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSectionsAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->setSectionsRequest($name, $sections, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setSections'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Sections $$sections Sections DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSectionsRequest($name, \Aspose\Slides\Cloud\Sdk\Model\Sections $sections, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setSections');
        }
        // verify the required parameter 'sections' is set
        if ($sections === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sections when calling setSections');
        }

        $resourcePath = '/slides/{name}/sections';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($sections)) {
            array_push($_tempBody, $sections);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setShapeGeometryPath($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\GeometryPaths $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setShapeGeometryPathWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setShapeGeometryPathWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setShapeGeometryPathWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\GeometryPaths $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->setShapeGeometryPathRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setShapeGeometryPathAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\GeometryPaths $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setShapeGeometryPathAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setShapeGeometryPathAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\GeometryPaths $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->setShapeGeometryPathRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setShapeGeometryPath'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\GeometryPaths $$dto Geometry paths DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setShapeGeometryPathRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\GeometryPaths $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setShapeGeometryPath');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setShapeGeometryPath');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling setShapeGeometryPath');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setShapeGeometryPath');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/geometryPath';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function setSlideHeaderFooter($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSlideHeaderFooterWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSlideHeaderFooterWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->setSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSlideHeaderFooterAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSlideHeaderFooterAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter';
        $httpRequest = $this->setSlideHeaderFooterRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setSlideHeaderFooter'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex The position of the slide to be reordered. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $$dto Footer to set. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSlideHeaderFooterRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\HeaderFooter $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setSlideHeaderFooter');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setSlideHeaderFooter');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setSlideHeaderFooter');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/headerFooter';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setSlideProperties($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSlidePropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSlidePropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSlidePropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->setSlidePropertiesRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSlidePropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setSlidePropertiesAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSlidePropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties';
        $httpRequest = $this->setSlidePropertiesRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setSlideProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $$dto The view properties data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSlidePropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\SlideProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setSlideProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setSlideProperties');
        }

        $resourcePath = '/slides/{name}/slideProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setSlideShowProperties($name, \Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSlideShowPropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSlideShowPropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSlideShowPropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties';
        $httpRequest = $this->setSlideShowPropertiesRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSlideShowPropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setSlideShowPropertiesAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSlideShowPropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties';
        $httpRequest = $this->setSlideShowPropertiesRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setSlideShowProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties $$dto The slide show properties data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSlideShowPropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setSlideShowProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setSlideShowProperties');
        }

        $resourcePath = '/slides/{name}/slideShowProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setSpecialSlideAnimation($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $animation, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, $animation, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setSpecialSlideAnimationWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->setSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $animation, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setSpecialSlideAnimationAsync($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        return $this->setSpecialSlideAnimationAsyncWithHttpInfo($name, $slideIndex, $slideType, $animation, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setSpecialSlideAnimationAsyncWithHttpInfo($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->setSpecialSlideAnimationRequest($name, $slideIndex, $slideType, $animation, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setSpecialSlideAnimation'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $$animation Animation DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setSpecialSlideAnimationRequest($name, $slideIndex, $slideType, \Aspose\Slides\Cloud\Sdk\Model\SlideAnimation $animation, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setSpecialSlideAnimation');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling setSpecialSlideAnimation');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling setSpecialSlideAnimation');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'animation' is set
        if ($animation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $animation when calling setSpecialSlideAnimation');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $_tempBody = [];
        if (isset($animation)) {
            array_push($_tempBody, $animation);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function setViewProperties($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->setViewPropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->setViewPropertiesWithHttpInfo($name, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function setViewPropertiesWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->setViewPropertiesRequest($name, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function setViewPropertiesAsync($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->setViewPropertiesAsyncWithHttpInfo($name, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function setViewPropertiesAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties';
        $httpRequest = $this->setViewPropertiesRequest($name, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'setViewProperties'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $$dto The view properties data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setViewPropertiesRequest($name, \Aspose\Slides\Cloud\Sdk\Model\ViewProperties $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling setViewProperties');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling setViewProperties');
        }

        $resourcePath = '/slides/{name}/viewProperties';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function split($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        try {
            list($response) = $this->splitWithHttpInfo($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitWithHttpInfo($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);
            return $response;
        } 
    }

    /**
     */
    public function splitWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitRequest($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitAsync($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        return $this->splitAsyncWithHttpInfo($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitAsyncWithHttpInfo($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitRequest($name, $options, $format, $width, $height, $from, $to, $destFolder, $password, $folder, $storage, $fontsFolder);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'split'
     *
     * @param  string $$name Document name. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     * @param  string $$format Export format. Default value is jpeg. (optional, default to 0)
     * @param  int $$width The width of created images. (optional)
     * @param  int $$height The height of created images. (optional)
     * @param  int $$from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. (optional)
     * @param  int $$to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. (optional)
     * @param  string $$destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitRequest($name, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null, $format = null, $width = null, $height = null, $from = null, $to = null, $destFolder = null, $password = null, $folder = null, $storage = null, $fontsFolder = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling split');
        }
        // verify the value of enum parameter 'format' is valid
        if ($format != null && !in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/{name}/split';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toQueryValue($format);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($destFolder !== null) {
            $queryParams['destFolder'] = ObjectSerializer::toQueryValue($destFolder);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function splitAndSaveOnline($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        try {
            list($response) = $this->splitAndSaveOnlineWithHttpInfo($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitAndSaveOnlineWithHttpInfo($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);
            return $response;
        } 
    }

    /**
     */
    public function splitAndSaveOnlineWithHttpInfo($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitAndSaveOnlineRequest($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitAndSaveOnlineAsync($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        return $this->splitAndSaveOnlineAsyncWithHttpInfo($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitAndSaveOnlineAsyncWithHttpInfo($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SplitDocumentResult';
        $httpRequest = $this->splitAndSaveOnlineRequest($document, $format, $destFolder, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'splitAndSaveOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format ExportFormat (required)
     * @param  string $$destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. (optional, default to )
     * @param  int $$width Slide width. (optional)
     * @param  int $$height Slide height. (optional)
     * @param  int $$from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. (optional)
     * @param  int $$to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitAndSaveOnlineRequest($document, $format, $destFolder = null, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling splitAndSaveOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling splitAndSaveOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/split/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($destFolder !== null) {
            $queryParams['destFolder'] = ObjectSerializer::toQueryValue($destFolder);
        }
        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function splitOnline($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        try {
            list($response) = $this->splitOnlineWithHttpInfo($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitOnlineWithHttpInfo($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);
            return $response;
        } 
    }

    /**
     */
    public function splitOnlineWithHttpInfo($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->splitOnlineRequest($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody; //stream goes to serializer
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitOnlineAsync($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        return $this->splitOnlineAsyncWithHttpInfo($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitOnlineAsyncWithHttpInfo($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        $returnType = '\SplFileObject';
        $httpRequest = $this->splitOnlineRequest($document, $format, $width, $height, $from, $to, $password, $storage, $fontsFolder, $options);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'splitOnline'
     *
     * @param  \SplFileObject $$document Document data. (required)
     * @param  string $$format ExportFormat (required)
     * @param  int $$width Slide width. (optional)
     * @param  int $$height Slide height. (optional)
     * @param  int $$from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. (optional)
     * @param  int $$to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. (optional)
     * @param  string $$password Document password. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$fontsFolder Custom fonts folder. (optional)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $$options Export options. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitOnlineRequest($document, $format, $width = null, $height = null, $from = null, $to = null, $password = null, $storage = null, $fontsFolder = null, \Aspose\Slides\Cloud\Sdk\Model\ExportOptions $options = null)
    {
        // verify the required parameter 'document' is set
        if ($document === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document when calling splitOnline');
        }
        // verify the required parameter 'format' is set
        if ($format === null) {
            throw new \InvalidArgumentException('Missing the required parameter $format when calling splitOnline');
        }
        // verify the value of enum parameter 'format' is valid
        if (!in_array(strtolower($format), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $format . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SlideExportFormat::getAllowableEnumValues()));
        }

        $resourcePath = '/slides/split/{format}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($width !== null) {
            $queryParams['width'] = ObjectSerializer::toQueryValue($width);
        }
        // query params
        if ($height !== null) {
            $queryParams['height'] = ObjectSerializer::toQueryValue($height);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($fontsFolder !== null) {
            $queryParams['fontsFolder'] = ObjectSerializer::toQueryValue($fontsFolder);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "format", $format);
        $_tempBody = [];
        if (isset($options)) {
            array_push($_tempBody, $options);
        }
        if (isset($document)) {
            array_push($_tempBody, $document);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['multipart/form-data'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function splitTableCell($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->splitTableCellWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->splitTableCellWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function splitTableCellWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Table';
        $httpRequest = $this->splitTableCellRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Table', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function splitTableCellAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password = null, $folder = null, $storage = null)
    {
        return $this->splitTableCellAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function splitTableCellAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Table';
        $httpRequest = $this->splitTableCellRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'splitTableCell'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  string $$splitType Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan). (required)
     * @param  float $$value Split value. In case of splitting by column or row span, the value must be an integer number. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function splitTableCellRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $splitType, $value, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling splitTableCell');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling splitTableCell');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling splitTableCell');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling splitTableCell');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling splitTableCell');
        }
        // verify the required parameter 'split_type' is set
        if ($splitType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $splitType when calling splitTableCell');
        }
        // verify the value of enum parameter 'splitType' is valid
        if (!in_array(strtolower($splitType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\TableCellSplitType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $splitType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\TableCellSplitType::getAllowableEnumValues()));
        }
        // verify the required parameter 'value' is set
        if ($value === null) {
            throw new \InvalidArgumentException('Missing the required parameter $value when calling splitTableCell');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/{splitType}/{value}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "splitType", $splitType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "value", $value);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'POST');
    }
    /**
     */
    public function storageExists($storageName)
    {
        try {
            list($response) = $this->storageExistsWithHttpInfo($storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->storageExistsWithHttpInfo($storageName);
            return $response;
        } 
    }

    /**
     */
    public function storageExistsWithHttpInfo($storageName)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\StorageExist';
        $httpRequest = $this->storageExistsRequest($storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\StorageExist', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function storageExistsAsync($storageName)
    {
        return $this->storageExistsAsyncWithHttpInfo($storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function storageExistsAsyncWithHttpInfo($storageName)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\StorageExist';
        $httpRequest = $this->storageExistsRequest($storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'storageExists'
     *
     * @param  string $$storageName Storage name (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function storageExistsRequest($storageName)
    {
        // verify the required parameter 'storage_name' is set
        if ($storageName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $storageName when calling storageExists');
        }

        $resourcePath = '/slides/storage/{storageName}/exist';
        $queryParams = [];
        $headerParams = [];


        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "storageName", $storageName);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'GET');
    }
    /**
     */
    public function updateAnimationEffect($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateAnimationEffectWithHttpInfo($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationEffectRequest($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateAnimationEffectAsync($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->updateAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationEffectRequest($name, $slideIndex, $effectIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$effectIndex The position of the effect to be modified. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAnimationEffectRequest($name, $slideIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateAnimationEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling updateAnimationEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling updateAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateAnimationInteractiveSequenceEffect($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->updateAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$sequenceIndex The position of the interactive sequence. (required)
     * @param  int $$effectIndex The position of the effect to be modified. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling updateAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling updateAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling updateAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateChartCategory($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateChartCategoryWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateChartCategoryAsync($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        return $this->updateChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateChartCategoryAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, $category, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateChartCategory'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$categoryIndex Category index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $$category Category DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChartCategoryRequest($name, $slideIndex, $shapeIndex, $categoryIndex, \Aspose\Slides\Cloud\Sdk\Model\ChartCategory $category, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateChartCategory');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateChartCategory');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateChartCategory');
        }
        // verify the required parameter 'category_index' is set
        if ($categoryIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $categoryIndex when calling updateChartCategory');
        }
        // verify the required parameter 'category' is set
        if ($category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $category when calling updateChartCategory');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "categoryIndex", $categoryIndex);
        $_tempBody = [];
        if (isset($category)) {
            array_push($_tempBody, $category);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateChartDataPoint($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateChartDataPointWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateChartDataPointAsync($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        return $this->updateChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateChartDataPointAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, $dataPoint, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateChartDataPoint'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  int $$pointIndex Data point index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\DataPoint $$dataPoint Data point DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChartDataPointRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $pointIndex, \Aspose\Slides\Cloud\Sdk\Model\DataPoint $dataPoint, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateChartDataPoint');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateChartDataPoint');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateChartDataPoint');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling updateChartDataPoint');
        }
        // verify the required parameter 'point_index' is set
        if ($pointIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pointIndex when calling updateChartDataPoint');
        }
        // verify the required parameter 'data_point' is set
        if ($dataPoint === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dataPoint when calling updateChartDataPoint');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "pointIndex", $pointIndex);
        $_tempBody = [];
        if (isset($dataPoint)) {
            array_push($_tempBody, $dataPoint);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateChartSeries($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateChartSeriesWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Chart', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateChartSeriesAsync($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        return $this->updateChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateChartSeriesAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Chart';
        $httpRequest = $this->updateChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, $series, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateChartSeries'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index (must be a chart). (required)
     * @param  int $$seriesIndex Series index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Series $$series Series DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateChartSeriesRequest($name, $slideIndex, $shapeIndex, $seriesIndex, \Aspose\Slides\Cloud\Sdk\Model\Series $series, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateChartSeries');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateChartSeries');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateChartSeries');
        }
        // verify the required parameter 'series_index' is set
        if ($seriesIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seriesIndex when calling updateChartSeries');
        }
        // verify the required parameter 'series' is set
        if ($series === null) {
            throw new \InvalidArgumentException('Missing the required parameter $series when calling updateChartSeries');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "seriesIndex", $seriesIndex);
        $_tempBody = [];
        if (isset($series)) {
            array_push($_tempBody, $series);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateLayoutSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateLayoutSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateLayoutSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateLayoutSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->updateLayoutSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateLayoutSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateLayoutSlideAsyncWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateLayoutSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide';
        $httpRequest = $this->updateLayoutSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateLayoutSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $$slideDto Slide update data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateLayoutSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\LayoutSlide $slideDto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateLayoutSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateLayoutSlide');
        }
        // verify the required parameter 'slide_dto' is set
        if ($slideDto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideDto when calling updateLayoutSlide');
        }

        $resourcePath = '/slides/{name}/layoutSlides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($slideDto)) {
            array_push($_tempBody, $slideDto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateNotesSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateNotesSlideWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateNotesSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->updateNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateNotesSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateNotesSlideAsyncWithHttpInfo($name, $slideIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateNotesSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide';
        $httpRequest = $this->updateNotesSlideRequest($name, $slideIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateNotesSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $$dto A NotesSlide object with notes slide data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateNotesSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\NotesSlide $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateNotesSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateNotesSlide');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateNotesSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/notesSlide';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateParagraph($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->updateParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function updateParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateParagraphAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->updateParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateParagraphRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling updateParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updatePortion($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->updatePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updatePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function updatePortionWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updatePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updatePortionAsync($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->updatePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updatePortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updatePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updatePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePortionRequest($name, $slideIndex, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updatePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updatePortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updatePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling updatePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling updatePortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updatePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSection($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSectionWithHttpInfo($name, $sectionIndex, $sectionName, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSectionWithHttpInfo($name, $sectionIndex, $sectionName, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSectionWithHttpInfo($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->updateSectionRequest($name, $sectionIndex, $sectionName, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Sections', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSectionAsync($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSectionAsyncWithHttpInfo($name, $sectionIndex, $sectionName, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSectionAsyncWithHttpInfo($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Sections';
        $httpRequest = $this->updateSectionRequest($name, $sectionIndex, $sectionName, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSection'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$sectionIndex The position of the section to be updated. (required)
     * @param  string $$sectionName Section name. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSectionRequest($name, $sectionIndex, $sectionName, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSection');
        }
        // verify the required parameter 'section_index' is set
        if ($sectionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionIndex when calling updateSection');
        }
        // verify the required parameter 'section_name' is set
        if ($sectionName === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sectionName when calling updateSection');
        }

        $resourcePath = '/slides/{name}/sections/{sectionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($sectionName !== null) {
            $queryParams['sectionName'] = ObjectSerializer::toQueryValue($sectionName);
        }
        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sectionIndex", $sectionIndex);
        $_tempBody = [];
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateShape($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->updateShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateShapeWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function updateShapeWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateShapeRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateShapeAsync($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->updateShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateShapeAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateShapeRequest($name, $slideIndex, $shapeIndex, $dto, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateShapeRequest($name, $slideIndex, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateShape');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateShape');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSlide($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSlideWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSlideWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->updateSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Slide', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSlideAsync($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSlideAsyncWithHttpInfo($name, $slideIndex, $slideDto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSlideAsyncWithHttpInfo($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Slide';
        $httpRequest = $this->updateSlideRequest($name, $slideIndex, $slideDto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSlide'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Slide $$slideDto Slide update data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSlideRequest($name, $slideIndex, \Aspose\Slides\Cloud\Sdk\Model\Slide $slideDto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSlide');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateSlide');
        }
        // verify the required parameter 'slide_dto' is set
        if ($slideDto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideDto when calling updateSlide');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $_tempBody = [];
        if (isset($slideDto)) {
            array_push($_tempBody, $slideDto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSpecialSlideAnimationEffect($name, $slideIndex, $slideType, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSpecialSlideAnimationEffectWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effectIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSpecialSlideAnimationEffectAsync($name, $slideIndex, $slideType, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSpecialSlideAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSpecialSlideAnimationEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effectIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSpecialSlideAnimationEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$effectIndex The position of the effect to be modified. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSpecialSlideAnimationEffectRequest($name, $slideIndex, $slideType, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling updateSpecialSlideAnimationEffect');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling updateSpecialSlideAnimationEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling updateSpecialSlideAnimationEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSpecialSlideAnimationInteractiveSequenceEffect($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSpecialSlideAnimationInteractiveSequenceEffectAsync($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        return $this->updateSpecialSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSpecialSlideAnimationInteractiveSequenceEffectAsyncWithHttpInfo($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation';
        $httpRequest = $this->updateSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, $effect, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSpecialSlideAnimationInteractiveSequenceEffect'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$sequenceIndex The position of the interactive sequence. (required)
     * @param  int $$effectIndex The position of the effect to be modified. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Effect $$effect Animation effect DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSpecialSlideAnimationInteractiveSequenceEffectRequest($name, $slideIndex, $slideType, $sequenceIndex, $effectIndex, \Aspose\Slides\Cloud\Sdk\Model\Effect $effect, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling updateSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'sequence_index' is set
        if ($sequenceIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sequenceIndex when calling updateSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect_index' is set
        if ($effectIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effectIndex when calling updateSpecialSlideAnimationInteractiveSequenceEffect');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling updateSpecialSlideAnimationInteractiveSequenceEffect');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "sequenceIndex", $sequenceIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "effectIndex", $effectIndex);
        $_tempBody = [];
        if (isset($effect)) {
            array_push($_tempBody, $effect);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSpecialSlideParagraph($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->updateSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function updateSpecialSlideParagraphWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSpecialSlideParagraphAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->updateSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSpecialSlideParagraphAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $dto, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSpecialSlideParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSpecialSlideParagraphRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateSpecialSlideParagraph');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling updateSpecialSlideParagraph');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateSpecialSlideParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling updateSpecialSlideParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateSpecialSlideParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSpecialSlidePortion($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->updateSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function updateSpecialSlidePortionWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSpecialSlidePortionAsync($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->updateSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSpecialSlidePortionAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSpecialSlidePortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSpecialSlidePortionRequest($name, $slideIndex, $slideType, $shapeIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSpecialSlidePortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateSpecialSlidePortion');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling updateSpecialSlidePortion');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateSpecialSlidePortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling updateSpecialSlidePortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling updateSpecialSlidePortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateSpecialSlidePortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateSpecialSlideShape($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        try {
            list($response) = $this->updateSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $dto, $password, $folder, $storage, $subShape);
            return $response;
        } 
    }

    /**
     */
    public function updateSpecialSlideShapeWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $dto, $password, $folder, $storage, $subShape);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateSpecialSlideShapeAsync($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        return $this->updateSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, $dto, $password, $folder, $storage, $subShape)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateSpecialSlideShapeAsyncWithHttpInfo($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase';
        $httpRequest = $this->updateSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, $dto, $password, $folder, $storage, $subShape);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateSpecialSlideShape'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Parent slide index. (required)
     * @param  string $$slideType Slide type (master, layout or notes). (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $$dto Shape DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     * @param  string $$subShape Sub-shape path (e.g. \&quot;3\&quot;, \&quot;3/shapes/2). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSpecialSlideShapeRequest($name, $slideIndex, $slideType, $shapeIndex, \Aspose\Slides\Cloud\Sdk\Model\ShapeBase $dto, $password = null, $folder = null, $storage = null, $subShape = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateSpecialSlideShape');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateSpecialSlideShape');
        }
        // verify the required parameter 'slide_type' is set
        if ($slideType === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideType when calling updateSpecialSlideShape');
        }
        // verify the value of enum parameter 'slideType' is valid
        if (!in_array(strtolower($slideType), array_map('strtolower', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()))) {
            throw new \InvalidArgumentException('Invalid value for format: ' . $slideType . '. Must be one of the following: ' . implode(',', \Aspose\Slides\Cloud\Sdk\Model\SpecialSlideType::getAllowableEnumValues()));
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateSpecialSlideShape');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateSpecialSlideShape');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // query params
        if ($subShape !== null) {
            $queryParams['subShape'] = ObjectSerializer::toQueryValue($subShape);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideType", $slideType);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateTableCell($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCell $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateTableCellWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateTableCellWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateTableCellWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCell $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TableCell';
        $httpRequest = $this->updateTableCellRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TableCell', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateTableCellAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCell $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateTableCellAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateTableCellAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCell $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TableCell';
        $httpRequest = $this->updateTableCellRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateTableCell'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\TableCell $$dto Table cell data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTableCellRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, \Aspose\Slides\Cloud\Sdk\Model\TableCell $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateTableCell');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateTableCell');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateTableCell');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling updateTableCell');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling updateTableCell');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateTableCell');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateTableCellParagraph($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateTableCellParagraphWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Paragraph', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateTableCellParagraphAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateTableCellParagraphAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Paragraph';
        $httpRequest = $this->updateTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateTableCellParagraph'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Paragraph $$dto Paragraph DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTableCellParagraphRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, \Aspose\Slides\Cloud\Sdk\Model\Paragraph $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateTableCellParagraph');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateTableCellParagraph');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateTableCellParagraph');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling updateTableCellParagraph');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling updateTableCellParagraph');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling updateTableCellParagraph');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateTableCellParagraph');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateTableCellPortion($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateTableCellPortionWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\Portion', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateTableCellPortionAsync($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateTableCellPortionAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\Portion';
        $httpRequest = $this->updateTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateTableCellPortion'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  int $$cellIndex Table cell index. (required)
     * @param  int $$paragraphIndex Paragraph index. (required)
     * @param  int $$portionIndex Portion index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\Portion $$dto Portion DTO. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTableCellPortionRequest($name, $slideIndex, $shapeIndex, $rowIndex, $cellIndex, $paragraphIndex, $portionIndex, \Aspose\Slides\Cloud\Sdk\Model\Portion $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateTableCellPortion');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateTableCellPortion');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateTableCellPortion');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling updateTableCellPortion');
        }
        // verify the required parameter 'cell_index' is set
        if ($cellIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cellIndex when calling updateTableCellPortion');
        }
        // verify the required parameter 'paragraph_index' is set
        if ($paragraphIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $paragraphIndex when calling updateTableCellPortion');
        }
        // verify the required parameter 'portion_index' is set
        if ($portionIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $portionIndex when calling updateTableCellPortion');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateTableCellPortion');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "cellIndex", $cellIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "paragraphIndex", $paragraphIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "portionIndex", $portionIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function updateTableRow($name, $slideIndex, $shapeIndex, $rowIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $password = null, $folder = null, $storage = null)
    {
        try {
            list($response) = $this->updateTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $dto, $password, $folder, $storage);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->updateTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $dto, $password, $folder, $storage);
            return $response;
        } 
    }

    /**
     */
    public function updateTableRowWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TableRow';
        $httpRequest = $this->updateTableRowRequest($name, $slideIndex, $shapeIndex, $rowIndex, $dto, $password, $folder, $storage);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\TableRow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function updateTableRowAsync($name, $slideIndex, $shapeIndex, $rowIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $password = null, $folder = null, $storage = null)
    {
        return $this->updateTableRowAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, $dto, $password, $folder, $storage)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function updateTableRowAsyncWithHttpInfo($name, $slideIndex, $shapeIndex, $rowIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $password = null, $folder = null, $storage = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\TableRow';
        $httpRequest = $this->updateTableRowRequest($name, $slideIndex, $shapeIndex, $rowIndex, $dto, $password, $folder, $storage);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'updateTableRow'
     *
     * @param  string $$name Document name. (required)
     * @param  int $$slideIndex Slide index. (required)
     * @param  int $$shapeIndex Shape index. (required)
     * @param  int $$rowIndex Row index. (required)
     * @param  \Aspose\Slides\Cloud\Sdk\Model\TableRow $$dto Table cell data. (required)
     * @param  string $$password Document password. (optional)
     * @param  string $$folder Document folder. (optional)
     * @param  string $$storage Document storage. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTableRowRequest($name, $slideIndex, $shapeIndex, $rowIndex, \Aspose\Slides\Cloud\Sdk\Model\TableRow $dto, $password = null, $folder = null, $storage = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling updateTableRow');
        }
        // verify the required parameter 'slide_index' is set
        if ($slideIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $slideIndex when calling updateTableRow');
        }
        // verify the required parameter 'shape_index' is set
        if ($shapeIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $shapeIndex when calling updateTableRow');
        }
        // verify the required parameter 'row_index' is set
        if ($rowIndex === null) {
            throw new \InvalidArgumentException('Missing the required parameter $rowIndex when calling updateTableRow');
        }
        // verify the required parameter 'dto' is set
        if ($dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $dto when calling updateTableRow');
        }

        $resourcePath = '/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($folder !== null) {
            $queryParams['folder'] = ObjectSerializer::toQueryValue($folder);
        }
        // query params
        if ($storage !== null) {
            $queryParams['storage'] = ObjectSerializer::toQueryValue($storage);
        }
        // header params
        if ($password !== null) {
            $headerParams['password'] = ObjectSerializer::toHeaderValue($password);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "name", $name);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "slideIndex", $slideIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "shapeIndex", $shapeIndex);
        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "rowIndex", $rowIndex);
        $_tempBody = [];
        if (isset($dto)) {
            array_push($_tempBody, $dto);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['application/json']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
    /**
     */
    public function uploadFile($path, $file, $storageName = null)
    {
        try {
            list($response) = $this->uploadFileWithHttpInfo($path, $file, $storageName);
            return $response;
        }
        catch(RepeatRequestException $ex) {
            list($response) = $this->uploadFileWithHttpInfo($path, $file, $storageName);
            return $response;
        } 
    }

    /**
     */
    public function uploadFileWithHttpInfo($path, $file, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesUploadResult';
        $httpRequest = $this->uploadFileRequest($path, $file, $storageName);
        try {
            $response = $this->httpCall($httpRequest);
            $responseBody = $response->getBody();
            $content = $responseBody->getContents();
            if ($returnType !== 'string') {
                $content = json_decode($content);
            }
            $deserializedContent = ObjectSerializer::deserialize($content, $returnType, []);
            if ($this->config->getDebug()) {
                $this->writeResponseLog($response->getStatusCode(), $response->getHeaders(), $deserializedContent);
            }
            return [$deserializedContent, $response->getStatusCode(), $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Aspose\Slides\Cloud\Sdk\Model\FilesUploadResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default: $this->handleApiException($e);
            }
            throw $e;
        }
    }

    /**
     */
    public function uploadFileAsync($path, $file, $storageName = null)
    {
        return $this->uploadFileAsyncWithHttpInfo($path, $file, $storageName)
            ->then(function ($response) {
                return $response[0];
            });
    }

    /**
     */
    public function uploadFileAsyncWithHttpInfo($path, $file, $storageName = null)
    {
        $returnType = '\Aspose\Slides\Cloud\Sdk\Model\FilesUploadResult';
        $httpRequest = $this->uploadFileRequest($path, $file, $storageName);

        return $this->client
            ->sendAsync($httpRequest, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }
                    if ($this->config->getDebug()) {
                        $this->writeResponseLog(
                            $response->getStatusCode(),
                            $response->getHeaders(),
                            ObjectSerializer::deserialize($content, $returnType, []));
                    }
                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    if ($exception instanceof RepeatRequestException) {
                        $this->refreshToken();
                        throw new RepeatRequestException("Request must be retried", $statusCode, $response->getHeaders(), $response->getBody());
                    }
                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody());
                });
    }

    /**
     * Create request for operation 'uploadFile'
     *
     * @param  string $$path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header. (required)
     * @param  \SplFileObject $$file File to upload (required)
     * @param  string $$storageName Storage name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadFileRequest($path, $file, $storageName = null)
    {
        // verify the required parameter 'path' is set
        if ($path === null) {
            throw new \InvalidArgumentException('Missing the required parameter $path when calling uploadFile');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling uploadFile');
        }

        $resourcePath = '/slides/storage/file/{path}';
        $queryParams = [];
        $headerParams = [];

        // query params
        if ($storageName !== null) {
            $queryParams['storageName'] = ObjectSerializer::toQueryValue($storageName);
        }

        $resourcePath = ObjectSerializer::addPathValue($resourcePath, "path", $path);
        $_tempBody = [];
        if (isset($file)) {
            array_push($_tempBody, $file);
        }
        $this->headerSelector->selectHeaders(
            $headerParams,
            ['application/json'],
            ['multipart/form-data']);
        $httpBody = ObjectSerializer::createBody($_tempBody);
        return $this->createRequest($resourcePath, $queryParams, $headerParams, $httpBody, 'PUT');
    }
}
