<?php
/**
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


namespace Aspose\Slides\Cloud\Sdk\Tests\Api;
 
use \Exception;
use PHPUnit\Framework\Assert;
use Aspose\Slides\Cloud\Sdk\Api\SlidesApi;
use Aspose\Slides\Cloud\Sdk\Api\ApiException;
use Aspose\Slides\Cloud\Sdk\Tests\Utils\TestUtils;

class SlidesApiTest extends TestBase
{

    /**
     * Test case for alignShapes
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     */
    public function testAlignShapes()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "alignShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testAlignShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "alignShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "name", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "alignShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidalignmentType()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testalignmentType = TestUtils::invalidizeValue("alignmentType", "alignShapes", $testalignmentType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "alignmentType", $testalignmentType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "alignmentType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "alignmentType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "alignmentType", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidalignToSlide()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testalignToSlide = TestUtils::invalidizeValue("alignToSlide", "alignShapes", $testalignToSlide, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "alignToSlide", $testalignToSlide, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "alignToSlide", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "alignToSlide", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "alignToSlide", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "alignShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "shapes", $testshapes, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "alignShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "password", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "alignShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "folder", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "alignShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "storage", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignShapes", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "alignShapes", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for alignSpecialSlideShapes
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     */
    public function testAlignSpecialSlideShapes()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "alignSpecialSlideShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testAlignSpecialSlideShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "alignSpecialSlideShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "name", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "alignSpecialSlideShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidslideType()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "alignSpecialSlideShapes", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "slideType", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidalignmentType()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testalignmentType = TestUtils::invalidizeValue("alignmentType", "alignSpecialSlideShapes", $testalignmentType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "alignmentType", $testalignmentType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "alignmentType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "alignmentType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "alignmentType", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidalignToSlide()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testalignToSlide = TestUtils::invalidizeValue("alignToSlide", "alignSpecialSlideShapes", $testalignToSlide, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "alignToSlide", $testalignToSlide, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "alignToSlide", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "alignToSlide", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "alignToSlide", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "alignSpecialSlideShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "shapes", $testshapes, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "alignSpecialSlideShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "password", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "alignSpecialSlideShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "folder", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "alignSpecialSlideShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "storage", self::$okToFailValues);
        }
    }

    public function testAlignSpecialSlideShapesInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("alignSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("alignSpecialSlideShapes", "slideType", self::$values, 'string');
        $testalignmentType = TestUtils::getTestValue("alignSpecialSlideShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignSpecialSlideShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("alignSpecialSlideShapes", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "alignSpecialSlideShapes", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignSpecialSlideShapes", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignSpecialSlideShapes", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignSpecialSlideShapes", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignSpecialSlideShapes", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for convert
     * Convert presentation from request content to format specified.
     */
    public function testConvert()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "convert");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testConvertInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testdocument = TestUtils::invalidizeValue("document", "convert", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "document", self::$okToFailValues);
        }
    }

    public function testConvertInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::invalidizeValue("format", "convert", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "format", self::$okToFailValues);
        }
    }

    public function testConvertInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::invalidizeValue("password", "convert", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "password", self::$okToFailValues);
        }
    }

    public function testConvertInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $teststorage = TestUtils::invalidizeValue("storage", "convert", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "storage", self::$okToFailValues);
        }
    }

    public function testConvertInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "convert", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testConvertInvalidslides()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testslides = TestUtils::invalidizeValue("slides", "convert", $testslides, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "slides", $testslides, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "slides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "slides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "slides", self::$okToFailValues);
        }
    }

    public function testConvertInvalidoptions()
    {
        $testdocument = TestUtils::getTestValue("convert", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convert", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convert", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testoptions = TestUtils::invalidizeValue("options", "convert", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "options", self::$okToFailValues);
        }
    }

    /**
     * Test case for convertAndSave
     * Convert presentation from request content to format specified.
     */
    public function testConvertAndSave()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "convertAndSave");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testConvertAndSaveInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testdocument = TestUtils::invalidizeValue("document", "convertAndSave", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "document", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::invalidizeValue("format", "convertAndSave", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "format", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidoutPath()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testoutPath = TestUtils::invalidizeValue("outPath", "convertAndSave", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "outPath", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::invalidizeValue("password", "convertAndSave", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "password", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $teststorage = TestUtils::invalidizeValue("storage", "convertAndSave", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "storage", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "convertAndSave", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidslides()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testslides = TestUtils::invalidizeValue("slides", "convertAndSave", $testslides, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "slides", $testslides, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "slides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "slides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "slides", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidoptions()
    {
        $testdocument = TestUtils::getTestValue("convertAndSave", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("convertAndSave", "slides", self::$values, 'array');
        $testoptions = TestUtils::getTestValue("convertAndSave", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testoptions = TestUtils::invalidizeValue("options", "convertAndSave", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder, $testslides, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "options", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyFile
     * Copy file
     */
    public function testCopyFile()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyFile");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCopyFileInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "copyFile", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "srcPath", $testsrcPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "srcPath", self::$okToFailValues);
        }
    }

    public function testCopyFileInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "copyFile", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "destPath", $testdestPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "destPath", self::$okToFailValues);
        }
    }

    public function testCopyFileInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "copyFile", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "srcStorageName", $testsrcStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testCopyFileInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "copyFile", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "destStorageName", $testdestStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "destStorageName", self::$okToFailValues);
        }
    }

    public function testCopyFileInvalidversionId()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "copyFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "versionId", $testversionId, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyFolder
     * Copy folder
     */
    public function testCopyFolder()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCopyFolderInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "copyFolder", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "srcPath", $testsrcPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "srcPath", self::$okToFailValues);
        }
    }

    public function testCopyFolderInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "copyFolder", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "destPath", $testdestPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "destPath", self::$okToFailValues);
        }
    }

    public function testCopyFolderInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "copyFolder", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "srcStorageName", $testsrcStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testCopyFolderInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "copyFolder", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "destStorageName", $testdestStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "destStorageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyLayoutSlide
     * Copy layoutSlide from source presentation.
     */
    public function testCopyLayoutSlide()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyLayoutSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCopyLayoutSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "copyLayoutSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "name", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFrom()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFrom = TestUtils::invalidizeValue("cloneFrom", "copyLayoutSlide", $testcloneFrom, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFrom", $testcloneFrom, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFrom", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFrom", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFrom", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFromPosition()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFromPosition = TestUtils::invalidizeValue("cloneFromPosition", "copyLayoutSlide", $testcloneFromPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFromPosition", $testcloneFromPosition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFromPosition", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFromPassword()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFromPassword = TestUtils::invalidizeValue("cloneFromPassword", "copyLayoutSlide", $testcloneFromPassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFromPassword", $testcloneFromPassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFromPassword", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFromStorage()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFromStorage = TestUtils::invalidizeValue("cloneFromStorage", "copyLayoutSlide", $testcloneFromStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFromStorage", $testcloneFromStorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFromStorage", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "copyLayoutSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "password", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "copyLayoutSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "copyLayoutSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyMasterSlide
     * Copy masterSlide from source presentation.
     */
    public function testCopyMasterSlide()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyMasterSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCopyMasterSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "copyMasterSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "name", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFrom()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFrom = TestUtils::invalidizeValue("cloneFrom", "copyMasterSlide", $testcloneFrom, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFrom", $testcloneFrom, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFrom", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFrom", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFrom", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFromPosition()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFromPosition = TestUtils::invalidizeValue("cloneFromPosition", "copyMasterSlide", $testcloneFromPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFromPosition", $testcloneFromPosition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFromPosition", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFromPassword()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFromPassword = TestUtils::invalidizeValue("cloneFromPassword", "copyMasterSlide", $testcloneFromPassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFromPassword", $testcloneFromPassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFromPassword", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFromStorage()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFromStorage = TestUtils::invalidizeValue("cloneFromStorage", "copyMasterSlide", $testcloneFromStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFromStorage", $testcloneFromStorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFromStorage", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidapplyToAll()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testapplyToAll = TestUtils::invalidizeValue("applyToAll", "copyMasterSlide", $testapplyToAll, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "applyToAll", $testapplyToAll, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "applyToAll", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "applyToAll", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "applyToAll", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "copyMasterSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "password", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "copyMasterSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "copyMasterSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for copySlide
     * Copy a slide from the current or another presentation.
     */
    public function testCopySlide()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copySlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCopySlideInvalidname()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "copySlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "name", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidslideToCopy()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testslideToCopy = TestUtils::invalidizeValue("slideToCopy", "copySlide", $testslideToCopy, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "slideToCopy", $testslideToCopy, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "slideToCopy", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "slideToCopy", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "slideToCopy", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidposition()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "copySlide", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "position", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidsource()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testsource = TestUtils::invalidizeValue("source", "copySlide", $testsource, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "source", $testsource, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "source", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "source", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "source", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidsourcePassword()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testsourcePassword = TestUtils::invalidizeValue("sourcePassword", "copySlide", $testsourcePassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "sourcePassword", $testsourcePassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "sourcePassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "sourcePassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "sourcePassword", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidsourceStorage()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testsourceStorage = TestUtils::invalidizeValue("sourceStorage", "copySlide", $testsourceStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "sourceStorage", $testsourceStorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "sourceStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "sourceStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "sourceStorage", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "copySlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "password", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "copySlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "folder", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "copySlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createAnimationEffect
     * Add an effect to slide animation.
     */
    public function testCreateAnimationEffect()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "createAnimationEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "effect", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createAnimationInteractiveSequence
     * Set slide animation.
     */
    public function testCreateAnimationInteractiveSequence()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createAnimationInteractiveSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createAnimationInteractiveSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "name", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createAnimationInteractiveSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidsequence()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testsequence = TestUtils::invalidizeValue("sequence", "createAnimationInteractiveSequence", $testsequence, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "sequence", $testsequence, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "sequence", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "sequence", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "sequence", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createAnimationInteractiveSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "password", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createAnimationInteractiveSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "folder", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createAnimationInteractiveSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createAnimationInteractiveSequenceEffect
     * Add an animation effect to a slide interactive sequence.
     */
    public function testCreateAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "createAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "createAnimationInteractiveSequenceEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "effect", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createChartCategory
     * Add a new category to a chart.
     */
    public function testCreateChartCategory()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createChartCategory");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateChartCategoryInvalidname()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createChartCategory", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "name", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createChartCategory", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createChartCategory", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidcategory()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testcategory = TestUtils::invalidizeValue("category", "createChartCategory", $testcategory, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "category", $testcategory, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "category", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "category", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "category", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createChartCategory", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "password", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createChartCategory", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "folder", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createChartCategory", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createChartDataPoint
     * Add a new data point to a chart series.
     */
    public function testCreateChartDataPoint()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createChartDataPoint");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateChartDataPointInvalidname()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createChartDataPoint", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "name", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createChartDataPoint", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createChartDataPoint", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "createChartDataPoint", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "seriesIndex", $testseriesIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvaliddataPoint()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testdataPoint = TestUtils::invalidizeValue("dataPoint", "createChartDataPoint", $testdataPoint, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "dataPoint", $testdataPoint, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "dataPoint", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createChartDataPoint", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "password", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createChartDataPoint", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "folder", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createChartDataPoint", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createChartSeries
     * Add a new series to a chart.
     */
    public function testCreateChartSeries()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createChartSeries");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateChartSeriesInvalidname()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createChartSeries", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "name", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createChartSeries", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createChartSeries", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidseries()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testseries = TestUtils::invalidizeValue("series", "createChartSeries", $testseries, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "series", $testseries, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "series", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "series", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "series", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createChartSeries", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "password", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createChartSeries", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "folder", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createChartSeries", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createComment
     * Adds the comment on the slide.
     */
    public function testCreateComment()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createComment");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateCommentInvalidname()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createComment", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "name", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createComment", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvaliddto()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createComment", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "dto", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createComment", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createComment", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "password", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createComment", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "folder", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createComment", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createComment", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createCommentOnline
     * Adds the comment on the slide.
     */
    public function testCreateCommentOnline()
    {
        $testdocument = TestUtils::getTestValue("createCommentOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createCommentOnline", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testshapeIndex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createCommentOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testCreateCommentOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("createCommentOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createCommentOnline", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "createCommentOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testshapeIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "document", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("createCommentOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createCommentOnline", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createCommentOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testshapeIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvaliddto()
    {
        $testdocument = TestUtils::getTestValue("createCommentOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createCommentOnline", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createCommentOnline", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testshapeIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "dto", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvalidshapeIndex()
    {
        $testdocument = TestUtils::getTestValue("createCommentOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createCommentOnline", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createCommentOnline", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testshapeIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("createCommentOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideCommentBase');
        $testshapeIndex = TestUtils::getTestValue("createCommentOnline", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createCommentOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testshapeIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for createFolder
     * Create the folder
     */
    public function testCreateFolder()
    {
        $testpath = TestUtils::getTestValue("createFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("createFolder", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createFolder", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createFolder($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCreateFolderInvalidpath()
    {
        $testpath = TestUtils::getTestValue("createFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("createFolder", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "createFolder", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createFolder", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createFolder($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createFolder", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createFolder", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createFolder", "path", self::$okToFailValues);
        }
    }

    public function testCreateFolderInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("createFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("createFolder", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "createFolder", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createFolder", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createFolder($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createFolder", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createFolder", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createFolder", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for createImageWatermark
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateImageWatermark()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createImageWatermark");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCreateImageWatermarkInvalidname()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createImageWatermark", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "name", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidimage()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testimage = TestUtils::invalidizeValue("image", "createImageWatermark", $testimage, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "image", $testimage, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "image", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "image", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "image", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidpictureFrame()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testpictureFrame = TestUtils::invalidizeValue("pictureFrame", "createImageWatermark", $testpictureFrame, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "pictureFrame", $testpictureFrame, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "pictureFrame", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "pictureFrame", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "pictureFrame", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createImageWatermark", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "password", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createImageWatermark", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "folder", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getTestValue("createImageWatermark", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createImageWatermark", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createImageWatermarkOnline
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateImageWatermarkOnline()
    {
        $testdocument = TestUtils::getTestValue("createImageWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testimage = TestUtils::getTestValue("createImageWatermarkOnline", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createImageWatermarkOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testCreateImageWatermarkOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("createImageWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testimage = TestUtils::getTestValue("createImageWatermarkOnline", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "createImageWatermarkOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "document", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkOnlineInvalidimage()
    {
        $testdocument = TestUtils::getTestValue("createImageWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testimage = TestUtils::getTestValue("createImageWatermarkOnline", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testimage = TestUtils::invalidizeValue("image", "createImageWatermarkOnline", $testimage, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "image", $testimage, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "image", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "image", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "image", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkOnlineInvalidpictureFrame()
    {
        $testdocument = TestUtils::getTestValue("createImageWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testimage = TestUtils::getTestValue("createImageWatermarkOnline", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testpictureFrame = TestUtils::invalidizeValue("pictureFrame", "createImageWatermarkOnline", $testpictureFrame, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "pictureFrame", $testpictureFrame, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "pictureFrame", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "pictureFrame", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "pictureFrame", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("createImageWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testimage = TestUtils::getTestValue("createImageWatermarkOnline", "image", self::$values, '\SplFileObject');
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createImageWatermarkOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for createNotesSlide
     * Add new notes slide.
     */
    public function testCreateNotesSlide()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvaliddto()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createNotesSlide", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "dto", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createParagraph
     * Creates new paragraph.
     */
    public function testCreateParagraph()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "name", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidposition()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createParagraph", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "position", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "password", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "createParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPortion
     * Creates new portion.
     */
    public function testCreatePortion()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "name", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createPortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createPortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "createPortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createPortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "dto", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidposition()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createPortion", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "position", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "password", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "storage", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createPortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "createPortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPresentation
     * Create a presentation.
     */
    public function testCreatePresentation()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPresentation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "name", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvaliddata()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testdata = TestUtils::invalidizeValue("data", "createPresentation", $testdata, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "data", $testdata, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "data", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "data", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "data", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidinputPassword()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testinputPassword = TestUtils::invalidizeValue("inputPassword", "createPresentation", $testinputPassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "inputPassword", $testinputPassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "inputPassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "inputPassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "inputPassword", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "password", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentation", "data", self::$values, '\SplFileObject');
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPresentationFromSource
     * Create a presentation from an existing source.
     */
    public function testCreatePresentationFromSource()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPresentationFromSource");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePresentationFromSourceInvalidname()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPresentationFromSource", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "name", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidsourcePath()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testsourcePath = TestUtils::invalidizeValue("sourcePath", "createPresentationFromSource", $testsourcePath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "sourcePath", $testsourcePath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "sourcePath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "sourcePath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "sourcePath", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidsourcePassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testsourcePassword = TestUtils::invalidizeValue("sourcePassword", "createPresentationFromSource", $testsourcePassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "sourcePassword", $testsourcePassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "sourcePassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "sourcePassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "sourcePassword", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidsourceStorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testsourceStorage = TestUtils::invalidizeValue("sourceStorage", "createPresentationFromSource", $testsourceStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "sourceStorage", $testsourceStorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "sourceStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "sourceStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "sourceStorage", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPresentationFromSource", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "password", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPresentationFromSource", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPresentationFromSource", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPresentationFromTemplate
     * Create a presentation.
     */
    public function testCreatePresentationFromTemplate()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPresentationFromTemplate");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePresentationFromTemplateInvalidname()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPresentationFromTemplate", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "name", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidtemplatePath()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testtemplatePath = TestUtils::invalidizeValue("templatePath", "createPresentationFromTemplate", $testtemplatePath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "templatePath", $testtemplatePath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "templatePath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "templatePath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "templatePath", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvaliddata()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testdata = TestUtils::invalidizeValue("data", "createPresentationFromTemplate", $testdata, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "data", $testdata, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "data", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "data", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "data", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidtemplatePassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testtemplatePassword = TestUtils::invalidizeValue("templatePassword", "createPresentationFromTemplate", $testtemplatePassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "templatePassword", $testtemplatePassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "templatePassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "templatePassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "templatePassword", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidtemplateStorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testtemplateStorage = TestUtils::invalidizeValue("templateStorage", "createPresentationFromTemplate", $testtemplateStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "templateStorage", $testtemplateStorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "templateStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "templateStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "templateStorage", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidisImageDataEmbedded()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::invalidizeValue("isImageDataEmbedded", "createPresentationFromTemplate", $testisImageDataEmbedded, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "isImageDataEmbedded", $testisImageDataEmbedded, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "isImageDataEmbedded", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "isImageDataEmbedded", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "isImageDataEmbedded", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPresentationFromTemplate", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "password", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPresentationFromTemplate", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPresentationFromTemplate", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSection
     * Create a section starting at a specified slide index.
     */
    public function testCreateSection()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "name", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidsectionName()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testsectionName = TestUtils::invalidizeValue("sectionName", "createSection", $testsectionName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "sectionName", $testsectionName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "sectionName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "sectionName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "sectionName", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSection", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "password", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createShape
     * Create new shape.
     */
    public function testCreateShape()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "name", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "dto", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidshapeToClone()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testshapeToClone = TestUtils::invalidizeValue("shapeToClone", "createShape", $testshapeToClone, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "shapeToClone", $testshapeToClone, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "shapeToClone", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "shapeToClone", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "shapeToClone", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidposition()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createShape", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "position", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "password", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "folder", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "storage", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "createShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSlide
     * Create a slide.
     */
    public function testCreateSlide()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "name", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidlayoutAlias()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testlayoutAlias = TestUtils::invalidizeValue("layoutAlias", "createSlide", $testlayoutAlias, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "layoutAlias", $testlayoutAlias, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "layoutAlias", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "layoutAlias", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "layoutAlias", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSlide", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "position", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "password", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSmartArtNode
     * Add SmartArt node
     */
    public function testCreateSmartArtNode()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSmartArtNode");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSmartArtNodeInvalidname()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSmartArtNode", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "name", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSmartArtNode", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidsmartArtIndex()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testsmartArtIndex = TestUtils::invalidizeValue("smartArtIndex", "createSmartArtNode", $testsmartArtIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "smartArtIndex", $testsmartArtIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "smartArtIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "smartArtIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "smartArtIndex", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidsubNode()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testsubNode = TestUtils::invalidizeValue("subNode", "createSmartArtNode", $testsubNode, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "subNode", $testsubNode, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "subNode", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "subNode", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "subNode", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidtext()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testtext = TestUtils::invalidizeValue("text", "createSmartArtNode", $testtext, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "text", $testtext, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "text", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "text", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "text", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSmartArtNode", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "position", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSmartArtNode", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "password", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSmartArtNode", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSmartArtNodeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("createSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("createSmartArtNode", "subNode", self::$values, 'string');
        $testtext = TestUtils::getTestValue("createSmartArtNode", "text", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSmartArtNode", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSmartArtNode", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSmartArtNode", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSmartArtNode", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testsubNode, $testtext, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSmartArtNode", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSmartArtNode", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSmartArtNode", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSpecialSlideAnimationEffect
     * Add an effect to special slide (master, layout, notes) animation.
     */
    public function testCreateSpecialSlideAnimationEffect()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSpecialSlideAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSpecialSlideAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSpecialSlideAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalidslideType()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "createSpecialSlideAnimationEffect", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "slideType", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "createSpecialSlideAnimationEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "effect", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSpecialSlideAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSpecialSlideAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSpecialSlideAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSpecialSlideAnimationInteractiveSequence
     * Set special slide (master, layout, notes) animation.
     */
    public function testCreateSpecialSlideAnimationInteractiveSequence()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSpecialSlideAnimationInteractiveSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSpecialSlideAnimationInteractiveSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "name", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSpecialSlideAnimationInteractiveSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidslideType()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "createSpecialSlideAnimationInteractiveSequence", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidsequence()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testsequence = TestUtils::invalidizeValue("sequence", "createSpecialSlideAnimationInteractiveSequence", $testsequence, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "sequence", $testsequence, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "sequence", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "sequence", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSpecialSlideAnimationInteractiveSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "password", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSpecialSlideAnimationInteractiveSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequence = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSpecialSlideAnimationInteractiveSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequence", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSpecialSlideAnimationInteractiveSequenceEffect
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     */
    public function testCreateSpecialSlideAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSpecialSlideAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSpecialSlideAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidslideType()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "createSpecialSlideAnimationInteractiveSequenceEffect", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "createSpecialSlideAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "createSpecialSlideAnimationInteractiveSequenceEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSpecialSlideAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSpecialSlideAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSpecialSlideAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSpecialSlideParagraph
     * Creates new paragraph.
     */
    public function testCreateSpecialSlideParagraph()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSpecialSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSpecialSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSpecialSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidslideType()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "createSpecialSlideParagraph", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "slideType", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createSpecialSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createSpecialSlideParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSpecialSlideParagraph", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "position", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSpecialSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSpecialSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSpecialSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSpecialSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "createSpecialSlideParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSpecialSlidePortion
     * Creates new portion.
     */
    public function testCreateSpecialSlidePortion()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSpecialSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSpecialSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSpecialSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSpecialSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidslideType()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "createSpecialSlidePortion", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "slideType", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createSpecialSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "createSpecialSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createSpecialSlidePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "dto", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSpecialSlidePortion", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "position", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSpecialSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSpecialSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSpecialSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "storage", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlidePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("createSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSpecialSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlidePortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "createSpecialSlidePortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlidePortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlidePortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSpecialSlideShape
     * Create new shape.
     */
    public function testCreateSpecialSlideShape()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSpecialSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSpecialSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSpecialSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSpecialSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidslideType()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "createSpecialSlideShape", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "slideType", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createSpecialSlideShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "dto", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidshapeToClone()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testshapeToClone = TestUtils::invalidizeValue("shapeToClone", "createSpecialSlideShape", $testshapeToClone, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "shapeToClone", $testshapeToClone, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "shapeToClone", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "shapeToClone", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "shapeToClone", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSpecialSlideShape", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "position", $testposition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "position", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSpecialSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSpecialSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSpecialSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testCreateSpecialSlideShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("createSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("createSpecialSlideShape", "slideType", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSpecialSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSpecialSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("createSpecialSlideShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "createSpecialSlideShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSpecialSlideShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSpecialSlideShape($testname, $testslideIndex, $testslideType, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSpecialSlideShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for createWatermark
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateWatermark()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createWatermark");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCreateWatermarkInvalidname()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createWatermark", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "name", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidshape()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testshape = TestUtils::invalidizeValue("shape", "createWatermark", $testshape, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "shape", $testshape, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "shape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "shape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "shape", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfontHeight()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfontHeight = TestUtils::invalidizeValue("fontHeight", "createWatermark", $testfontHeight, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "fontHeight", $testfontHeight, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "fontHeight", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "fontHeight", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "fontHeight", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidtext()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testtext = TestUtils::invalidizeValue("text", "createWatermark", $testtext, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "text", $testtext, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "text", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "text", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "text", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfontName()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "createWatermark", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "fontName", $testfontName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "fontName", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfontColor()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfontColor = TestUtils::invalidizeValue("fontColor", "createWatermark", $testfontColor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "fontColor", $testfontColor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "fontColor", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "fontColor", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "fontColor", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createWatermark", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "password", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createWatermark", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "folder", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createWatermark", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createWatermarkOnline
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateWatermarkOnline()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createWatermarkOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testCreateWatermarkOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "createWatermarkOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "document", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidshape()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testshape = TestUtils::invalidizeValue("shape", "createWatermarkOnline", $testshape, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "shape", $testshape, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "shape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "shape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "shape", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidfontHeight()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testfontHeight = TestUtils::invalidizeValue("fontHeight", "createWatermarkOnline", $testfontHeight, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "fontHeight", $testfontHeight, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "fontHeight", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "fontHeight", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "fontHeight", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidtext()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testtext = TestUtils::invalidizeValue("text", "createWatermarkOnline", $testtext, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "text", $testtext, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "text", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "text", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "text", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidfontName()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "createWatermarkOnline", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "fontName", $testfontName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "fontName", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidfontColor()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testfontColor = TestUtils::invalidizeValue("fontColor", "createWatermarkOnline", $testfontColor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "fontColor", $testfontColor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "fontColor", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "fontColor", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "fontColor", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("createWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createWatermarkOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimation
     * Remove animation from a slide.
     */
    public function testDeleteAnimation()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationEffect
     * Remove an effect from slide animation.
     */
    public function testDeleteAnimationEffect()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "deleteAnimationEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationInteractiveSequence
     * Remove an interactive sequence from slide animation.
     */
    public function testDeleteAnimationInteractiveSequence()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationInteractiveSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationInteractiveSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationInteractiveSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "deleteAnimationInteractiveSequence", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationInteractiveSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationInteractiveSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationInteractiveSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationInteractiveSequenceEffect
     * Remove an effect from slide animation interactive sequence.
     */
    public function testDeleteAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "deleteAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "deleteAnimationInteractiveSequenceEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationInteractiveSequences
     * Clear all interactive sequences from slide animation.
     */
    public function testDeleteAnimationInteractiveSequences()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationInteractiveSequences");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationInteractiveSequences", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationInteractiveSequences", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationInteractiveSequences", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationInteractiveSequences", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationInteractiveSequences", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationMainSequence
     * Clear main sequence in slide animation.
     */
    public function testDeleteAnimationMainSequence()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationMainSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationMainSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationMainSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationMainSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationMainSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationMainSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteBackground
     * Remove background from a slide.
     */
    public function testDeleteBackground()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteBackground");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteBackgroundInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteBackground", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "name", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteBackground", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteBackground", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "password", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteBackground", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteBackground", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteChartCategory
     * Delete a category from a chart.
     */
    public function testDeleteChartCategory()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteChartCategory");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteChartCategoryInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteChartCategory", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "name", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteChartCategory", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteChartCategory", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidcategoryIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testcategoryIndex = TestUtils::invalidizeValue("categoryIndex", "deleteChartCategory", $testcategoryIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "categoryIndex", $testcategoryIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "categoryIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteChartCategory", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "password", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteChartCategory", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteChartCategory", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteChartDataPoint
     * Delete a data point from a chart series.
     */
    public function testDeleteChartDataPoint()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteChartDataPoint");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteChartDataPointInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteChartDataPoint", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "name", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteChartDataPoint", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteChartDataPoint", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "deleteChartDataPoint", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "seriesIndex", $testseriesIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidpointIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testpointIndex = TestUtils::invalidizeValue("pointIndex", "deleteChartDataPoint", $testpointIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "pointIndex", $testpointIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "pointIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteChartDataPoint", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "password", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteChartDataPoint", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteChartDataPoint", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteChartSeries
     * Delete a series from a chart.
     */
    public function testDeleteChartSeries()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteChartSeries");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteChartSeriesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteChartSeries", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "name", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteChartSeries", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteChartSeries", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "deleteChartSeries", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "seriesIndex", $testseriesIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteChartSeries", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "password", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteChartSeries", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteChartSeries", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteComments
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.
     */
    public function testDeleteComments()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteComments");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteCommentsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteComments", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "name", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidauthor()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteComments", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "author", $testauthor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "author", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteComments", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "password", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteComments", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteComments", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteCommentsOnline
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.
     */
    public function testDeleteCommentsOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteCommentsOnline", "document", self::$values, '\SplFileObject');
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteCommentsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteCommentsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteCommentsOnline", "document", self::$values, '\SplFileObject');
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteCommentsOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteCommentsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteCommentsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteCommentsOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsOnlineInvalidauthor()
    {
        $testdocument = TestUtils::getTestValue("deleteCommentsOnline", "document", self::$values, '\SplFileObject');
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteCommentsOnline", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", "author", $testauthor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteCommentsOnline", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteCommentsOnline", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteCommentsOnline", "author", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteCommentsOnline", "document", self::$values, '\SplFileObject');
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteCommentsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteCommentsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteCommentsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteCommentsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteDocumentProperties
     * Clean document properties.
     */
    public function testDeleteDocumentProperties()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteDocumentProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteDocumentPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteDocumentProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "name", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteDocumentProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "password", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteDocumentProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteDocumentProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteDocumentProperty
     * Delete document property.
     */
    public function testDeleteDocumentProperty()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteDocumentProperty");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteDocumentPropertyInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteDocumentProperty", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "name", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidpropertyName()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testpropertyName = TestUtils::invalidizeValue("propertyName", "deleteDocumentProperty", $testpropertyName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "propertyName", $testpropertyName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "propertyName", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteDocumentProperty", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "password", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteDocumentProperty", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteDocumentProperty", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteEmbeddedFont
     * Removes specified embedded font and returns presentation fonts info.
     */
    public function testDeleteEmbeddedFont()
    {
        $testname = TestUtils::getTestValue("deleteEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFont", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteEmbeddedFont", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFont", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFont($testname, $testfontName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteEmbeddedFont");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteEmbeddedFontInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFont", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteEmbeddedFont", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteEmbeddedFont", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFont", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFont($testname, $testfontName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFont", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFont", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFont", "name", self::$okToFailValues);
        }
    }

    public function testDeleteEmbeddedFontInvalidfontName()
    {
        $testname = TestUtils::getTestValue("deleteEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFont", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteEmbeddedFont", "storage", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "deleteEmbeddedFont", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFont", "fontName", $testfontName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFont($testname, $testfontName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFont", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFont", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFont", "fontName", self::$okToFailValues);
        }
    }

    public function testDeleteEmbeddedFontInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFont", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteEmbeddedFont", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteEmbeddedFont", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFont", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFont($testname, $testfontName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFont", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFont", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFont", "password", self::$okToFailValues);
        }
    }

    public function testDeleteEmbeddedFontInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFont", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteEmbeddedFont", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteEmbeddedFont", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFont", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFont($testname, $testfontName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFont", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFont", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFont", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteEmbeddedFontInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFont", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteEmbeddedFont", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteEmbeddedFont", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFont", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFont($testname, $testfontName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFont", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFont", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFont", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteEmbeddedFontOnline
     * Removes specified embedded font and returns presentation.
     */
    public function testDeleteEmbeddedFontOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFontOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFontOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFontOnline($testdocument, $testfontName, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteEmbeddedFontOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteEmbeddedFontOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFontOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteEmbeddedFontOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFontOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFontOnline($testdocument, $testfontName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFontOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFontOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFontOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteEmbeddedFontOnlineInvalidfontName()
    {
        $testdocument = TestUtils::getTestValue("deleteEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "deleteEmbeddedFontOnline", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFontOnline", "fontName", $testfontName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFontOnline($testdocument, $testfontName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFontOnline", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFontOnline", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFontOnline", "fontName", self::$okToFailValues);
        }
    }

    public function testDeleteEmbeddedFontOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("deleteEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteEmbeddedFontOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteEmbeddedFontOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteEmbeddedFontOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteEmbeddedFontOnline($testdocument, $testfontName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteEmbeddedFontOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteEmbeddedFontOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteEmbeddedFontOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteFile
     * Delete file
     */
    public function testDeleteFile()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteFile");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteFileInvalidpath()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteFile", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFile", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFile", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFile", "path", self::$okToFailValues);
        }
    }

    public function testDeleteFileInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "deleteFile", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFile", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFile", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFile", "storageName", self::$okToFailValues);
        }
    }

    public function testDeleteFileInvalidversionId()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "deleteFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", "versionId", $testversionId, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteFolder
     * Delete folder
     */
    public function testDeleteFolder()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteFolderInvalidpath()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        $testpath = TestUtils::invalidizeValue("path", "deleteFolder", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFolder", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFolder", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFolder", "path", self::$okToFailValues);
        }
    }

    public function testDeleteFolderInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        $teststorageName = TestUtils::invalidizeValue("storageName", "deleteFolder", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFolder", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFolder", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFolder", "storageName", self::$okToFailValues);
        }
    }

    public function testDeleteFolderInvalidrecursive()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        $testrecursive = TestUtils::invalidizeValue("recursive", "deleteFolder", $testrecursive, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", "recursive", $testrecursive, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFolder", "recursive", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFolder", "recursive", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFolder", "recursive", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlide
     * Remove notes slide.
     */
    public function testDeleteNotesSlide()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteParagraph
     * Remove a paragraph.
     */
    public function testDeleteParagraph()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "name", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "password", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteParagraphs
     * Remove a range of paragraphs.
     */
    public function testDeleteParagraphs()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidparagraphs()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testparagraphs = TestUtils::invalidizeValue("paragraphs", "deleteParagraphs", $testparagraphs, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "paragraphs", $testparagraphs, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "paragraphs", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteParagraphs", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteParagraphs", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deletePortion
     * Remove a portion.
     */
    public function testDeletePortion()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deletePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeletePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deletePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "name", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deletePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deletePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deletePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "deletePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deletePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "password", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deletePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "folder", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deletePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "storage", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deletePortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deletePortions
     * Remove a range of portions.
     */
    public function testDeletePortions()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deletePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeletePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deletePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "name", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deletePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deletePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deletePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidportions()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testportions = TestUtils::invalidizeValue("portions", "deletePortions", $testportions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "portions", $testportions, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "portions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "portions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "portions", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deletePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "password", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deletePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "folder", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deletePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "storage", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deletePortions", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deletePortions", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteProtection
     * Resets all presentation protection settings.
     */
    public function testDeleteProtection()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteProtection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteProtectionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteProtection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "name", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteProtection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "password", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteProtection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteProtection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteProtectionOnline
     * Resets all presentation protection settings.
     */
    public function testDeleteProtectionOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteProtectionOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("deleteProtectionOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtectionOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtectionOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteProtectionOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteProtectionOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteProtectionOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("deleteProtectionOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteProtectionOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtectionOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtectionOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtectionOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtectionOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtectionOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteProtectionOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("deleteProtectionOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteProtectionOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtectionOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtectionOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtectionOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtectionOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtectionOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSection
     * Delete a presentation section.
     */
    public function testDeleteSection()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidsectionIndex()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testsectionIndex = TestUtils::invalidizeValue("sectionIndex", "deleteSection", $testsectionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "sectionIndex", $testsectionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "sectionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "sectionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "sectionIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidwithSlides()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testwithSlides = TestUtils::invalidizeValue("withSlides", "deleteSection", $testwithSlides, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "withSlides", $testwithSlides, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "withSlides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "withSlides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "withSlides", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSections
     * Delete presentation sections.
     */
    public function testDeleteSections()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSections");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSectionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSections", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidsections()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testsections = TestUtils::invalidizeValue("sections", "deleteSections", $testsections, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "sections", $testsections, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "sections", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "sections", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "sections", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidwithSlides()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testwithSlides = TestUtils::invalidizeValue("withSlides", "deleteSections", $testwithSlides, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "withSlides", $testwithSlides, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "withSlides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "withSlides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "withSlides", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSections", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSections", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSections", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteShape
     * Remove a shape.
     */
    public function testDeleteShape()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "name", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "password", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteShapes
     * Remove a range of shapes.
     */
    public function testDeleteShapes()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "name", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "deleteShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "shapes", $testshapes, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "password", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteShapes", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteShapes", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlide
     * Delete a presentation slide by index.
     */
    public function testDeleteSlide()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlideComments
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.
     */
    public function testDeleteSlideComments()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlideComments");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSlideCommentsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSlideComments", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSlideComments", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidauthor()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteSlideComments", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "author", $testauthor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "author", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlideComments", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSlideComments", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSlideComments", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlideCommentsOnline
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.
     */
    public function testDeleteSlideCommentsOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteSlideCommentsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlideCommentsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteSlideCommentsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteSlideCommentsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteSlideCommentsOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("deleteSlideCommentsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSlideCommentsOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsOnlineInvalidauthor()
    {
        $testdocument = TestUtils::getTestValue("deleteSlideCommentsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteSlideCommentsOnline", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "author", $testauthor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "author", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteSlideCommentsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlideCommentsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlides
     * Delete presentation slides.
     */
    public function testDeleteSlides()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidslides()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testslides = TestUtils::invalidizeValue("slides", "deleteSlides", $testslides, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "slides", $testslides, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "slides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "slides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "slides", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSmartArtNode
     * Delete SmartArt node
     */
    public function testDeleteSmartArtNode()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSmartArtNode");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSmartArtNodeInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSmartArtNode", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSmartArtNode", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidsmartArtIndex()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testsmartArtIndex = TestUtils::invalidizeValue("smartArtIndex", "deleteSmartArtNode", $testsmartArtIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "smartArtIndex", $testsmartArtIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "smartArtIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "smartArtIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "smartArtIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidnodeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testnodeIndex = TestUtils::invalidizeValue("nodeIndex", "deleteSmartArtNode", $testnodeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "nodeIndex", $testnodeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "nodeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "nodeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "nodeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidsubNode()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testsubNode = TestUtils::invalidizeValue("subNode", "deleteSmartArtNode", $testsubNode, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "subNode", $testsubNode, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "subNode", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "subNode", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "subNode", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSmartArtNode", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSmartArtNode", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSmartArtNodeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSmartArtNode", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSmartArtNode", "slideIndex", self::$values, 'int');
        $testsmartArtIndex = TestUtils::getTestValue("deleteSmartArtNode", "smartArtIndex", self::$values, 'int');
        $testnodeIndex = TestUtils::getTestValue("deleteSmartArtNode", "nodeIndex", self::$values, 'int');
        $testsubNode = TestUtils::getTestValue("deleteSmartArtNode", "subNode", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSmartArtNode", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSmartArtNode", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSmartArtNode", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSmartArtNode", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSmartArtNode", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSmartArtNode($testname, $testslideIndex, $testsmartArtIndex, $testnodeIndex, $testsubNode, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSmartArtNode", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSmartArtNode", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSmartArtNode", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideAnimation
     * Remove animation from a special slide (master, layout, notes).
     */
    public function testDeleteSpecialSlideAnimation()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimation", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideAnimation", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimation", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimation", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimation", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimation", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideAnimationEffect
     * Remove an effect from special slide (master, layout, notes) animation.
     */
    public function testDeleteSpecialSlideAnimationEffect()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideAnimationEffect", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "deleteSpecialSlideAnimationEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideAnimationInteractiveSequence
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     */
    public function testDeleteSpecialSlideAnimationInteractiveSequence()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideAnimationInteractiveSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideAnimationInteractiveSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideAnimationInteractiveSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideAnimationInteractiveSequence", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "deleteSpecialSlideAnimationInteractiveSequence", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideAnimationInteractiveSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideAnimationInteractiveSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideAnimationInteractiveSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequence", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequence($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideAnimationInteractiveSequenceEffect
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     */
    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideAnimationInteractiveSequences
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     */
    public function testDeleteSpecialSlideAnimationInteractiveSequences()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideAnimationInteractiveSequences");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequencesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideAnimationInteractiveSequences", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequencesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideAnimationInteractiveSequences", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequencesInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideAnimationInteractiveSequences", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequencesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideAnimationInteractiveSequences", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequencesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideAnimationInteractiveSequences", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationInteractiveSequencesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideAnimationInteractiveSequences", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationInteractiveSequences", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationInteractiveSequences($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationInteractiveSequences", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationInteractiveSequences", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideAnimationMainSequence
     * Clear main sequence in special slide (master, layout, notes) animation.
     */
    public function testDeleteSpecialSlideAnimationMainSequence()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideAnimationMainSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideAnimationMainSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideAnimationMainSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationMainSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationMainSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationMainSequence", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationMainSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideAnimationMainSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationMainSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationMainSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationMainSequenceInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideAnimationMainSequence", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationMainSequence", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationMainSequence", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationMainSequence", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationMainSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideAnimationMainSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationMainSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationMainSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationMainSequence", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationMainSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideAnimationMainSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationMainSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationMainSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationMainSequence", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideAnimationMainSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideAnimationMainSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideAnimationMainSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideAnimationMainSequence", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideAnimationMainSequence($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideAnimationMainSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideAnimationMainSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideAnimationMainSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideParagraph
     * Remove a paragraph.
     */
    public function testDeleteSpecialSlideParagraph()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideParagraph", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSpecialSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteSpecialSlideParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteSpecialSlideParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideParagraphs
     * Remove a range of paragraphs.
     */
    public function testDeleteSpecialSlideParagraphs()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideParagraphs", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSpecialSlideParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidparagraphs()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testparagraphs = TestUtils::invalidizeValue("paragraphs", "deleteSpecialSlideParagraphs", $testparagraphs, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "paragraphs", $testparagraphs, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "paragraphs", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideParagraphsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteSpecialSlideParagraphs", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideParagraphs", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideParagraphs", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideParagraphs", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideParagraphs", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlidePortion
     * Remove a portion.
     */
    public function testDeleteSpecialSlidePortion()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlidePortion", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSpecialSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteSpecialSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "deleteSpecialSlidePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteSpecialSlidePortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlidePortions
     * Remove a range of portions.
     */
    public function testDeleteSpecialSlidePortions()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlidePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlidePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlidePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlidePortions", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSpecialSlidePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteSpecialSlidePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidportions()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testportions = TestUtils::invalidizeValue("portions", "deleteSpecialSlidePortions", $testportions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "portions", $testportions, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "portions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "portions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "portions", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlidePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlidePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlidePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlidePortionsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSpecialSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlidePortions", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteSpecialSlidePortions", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlidePortions", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlidePortions", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlidePortions", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlidePortions", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideShape
     * Remove a shape.
     */
    public function testDeleteSpecialSlideShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideShape", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSpecialSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteSpecialSlideShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSpecialSlideShapes
     * Remove a range of shapes.
     */
    public function testDeleteSpecialSlideShapes()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSpecialSlideShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSpecialSlideShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSpecialSlideShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidslideType()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "deleteSpecialSlideShapes", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "slideType", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "deleteSpecialSlideShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "shapes", $testshapes, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSpecialSlideShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSpecialSlideShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSpecialSlideShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "storage", self::$okToFailValues);
        }
    }

    public function testDeleteSpecialSlideShapesInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("deleteSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("deleteSpecialSlideShapes", "slideType", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSpecialSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("deleteSpecialSlideShapes", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "deleteSpecialSlideShapes", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSpecialSlideShapes", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testshapes, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSpecialSlideShapes", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSpecialSlideShapes", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSpecialSlideShapes", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteUnusedLayoutSlides
     * Removes unused layout slides.
     */
    public function testDeleteUnusedLayoutSlides()
    {
        $testname = TestUtils::getTestValue("deleteUnusedLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedLayoutSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteUnusedLayoutSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteUnusedLayoutSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteUnusedLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedLayoutSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteUnusedLayoutSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedLayoutSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedLayoutSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedLayoutSlides", "name", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedLayoutSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteUnusedLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedLayoutSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteUnusedLayoutSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedLayoutSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedLayoutSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedLayoutSlides", "password", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedLayoutSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteUnusedLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedLayoutSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteUnusedLayoutSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedLayoutSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedLayoutSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedLayoutSlides", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedLayoutSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteUnusedLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedLayoutSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteUnusedLayoutSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedLayoutSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedLayoutSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedLayoutSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteUnusedLayoutSlidesOnline
     * Removes unused layout slides.
     */
    public function testDeleteUnusedLayoutSlidesOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedLayoutSlidesOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlidesOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlidesOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlidesOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteUnusedLayoutSlidesOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteUnusedLayoutSlidesOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedLayoutSlidesOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlidesOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteUnusedLayoutSlidesOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlidesOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlidesOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedLayoutSlidesOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedLayoutSlidesOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedLayoutSlidesOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedLayoutSlidesOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedLayoutSlidesOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("deleteUnusedLayoutSlidesOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteUnusedLayoutSlidesOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedLayoutSlidesOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedLayoutSlidesOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedLayoutSlidesOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedLayoutSlidesOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedLayoutSlidesOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteUnusedMasterSlides
     * Removes unused master slides.
     */
    public function testDeleteUnusedMasterSlides()
    {
        $testname = TestUtils::getTestValue("deleteUnusedMasterSlides", "name", self::$values, 'string');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlides", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedMasterSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlides($testname, $testignorePreserveField, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteUnusedMasterSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteUnusedMasterSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteUnusedMasterSlides", "name", self::$values, 'string');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlides", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedMasterSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteUnusedMasterSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlides($testname, $testignorePreserveField, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlides", "name", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedMasterSlidesInvalidignorePreserveField()
    {
        $testname = TestUtils::getTestValue("deleteUnusedMasterSlides", "name", self::$values, 'string');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlides", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedMasterSlides", "storage", self::$values, 'string');
        $testignorePreserveField = TestUtils::invalidizeValue("ignorePreserveField", "deleteUnusedMasterSlides", $testignorePreserveField, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlides", "ignorePreserveField", $testignorePreserveField, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlides($testname, $testignorePreserveField, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlides", "ignorePreserveField", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlides", "ignorePreserveField", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlides", "ignorePreserveField", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedMasterSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteUnusedMasterSlides", "name", self::$values, 'string');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlides", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedMasterSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteUnusedMasterSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlides($testname, $testignorePreserveField, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlides", "password", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedMasterSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteUnusedMasterSlides", "name", self::$values, 'string');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlides", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedMasterSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteUnusedMasterSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlides($testname, $testignorePreserveField, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlides", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedMasterSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteUnusedMasterSlides", "name", self::$values, 'string');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlides", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteUnusedMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteUnusedMasterSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteUnusedMasterSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlides($testname, $testignorePreserveField, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteUnusedMasterSlidesOnline
     * Removes unused master slides.
     */
    public function testDeleteUnusedMasterSlidesOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "document", self::$values, '\SplFileObject');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlidesOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlidesOnline($testdocument, $testignorePreserveField, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteUnusedMasterSlidesOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteUnusedMasterSlidesOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "document", self::$values, '\SplFileObject');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteUnusedMasterSlidesOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlidesOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlidesOnline($testdocument, $testignorePreserveField, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlidesOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlidesOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlidesOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedMasterSlidesOnlineInvalidignorePreserveField()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "document", self::$values, '\SplFileObject');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "password", self::$values, 'string');
        $testignorePreserveField = TestUtils::invalidizeValue("ignorePreserveField", "deleteUnusedMasterSlidesOnline", $testignorePreserveField, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlidesOnline", "ignorePreserveField", $testignorePreserveField, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlidesOnline($testdocument, $testignorePreserveField, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlidesOnline", "ignorePreserveField", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlidesOnline", "ignorePreserveField", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlidesOnline", "ignorePreserveField", self::$okToFailValues);
        }
    }

    public function testDeleteUnusedMasterSlidesOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "document", self::$values, '\SplFileObject');
        $testignorePreserveField = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "ignorePreserveField", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteUnusedMasterSlidesOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteUnusedMasterSlidesOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteUnusedMasterSlidesOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteUnusedMasterSlidesOnline($testdocument, $testignorePreserveField, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteUnusedMasterSlidesOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteUnusedMasterSlidesOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteUnusedMasterSlidesOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteWatermark
     * Removes shapes with name \"watermark\" from the presentation.
     */
    public function testDeleteWatermark()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteWatermark");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteWatermarkInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteWatermark", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "name", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidshapeName()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testshapeName = TestUtils::invalidizeValue("shapeName", "deleteWatermark", $testshapeName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "shapeName", $testshapeName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "shapeName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "shapeName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "shapeName", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteWatermark", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "password", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteWatermark", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteWatermark", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteWatermarkOnline
     * Removes shapes with name \"watermark\" from the presentation.
     */
    public function testDeleteWatermarkOnline()
    {
        $testdocument = TestUtils::getTestValue("deleteWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteWatermarkOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteWatermarkOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("deleteWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "deleteWatermarkOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermarkOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermarkOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermarkOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkOnlineInvalidshapeName()
    {
        $testdocument = TestUtils::getTestValue("deleteWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        $testshapeName = TestUtils::invalidizeValue("shapeName", "deleteWatermarkOnline", $testshapeName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", "shapeName", $testshapeName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermarkOnline", "shapeName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermarkOnline", "shapeName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermarkOnline", "shapeName", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("deleteWatermarkOnline", "document", self::$values, '\SplFileObject');
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteWatermarkOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermarkOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermarkOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermarkOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadFile
     * Download file
     */
    public function testDownloadFile()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadFile");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadFileInvalidpath()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "downloadFile", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadFile", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadFile", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadFile", "path", self::$okToFailValues);
        }
    }

    public function testDownloadFileInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "downloadFile", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadFile", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadFile", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadFile", "storageName", self::$okToFailValues);
        }
    }

    public function testDownloadFileInvalidversionId()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "downloadFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", "versionId", $testversionId, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImage
     * Get image in specified format.
     */
    public function testDownloadImage()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImage");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImage", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidindex()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImage", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "index", $testindex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImage", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImage", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImage", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImage", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImageDefaultFormat
     * Get image binary data.
     */
    public function testDownloadImageDefaultFormat()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImageDefaultFormat");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageDefaultFormatInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImageDefaultFormat", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidindex()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImageDefaultFormat", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "index", $testindex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImageDefaultFormat", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImageDefaultFormat", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImageDefaultFormat", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImageDefaultFormatOnline
     * Get image binary data.
     */
    public function testDownloadImageDefaultFormatOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImageDefaultFormatOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageDefaultFormatOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "downloadImageDefaultFormatOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormatOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatOnlineInvalidindex()
    {
        $testdocument = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImageDefaultFormatOnline", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", "index", $testindex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormatOnline", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormatOnline", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormatOnline", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImageDefaultFormatOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormatOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImageOnline
     * Get image in specified format.
     */
    public function testDownloadImageOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadImageOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImageOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadImageOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "downloadImageOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImageOnlineInvalidindex()
    {
        $testdocument = TestUtils::getTestValue("downloadImageOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImageOnline", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "index", $testindex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("downloadImageOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImageOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImageOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadImageOnline", "document", self::$values, '\SplFileObject');
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImageOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImages
     * Get all presentation images in specified format.
     */
    public function testDownloadImages()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImages");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImages", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImages", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImages", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImages", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImages", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImagesDefaultFormat
     * Get all presentation images.
     */
    public function testDownloadImagesDefaultFormat()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImagesDefaultFormat");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesDefaultFormatInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImagesDefaultFormat", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImagesDefaultFormat", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImagesDefaultFormat", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImagesDefaultFormat", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImagesDefaultFormatOnline
     * Get all presentation images.
     */
    public function testDownloadImagesDefaultFormatOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormatOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormatOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImagesDefaultFormatOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesDefaultFormatOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "downloadImagesDefaultFormatOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormatOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormatOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormatOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImagesDefaultFormatOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormatOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormatOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormatOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImagesOnline
     * Get all presentation images in specified format.
     */
    public function testDownloadImagesOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImagesOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "downloadImagesOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImagesOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImagesOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImagesOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadImagesOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImagesOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadNotesSlide
     * Convert notes slide to the specified image format.
     */
    public function testDownloadNotesSlide()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadNotesSlide", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "format", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidwidth()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadNotesSlide", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "width", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidheight()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadNotesSlide", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "height", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadNotesSlide", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadNotesSlideOnline
     * Convert notes slide to the specified image format.
     */
    public function testDownloadNotesSlideOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadNotesSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadNotesSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "downloadNotesSlideOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadNotesSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadNotesSlideOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadNotesSlideOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "width", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidheight()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadNotesSlideOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "height", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadNotesSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "password", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("downloadNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadNotesSlideOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadPortionAsMathMl
     * Convert Mathematical Text to MathML Format
     */
    public function testDownloadPortionAsMathMl()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadPortionAsMathMl");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadPortionAsMathMlInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadPortionAsMathMl", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "name", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadPortionAsMathMl", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadPortionAsMathMl", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "downloadPortionAsMathMl", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "downloadPortionAsMathMl", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "portionIndex", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadPortionAsMathMl", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "password", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadPortionAsMathMl", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadPortionAsMathMlInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadPortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("downloadPortionAsMathMl", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadPortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPortionAsMathMl", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadPortionAsMathMl", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPortionAsMathMl", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPortionAsMathMl", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPortionAsMathMl", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPortionAsMathMl", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadPresentation
     * Save a presentation to a specified format.
     */
    public function testDownloadPresentation()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadPresentation");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadPresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testname = TestUtils::invalidizeValue("name", "downloadPresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "name", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testformat = TestUtils::invalidizeValue("format", "downloadPresentation", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "format", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testoptions = TestUtils::invalidizeValue("options", "downloadPresentation", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "options", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testpassword = TestUtils::invalidizeValue("password", "downloadPresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "password", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadPresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadPresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadPresentation", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidslides()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("downloadPresentation", "slides", self::$values, 'array');
        $testslides = TestUtils::invalidizeValue("slides", "downloadPresentation", $testslides, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "slides", $testslides, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "slides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "slides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "slides", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadShape
     * Render shape to specified picture format.
     */
    public function testDownloadShape()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadShape");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "name", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "format", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "options", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "scaleX", $testscaleX, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "scaleY", $testscaleY, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "bounds", $testbounds, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "password", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "downloadShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadShapeOnline
     * Render shape to specified picture format.
     */
    public function testDownloadShapeOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadShapeOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadShapeOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testdocument = TestUtils::invalidizeValue("document", "downloadShapeOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadShapeOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidshapeIndex()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadShapeOnline", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testformat = TestUtils::invalidizeValue("format", "downloadShapeOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidscaleX()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadShapeOnline", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "scaleX", $testscaleX, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidscaleY()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadShapeOnline", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "scaleY", $testscaleY, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidbounds()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadShapeOnline", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "bounds", $testbounds, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testpassword = TestUtils::invalidizeValue("password", "downloadShapeOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "password", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadShapeOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadShapeOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidoptions()
    {
        $testdocument = TestUtils::getTestValue("downloadShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testoptions = TestUtils::invalidizeValue("options", "downloadShapeOnline", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "options", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadSlide
     * Save a slide to a specified format.
     */
    public function testDownloadSlide()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadSlide");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "name", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadSlide", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "format", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadSlide", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "options", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidwidth()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadSlide", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "width", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidheight()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadSlide", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "height", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "password", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadSlide", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadSlideOnline
     * Save a slide to a specified format.
     */
    public function testDownloadSlideOnline()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testdocument = TestUtils::invalidizeValue("document", "downloadSlideOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::invalidizeValue("format", "downloadSlideOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::invalidizeValue("width", "downloadSlideOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "width", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidheight()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testheight = TestUtils::invalidizeValue("height", "downloadSlideOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "height", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::invalidizeValue("password", "downloadSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "password", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadSlideOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadSlideOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidoptions()
    {
        $testdocument = TestUtils::getTestValue("downloadSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testoptions = TestUtils::invalidizeValue("options", "downloadSlideOnline", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "options", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadSpecialSlideShape
     * Render shape to specified picture format.
     */
    public function testDownloadSpecialSlideShape()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadSpecialSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadSpecialSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadSpecialSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadSpecialSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidslideType()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "downloadSpecialSlideShape", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "slideType", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadSpecialSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadSpecialSlideShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "format", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadSpecialSlideShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "options", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadSpecialSlideShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "scaleX", $testscaleX, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadSpecialSlideShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "scaleY", $testscaleY, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadSpecialSlideShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "bounds", $testbounds, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadSpecialSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadSpecialSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadSpecialSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadSpecialSlideShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testDownloadSpecialSlideShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("downloadSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("downloadSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSpecialSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("downloadSpecialSlideShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "downloadSpecialSlideShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSpecialSlideShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSpecialSlideShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getAnimation
     * Read slide animation effects.
     */
    public function testGetAnimation()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "name", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getAnimation", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getAnimation", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "password", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getApiInfo
     * Get API info.
     */
    public function testGetApiInfo()
    {
        list($expectedCode, $expectedMessage) = $this->initialize("getApiInfo", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getApiInfo();
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getApiInfo");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    /**
     * Test case for getBackground
     * Read slide background info.
     */
    public function testGetBackground()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getBackground");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetBackgroundInvalidname()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getBackground", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "name", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getBackground", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getBackground", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "password", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getBackground", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "folder", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getBackground", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getColorScheme
     * Read slide theme color scheme info.
     */
    public function testGetColorScheme()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getColorScheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetColorSchemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getColorScheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "name", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getColorScheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getColorScheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "password", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getColorScheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getColorScheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getDiscUsage
     * Get disc usage
     */
    public function testGetDiscUsage()
    {
        $teststorageName = TestUtils::getTestValue("getDiscUsage", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDiscUsage", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDiscUsage($teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getDiscUsage");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetDiscUsageInvalidstorageName()
    {
        $teststorageName = TestUtils::getTestValue("getDiscUsage", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "getDiscUsage", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDiscUsage", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDiscUsage($teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDiscUsage", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDiscUsage", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDiscUsage", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for getDocumentProperties
     * Read presentation document properties.
     */
    public function testGetDocumentProperties()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getDocumentProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetDocumentPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getDocumentProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getDocumentProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getDocumentProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getDocumentProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getDocumentProperty
     * Read presentation document property.
     */
    public function testGetDocumentProperty()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getDocumentProperty");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetDocumentPropertyInvalidname()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getDocumentProperty", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "name", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidpropertyName()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testpropertyName = TestUtils::invalidizeValue("propertyName", "getDocumentProperty", $testpropertyName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "propertyName", $testpropertyName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "propertyName", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getDocumentProperty", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "password", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getDocumentProperty", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "folder", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getDocumentProperty", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFileVersions
     * Get file versions
     */
    public function testGetFileVersions()
    {
        $testpath = TestUtils::getTestValue("getFileVersions", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFileVersions", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFileVersions", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFileVersions($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFileVersions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFileVersionsInvalidpath()
    {
        $testpath = TestUtils::getTestValue("getFileVersions", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFileVersions", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getFileVersions", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFileVersions", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFileVersions($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFileVersions", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFileVersions", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFileVersions", "path", self::$okToFailValues);
        }
    }

    public function testGetFileVersionsInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("getFileVersions", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFileVersions", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "getFileVersions", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFileVersions", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFileVersions($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFileVersions", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFileVersions", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFileVersions", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFilesList
     * Get all files and folders within a folder
     */
    public function testGetFilesList()
    {
        $testpath = TestUtils::getTestValue("getFilesList", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFilesList", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFilesList", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFilesList($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFilesList");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFilesListInvalidpath()
    {
        $testpath = TestUtils::getTestValue("getFilesList", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFilesList", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getFilesList", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFilesList", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFilesList($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFilesList", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFilesList", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFilesList", "path", self::$okToFailValues);
        }
    }

    public function testGetFilesListInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("getFilesList", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFilesList", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "getFilesList", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFilesList", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFilesList($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFilesList", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFilesList", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFilesList", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFontScheme
     * Read slide theme font scheme info.
     */
    public function testGetFontScheme()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFontScheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFontSchemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getFontScheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "name", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getFontScheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getFontScheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "password", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getFontScheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getFontScheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFonts
     * Returns presentation fonts info.
     */
    public function testGetFonts()
    {
        $testname = TestUtils::getTestValue("getFonts", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getFonts", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFonts", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFonts", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFonts", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFonts($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFonts");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFontsInvalidname()
    {
        $testname = TestUtils::getTestValue("getFonts", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getFonts", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFonts", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFonts", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getFonts", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFonts", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFonts($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFonts", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFonts", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFonts", "name", self::$okToFailValues);
        }
    }

    public function testGetFontsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getFonts", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getFonts", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFonts", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFonts", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getFonts", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFonts", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFonts($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFonts", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFonts", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFonts", "password", self::$okToFailValues);
        }
    }

    public function testGetFontsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getFonts", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getFonts", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFonts", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFonts", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getFonts", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFonts", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFonts($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFonts", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFonts", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFonts", "folder", self::$okToFailValues);
        }
    }

    public function testGetFontsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getFonts", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getFonts", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFonts", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFonts", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getFonts", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFonts", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFonts($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFonts", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFonts", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFonts", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFontsOnline
     * Returns presentation fonts info.
     */
    public function testGetFontsOnline()
    {
        $testdocument = TestUtils::getTestValue("getFontsOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("getFontsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontsOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontsOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFontsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFontsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("getFontsOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("getFontsOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "getFontsOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontsOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontsOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontsOnline", "document", self::$okToFailValues);
        }
    }

    public function testGetFontsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("getFontsOnline", "document", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("getFontsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getFontsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontsOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontsOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFormatScheme
     * Read slide theme format scheme info.
     */
    public function testGetFormatScheme()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFormatScheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFormatSchemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getFormatScheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "name", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getFormatScheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getFormatScheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "password", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getFormatScheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getFormatScheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getLayoutSlide
     * Read presentation layoutSlide info.
     */
    public function testGetLayoutSlide()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getLayoutSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetLayoutSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getLayoutSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getLayoutSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getLayoutSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getLayoutSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getLayoutSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getLayoutSlides
     * Read presentation layoutSlides info.
     */
    public function testGetLayoutSlides()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getLayoutSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetLayoutSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getLayoutSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "name", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getLayoutSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "password", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getLayoutSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "folder", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getLayoutSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getMasterSlide
     * Read presentation masterSlide info.
     */
    public function testGetMasterSlide()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getMasterSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetMasterSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getMasterSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getMasterSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getMasterSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getMasterSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getMasterSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getMasterSlides
     * Read presentation masterSlides info.
     */
    public function testGetMasterSlides()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getMasterSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetMasterSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getMasterSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "name", self::$okToFailValues);
        }
    }

    public function testGetMasterSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getMasterSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "password", self::$okToFailValues);
        }
    }

    public function testGetMasterSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getMasterSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "folder", self::$okToFailValues);
        }
    }

    public function testGetMasterSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getMasterSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlide
     * Read notes slide info.
     */
    public function testGetNotesSlide()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideHeaderFooter
     * Get header/footer info for the notes slide.
     */
    public function testGetNotesSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideOnline
     * Read notes slide info.
     */
    public function testGetNotesSlideOnline()
    {
        $testdocument = TestUtils::getTestValue("getNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("getNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "getNotesSlideOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("getNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("getNotesSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for getParagraph
     * Read shape paragraph info.
     */
    public function testGetParagraph()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "name", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "password", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getParagraphEffective
     * Read effective paragraph info.
     */
    public function testGetParagraphEffective()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getParagraphEffective");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetParagraphEffectiveInvalidname()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getParagraphEffective", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "name", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getParagraphEffective", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getParagraphEffective", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getParagraphEffective", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getParagraphEffective", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "password", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getParagraphEffective", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "folder", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getParagraphEffective", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "storage", self::$okToFailValues);
        }
    }

    public function testGetParagraphEffectiveInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getParagraphEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphEffective", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphEffective", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getParagraphEffective", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphEffective", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphEffective", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphEffective", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphEffective", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getParagraphRectangle
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     */
    public function testGetParagraphRectangle()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getParagraphRectangle");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetParagraphRectangleInvalidname()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getParagraphRectangle", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "name", self::$okToFailValues);
        }
    }

    public function testGetParagraphRectangleInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getParagraphRectangle", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphRectangleInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getParagraphRectangle", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphRectangleInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getParagraphRectangle", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphRectangleInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getParagraphRectangle", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "password", self::$okToFailValues);
        }
    }

    public function testGetParagraphRectangleInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getParagraphRectangle", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "folder", self::$okToFailValues);
        }
    }

    public function testGetParagraphRectangleInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getParagraphRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraphRectangle", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphRectangle", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getParagraphRectangle", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphRectangle", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphRectangle", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphRectangle", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphRectangle", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getParagraphs
     * Read shape paragraphs info.
     */
    public function testGetParagraphs()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "storage", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getParagraphs", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getParagraphs", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPlaceholder
     * Read slide placeholder info.
     */
    public function testGetPlaceholder()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPlaceholder");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPlaceholderInvalidname()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPlaceholder", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "name", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPlaceholder", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidplaceholderIndex()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testplaceholderIndex = TestUtils::invalidizeValue("placeholderIndex", "getPlaceholder", $testplaceholderIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "placeholderIndex", $testplaceholderIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "placeholderIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "placeholderIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "placeholderIndex", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPlaceholder", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "password", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPlaceholder", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "folder", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPlaceholder", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPlaceholders
     * Read slide placeholders info.
     */
    public function testGetPlaceholders()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPlaceholders");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPlaceholdersInvalidname()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPlaceholders", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "name", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPlaceholders", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPlaceholders", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "password", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPlaceholders", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "folder", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPlaceholders", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPortion
     * Read paragraph portion info.
     */
    public function testGetPortion()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPortionInvalidname()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "name", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getPortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getPortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getPortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "password", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "folder", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "storage", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getPortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPortionEffective
     * Read effective portion info.
     */
    public function testGetPortionEffective()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPortionEffective");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPortionEffectiveInvalidname()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPortionEffective", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "name", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPortionEffective", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getPortionEffective", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getPortionEffective", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getPortionEffective", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPortionEffective", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "password", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPortionEffective", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "folder", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPortionEffective", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "storage", self::$okToFailValues);
        }
    }

    public function testGetPortionEffectiveInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getPortionEffective", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionEffective", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionEffective", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionEffective", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionEffective", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionEffective", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionEffective", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionEffective", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortionEffective", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getPortionEffective", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionEffective", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionEffective($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionEffective", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionEffective", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionEffective", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPortionRectangle
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     */
    public function testGetPortionRectangle()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPortionRectangle");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPortionRectangleInvalidname()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPortionRectangle", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "name", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPortionRectangle", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getPortionRectangle", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getPortionRectangle", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getPortionRectangle", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPortionRectangle", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "password", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPortionRectangle", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "folder", self::$okToFailValues);
        }
    }

    public function testGetPortionRectangleInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPortionRectangle", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortionRectangle", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortionRectangle", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortionRectangle", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortionRectangle", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortionRectangle", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortionRectangle", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortionRectangle", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPortionRectangle", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortionRectangle", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortionRectangle($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortionRectangle", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortionRectangle", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortionRectangle", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPortions
     * Read paragraph portions info.
     */
    public function testGetPortions()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "name", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getPortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getPortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "password", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "folder", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "storage", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getPortions", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getPortions", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPresentation
     * Read presentation info.
     */
    public function testGetPresentation()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPresentation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "name", self::$okToFailValues);
        }
    }

    public function testGetPresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "password", self::$okToFailValues);
        }
    }

    public function testGetPresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "folder", self::$okToFailValues);
        }
    }

    public function testGetPresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPresentationImages
     * Read presentation images info.
     */
    public function testGetPresentationImages()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPresentationImages");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPresentationImagesInvalidname()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPresentationImages", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "name", self::$okToFailValues);
        }
    }

    public function testGetPresentationImagesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPresentationImages", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "password", self::$okToFailValues);
        }
    }

    public function testGetPresentationImagesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPresentationImages", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "folder", self::$okToFailValues);
        }
    }

    public function testGetPresentationImagesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPresentationImages", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPresentationTextItems
     * Extract presentation text items.
     */
    public function testGetPresentationTextItems()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPresentationTextItems");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPresentationTextItemsInvalidname()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPresentationTextItems", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "name", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidwithEmpty()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testwithEmpty = TestUtils::invalidizeValue("withEmpty", "getPresentationTextItems", $testwithEmpty, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "withEmpty", $testwithEmpty, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "withEmpty", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "withEmpty", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "withEmpty", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPresentationTextItems", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "password", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPresentationTextItems", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "folder", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPresentationTextItems", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getProtectionProperties
     * Read presentation protection properties.
     */
    public function testGetProtectionProperties()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getProtectionProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetProtectionPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getProtectionProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetProtectionPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getProtectionProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetProtectionPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getProtectionProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetProtectionPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getProtectionProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSections
     * Read presentation sections info.
     */
    public function testGetSections()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSections");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSectionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSections", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "name", self::$okToFailValues);
        }
    }

    public function testGetSectionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSections", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "password", self::$okToFailValues);
        }
    }

    public function testGetSectionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSections", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "folder", self::$okToFailValues);
        }
    }

    public function testGetSectionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSections", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getShape
     * Read slide shape info.
     */
    public function testGetShape()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "name", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "password", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "folder", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "storage", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getShapeGeometryPath
     * Returns geometry path of the shape
     */
    public function testGetShapeGeometryPath()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getShapeGeometryPath");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetShapeGeometryPathInvalidname()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getShapeGeometryPath", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapeGeometryPath", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapeGeometryPath", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapeGeometryPath", "name", self::$okToFailValues);
        }
    }

    public function testGetShapeGeometryPathInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getShapeGeometryPath", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapeGeometryPath", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapeGeometryPath", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapeGeometryPath", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetShapeGeometryPathInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getShapeGeometryPath", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapeGeometryPath", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapeGeometryPath", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapeGeometryPath", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetShapeGeometryPathInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getShapeGeometryPath", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapeGeometryPath", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapeGeometryPath", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapeGeometryPath", "password", self::$okToFailValues);
        }
    }

    public function testGetShapeGeometryPathInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getShapeGeometryPath", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapeGeometryPath", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapeGeometryPath", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapeGeometryPath", "folder", self::$okToFailValues);
        }
    }

    public function testGetShapeGeometryPathInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapeGeometryPath", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getShapeGeometryPath", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapeGeometryPath", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapeGeometryPath", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapeGeometryPath", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapeGeometryPath", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getShapes
     * Read slide shapes info.
     */
    public function testGetShapes()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "name", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "password", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "folder", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "storage", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidshapeType()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $testshapeType = TestUtils::invalidizeValue("shapeType", "getShapes", $testshapeType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "shapeType", $testshapeType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "shapeType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "shapeType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "shapeType", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testshapeType = TestUtils::getTestValue("getShapes", "shapeType", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getShapes", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getShapes", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage, $testshapeType, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlide
     * Read presentation slide info.
     */
    public function testGetSlide()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideComments
     * Read presentation slide comments.
     */
    public function testGetSlideComments()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideComments");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideCommentsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideComments", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideComments", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideComments", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideComments", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideComments", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideHeaderFooter
     * Get footer info for the slide.
     */
    public function testGetSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideImages
     * Read slide images info.
     */
    public function testGetSlideImages()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideImages");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideImagesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideImages", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideImages", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideImages", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideImages", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideImages", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideProperties
     * Read presentation slide properties.
     */
    public function testGetSlideProperties()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlidePropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetSlidePropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetSlidePropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlidePropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideShowProperties
     * Read presentation slide show properties.
     */
    public function testGetSlideShowProperties()
    {
        $testname = TestUtils::getTestValue("getSlideShowProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideShowProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideShowProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideShowProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideShowProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideShowPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideShowProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideShowProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideShowProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideShowProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideShowProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideShowProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideShowProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideShowProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideShowPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideShowProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideShowProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideShowProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideShowProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideShowProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideShowProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideShowProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideShowProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideShowPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideShowProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideShowProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideShowProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideShowProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideShowProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideShowProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideShowProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideShowProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideShowPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideShowProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideShowProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideShowProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideShowProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideShowProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideShowProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideShowProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideShowProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideTextItems
     * Extract slide text items.
     */
    public function testGetSlideTextItems()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideTextItems");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideTextItemsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideTextItems", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideTextItems", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidwithEmpty()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testwithEmpty = TestUtils::invalidizeValue("withEmpty", "getSlideTextItems", $testwithEmpty, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "withEmpty", $testwithEmpty, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "withEmpty", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "withEmpty", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "withEmpty", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideTextItems", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideTextItems", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideTextItems", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlides
     * Read presentation slides info.
     */
    public function testGetSlides()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "name", self::$okToFailValues);
        }
    }

    public function testGetSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "password", self::$okToFailValues);
        }
    }

    public function testGetSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlideAnimation
     * Read special slide (master, layout, notes) animation effects.
     */
    public function testGetSpecialSlideAnimation()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlideAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlideAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlideAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlideAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlideAnimation", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSpecialSlideAnimation", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSpecialSlideAnimation", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlideAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlideAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideAnimation", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlideAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideAnimation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlideParagraph
     * Read shape paragraph info.
     */
    public function testGetSpecialSlideParagraph()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlideParagraph", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSpecialSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSpecialSlideParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getSpecialSlideParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlideParagraphs
     * Read special shape paragraphs info.
     */
    public function testGetSpecialSlideParagraphs()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlideParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlideParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlideParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlideParagraphs", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSpecialSlideParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlideParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlideParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlideParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "storage", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideParagraphsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideParagraphs", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideParagraphs", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideParagraphs", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getSpecialSlideParagraphs", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideParagraphs", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideParagraphs($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideParagraphs", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideParagraphs", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideParagraphs", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlidePortion
     * Read paragraph portion info.
     */
    public function testGetSpecialSlidePortion()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlidePortion", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSpecialSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSpecialSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getSpecialSlidePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "storage", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getSpecialSlidePortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlidePortions
     * Read paragraph portions info.
     */
    public function testGetSpecialSlidePortions()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlidePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlidePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlidePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlidePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlidePortions", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSpecialSlidePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSpecialSlidePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlidePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlidePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlidePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "storage", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlidePortionsInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlidePortions", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlidePortions", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSpecialSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlidePortions", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlidePortions", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getSpecialSlidePortions", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlidePortions", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlidePortions($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlidePortions", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlidePortions", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlidePortions", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlideShape
     * Read special slide shape info.
     */
    public function testGetSpecialSlideShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlideShape", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSpecialSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getSpecialSlideShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSpecialSlideShapes
     * Read special slide shapes info.
     */
    public function testGetSpecialSlideShapes()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSpecialSlideShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSpecialSlideShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSpecialSlideShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "name", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSpecialSlideShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapesInvalidslideType()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "getSpecialSlideShapes", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "slideType", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSpecialSlideShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "password", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSpecialSlideShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "folder", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSpecialSlideShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "storage", self::$okToFailValues);
        }
    }

    public function testGetSpecialSlideShapesInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("getSpecialSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSpecialSlideShapes", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("getSpecialSlideShapes", "slideType", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSpecialSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSpecialSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSpecialSlideShapes", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("getSpecialSlideShapes", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "getSpecialSlideShapes", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSpecialSlideShapes", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSpecialSlideShapes($testname, $testslideIndex, $testslideType, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSpecialSlideShapes", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSpecialSlideShapes", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSpecialSlideShapes", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for getTheme
     * Read slide theme info.
     */
    public function testGetTheme()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getTheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetThemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getTheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "name", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getTheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getTheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "password", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getTheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getTheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getViewProperties
     * Read presentation document properties.
     */
    public function testGetViewProperties()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getViewProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetViewPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getViewProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetViewPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getViewProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetViewPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getViewProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetViewPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getViewProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for highlightShapeRegex
     * Highlight all matches of sample in text frame text using specified color.
     */
    public function testHighlightShapeRegex()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "highlightShapeRegex");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testHighlightShapeRegexInvalidname()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "highlightShapeRegex", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "name", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "highlightShapeRegex", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "slideIndex", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "highlightShapeRegex", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidregex()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testregex = TestUtils::invalidizeValue("regex", "highlightShapeRegex", $testregex, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "regex", $testregex, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "regex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "regex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "regex", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidcolor()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testcolor = TestUtils::invalidizeValue("color", "highlightShapeRegex", $testcolor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "color", $testcolor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "color", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "color", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "color", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidwholeWordsOnly()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::invalidizeValue("wholeWordsOnly", "highlightShapeRegex", $testwholeWordsOnly, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "wholeWordsOnly", $testwholeWordsOnly, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "wholeWordsOnly", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "wholeWordsOnly", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "wholeWordsOnly", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidignoreCase()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "highlightShapeRegex", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "ignoreCase", $testignoreCase, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidpassword()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "highlightShapeRegex", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "password", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidfolder()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "highlightShapeRegex", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "folder", self::$okToFailValues);
        }
    }

    public function testHighlightShapeRegexInvalidstorage()
    {
        $testname = TestUtils::getTestValue("highlightShapeRegex", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeRegex", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeRegex", "shapeIndex", self::$values, 'int');
        $testregex = TestUtils::getTestValue("highlightShapeRegex", "regex", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeRegex", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeRegex", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeRegex", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeRegex", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeRegex", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeRegex", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "highlightShapeRegex", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeRegex", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeRegex($testname, $testslideIndex, $testshapeIndex, $testregex, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeRegex", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeRegex", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeRegex", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for highlightShapeText
     * Highlight all matches of sample in text frame text using specified color.
     */
    public function testHighlightShapeText()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "highlightShapeText");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testHighlightShapeTextInvalidname()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "highlightShapeText", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "name", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "highlightShapeText", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "slideIndex", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "highlightShapeText", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidtext()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testtext = TestUtils::invalidizeValue("text", "highlightShapeText", $testtext, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "text", $testtext, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "text", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "text", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "text", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidcolor()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testcolor = TestUtils::invalidizeValue("color", "highlightShapeText", $testcolor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "color", $testcolor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "color", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "color", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "color", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidwholeWordsOnly()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::invalidizeValue("wholeWordsOnly", "highlightShapeText", $testwholeWordsOnly, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "wholeWordsOnly", $testwholeWordsOnly, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "wholeWordsOnly", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "wholeWordsOnly", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "wholeWordsOnly", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidignoreCase()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "highlightShapeText", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "ignoreCase", $testignoreCase, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidpassword()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "highlightShapeText", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "password", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidfolder()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "highlightShapeText", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "folder", self::$okToFailValues);
        }
    }

    public function testHighlightShapeTextInvalidstorage()
    {
        $testname = TestUtils::getTestValue("highlightShapeText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("highlightShapeText", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("highlightShapeText", "shapeIndex", self::$values, 'int');
        $testtext = TestUtils::getTestValue("highlightShapeText", "text", self::$values, 'string');
        $testcolor = TestUtils::getTestValue("highlightShapeText", "color", self::$values, 'string');
        $testwholeWordsOnly = TestUtils::getTestValue("highlightShapeText", "wholeWordsOnly", self::$values, 'bool');
        $testignoreCase = TestUtils::getTestValue("highlightShapeText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("highlightShapeText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("highlightShapeText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("highlightShapeText", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "highlightShapeText", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("highlightShapeText", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->highlightShapeText($testname, $testslideIndex, $testshapeIndex, $testtext, $testcolor, $testwholeWordsOnly, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "highlightShapeText", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "highlightShapeText", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("highlightShapeText", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for importFromHtml
     * Create presentation document from html.
     */
    public function testImportFromHtml()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "importFromHtml");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testImportFromHtmlInvalidname()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "importFromHtml", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "name", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidhtml()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testhtml = TestUtils::invalidizeValue("html", "importFromHtml", $testhtml, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "html", $testhtml, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "html", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "html", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "html", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidpassword()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "importFromHtml", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "password", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidfolder()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "importFromHtml", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "folder", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidstorage()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "importFromHtml", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for importFromPdf
     * Create presentation document from pdf or append pdf to an existing presentation.
     */
    public function testImportFromPdf()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getTestValue("importFromPdf", "pdf", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "importFromPdf");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testImportFromPdfInvalidname()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getTestValue("importFromPdf", "pdf", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "importFromPdf", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "name", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidpdf()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getTestValue("importFromPdf", "pdf", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testpdf = TestUtils::invalidizeValue("pdf", "importFromPdf", $testpdf, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "pdf", $testpdf, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "pdf", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "pdf", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "pdf", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidpassword()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getTestValue("importFromPdf", "pdf", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "importFromPdf", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "password", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidfolder()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getTestValue("importFromPdf", "pdf", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "importFromPdf", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "folder", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidstorage()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getTestValue("importFromPdf", "pdf", self::$values, '\SplFileObject');
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "importFromPdf", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for importShapesFromSvg
     * Imports shapes from SVG file.
     */
    public function testImportShapesFromSvg()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "importShapesFromSvg");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testImportShapesFromSvgInvalidname()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "importShapesFromSvg", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "name", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "importShapesFromSvg", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "slideIndex", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidimage()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testimage = TestUtils::invalidizeValue("image", "importShapesFromSvg", $testimage, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "image", $testimage, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "image", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "image", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "image", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidx()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testx = TestUtils::invalidizeValue("x", "importShapesFromSvg", $testx, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "x", $testx, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "x", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "x", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "x", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidy()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testy = TestUtils::invalidizeValue("y", "importShapesFromSvg", $testy, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "y", $testy, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "y", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "y", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "y", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidwidth()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "importShapesFromSvg", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "width", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidheight()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "importShapesFromSvg", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "height", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidshapes()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "importShapesFromSvg", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "shapes", $testshapes, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "shapes", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidgroup()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testgroup = TestUtils::invalidizeValue("group", "importShapesFromSvg", $testgroup, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "group", $testgroup, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "group", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "group", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "group", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidpassword()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "importShapesFromSvg", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "password", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidfolder()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "importShapesFromSvg", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "folder", self::$okToFailValues);
        }
    }

    public function testImportShapesFromSvgInvalidstorage()
    {
        $testname = TestUtils::getTestValue("importShapesFromSvg", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("importShapesFromSvg", "slideIndex", self::$values, 'int');
        $testimage = TestUtils::getTestValue("importShapesFromSvg", "image", self::$values, '\SplFileObject');
        $testx = TestUtils::getTestValue("importShapesFromSvg", "x", self::$values, 'int');
        $testy = TestUtils::getTestValue("importShapesFromSvg", "y", self::$values, 'int');
        $testwidth = TestUtils::getTestValue("importShapesFromSvg", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("importShapesFromSvg", "height", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("importShapesFromSvg", "shapes", self::$values, 'array');
        $testgroup = TestUtils::getTestValue("importShapesFromSvg", "group", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("importShapesFromSvg", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importShapesFromSvg", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importShapesFromSvg", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "importShapesFromSvg", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importShapesFromSvg", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importShapesFromSvg($testname, $testslideIndex, $testimage, $testx, $testy, $testwidth, $testheight, $testshapes, $testgroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importShapesFromSvg", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importShapesFromSvg", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importShapesFromSvg", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for merge
     * Merge the presentation with other presentations specified in the request parameter.
     */
    public function testMerge()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "merge");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testMergeInvalidname()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "merge", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "name", self::$okToFailValues);
        }
    }

    public function testMergeInvalidrequest()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "merge", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "request", $testrequest, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "request", self::$okToFailValues);
        }
    }

    public function testMergeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "merge", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "password", self::$okToFailValues);
        }
    }

    public function testMergeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "merge", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "folder", self::$okToFailValues);
        }
    }

    public function testMergeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "merge", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for mergeAndSaveOnline
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     */
    public function testMergeAndSaveOnline()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getTestValue("mergeAndSaveOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "mergeAndSaveOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testMergeAndSaveOnlineInvalidoutPath()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getTestValue("mergeAndSaveOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "mergeAndSaveOnline", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "outPath", self::$okToFailValues);
        }
    }

    public function testMergeAndSaveOnlineInvalidfiles()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getTestValue("mergeAndSaveOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $testfiles = TestUtils::invalidizeValue("files", "mergeAndSaveOnline", $testfiles, self::$values, 'array<\SplFileObject>');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "files", $testfiles, 'array<\SplFileObject>');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "files", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "files", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "files", self::$okToFailValues);
        }
    }

    public function testMergeAndSaveOnlineInvalidrequest()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getTestValue("mergeAndSaveOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "mergeAndSaveOnline", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "request", $testrequest, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "request", self::$okToFailValues);
        }
    }

    public function testMergeAndSaveOnlineInvalidstorage()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getTestValue("mergeAndSaveOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "mergeAndSaveOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for mergeOnline
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response.
     */
    public function testMergeOnline()
    {
        $testfiles = TestUtils::getTestValue("mergeOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "mergeOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testMergeOnlineInvalidfiles()
    {
        $testfiles = TestUtils::getTestValue("mergeOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        $testfiles = TestUtils::invalidizeValue("files", "mergeOnline", $testfiles, self::$values, 'array<\SplFileObject>');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", "files", $testfiles, 'array<\SplFileObject>');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeOnline", "files", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeOnline", "files", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeOnline", "files", self::$okToFailValues);
        }
    }

    public function testMergeOnlineInvalidrequest()
    {
        $testfiles = TestUtils::getTestValue("mergeOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "mergeOnline", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", "request", $testrequest, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeOnline", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeOnline", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeOnline", "request", self::$okToFailValues);
        }
    }

    public function testMergeOnlineInvalidstorage()
    {
        $testfiles = TestUtils::getTestValue("mergeOnline", "files", self::$values, 'array<\SplFileObject>');
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "mergeOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeOnline", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveFile
     * Move file
     */
    public function testMoveFile()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveFile");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testMoveFileInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "moveFile", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "srcPath", $testsrcPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "srcPath", self::$okToFailValues);
        }
    }

    public function testMoveFileInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "moveFile", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "destPath", $testdestPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "destPath", self::$okToFailValues);
        }
    }

    public function testMoveFileInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "moveFile", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "srcStorageName", $testsrcStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testMoveFileInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "moveFile", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "destStorageName", $testdestStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "destStorageName", self::$okToFailValues);
        }
    }

    public function testMoveFileInvalidversionId()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "moveFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "versionId", $testversionId, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveFolder
     * Move folder
     */
    public function testMoveFolder()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testMoveFolderInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "moveFolder", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "srcPath", $testsrcPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "srcPath", self::$okToFailValues);
        }
    }

    public function testMoveFolderInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "moveFolder", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "destPath", $testdestPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "destPath", self::$okToFailValues);
        }
    }

    public function testMoveFolderInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "moveFolder", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "srcStorageName", $testsrcStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testMoveFolderInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "moveFolder", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "destStorageName", $testdestStorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "destStorageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveSection
     * Move presentation section to a specified position.
     */
    public function testMoveSection()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testMoveSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "moveSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "name", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidsectionIndex()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testsectionIndex = TestUtils::invalidizeValue("sectionIndex", "moveSection", $testsectionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "sectionIndex", $testsectionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "sectionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "sectionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "sectionIndex", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidnewPosition()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testnewPosition = TestUtils::invalidizeValue("newPosition", "moveSection", $testnewPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "newPosition", $testnewPosition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "newPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "newPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "newPosition", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "moveSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "password", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "moveSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "folder", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "moveSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveSlide
     * Reorder presentation slide position.
     */
    public function testMoveSlide()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testMoveSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "moveSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "name", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "moveSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidnewPosition()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testnewPosition = TestUtils::invalidizeValue("newPosition", "moveSlide", $testnewPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "newPosition", $testnewPosition, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "newPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "newPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "newPosition", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "moveSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "password", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "moveSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "folder", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "moveSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for notesSlideExists
     * Get info whether a notes slide exists.
     */
    public function testNotesSlideExists()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "notesSlideExists");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testNotesSlideExistsInvalidname()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "notesSlideExists", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "name", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "notesSlideExists", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "slideIndex", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "notesSlideExists", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "password", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "notesSlideExists", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "folder", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "notesSlideExists", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for notesSlideExistsOnline
     * Get info whether a notes slide exists.
     */
    public function testNotesSlideExistsOnline()
    {
        $testdocument = TestUtils::getTestValue("notesSlideExistsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "notesSlideExistsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testNotesSlideExistsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("notesSlideExistsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "notesSlideExistsOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExistsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExistsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExistsOnline", "document", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("notesSlideExistsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "notesSlideExistsOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExistsOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExistsOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExistsOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("notesSlideExistsOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "notesSlideExistsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExistsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExistsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExistsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for objectExists
     * Check if file or folder exists
     */
    public function testObjectExists()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "objectExists");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testObjectExistsInvalidpath()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "objectExists", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "objectExists", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "objectExists", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("objectExists", "path", self::$okToFailValues);
        }
    }

    public function testObjectExistsInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "objectExists", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "objectExists", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "objectExists", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("objectExists", "storageName", self::$okToFailValues);
        }
    }

    public function testObjectExistsInvalidversionId()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "objectExists", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", "versionId", $testversionId, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "objectExists", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "objectExists", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("objectExists", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for orderedMerge
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     */
    public function testOrderedMerge()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "orderedMerge");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testOrderedMergeInvalidname()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "orderedMerge", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "name", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidrequest()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "orderedMerge", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "request", $testrequest, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "request", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "orderedMerge", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "password", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "orderedMerge", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "folder", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "orderedMerge", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for pipeline
     * Performs slides pipeline.
     */
    public function testPipeline()
    {
        $testpipeline = TestUtils::getTestValue("pipeline", "pipeline", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $testfiles = TestUtils::getTestValue("pipeline", "files", self::$values, 'array<\SplFileObject>');
        list($expectedCode, $expectedMessage) = $this->initialize("pipeline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->pipeline($testpipeline, $testfiles);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "pipeline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testPipelineInvalidpipeline()
    {
        $testpipeline = TestUtils::getTestValue("pipeline", "pipeline", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $testfiles = TestUtils::getTestValue("pipeline", "files", self::$values, 'array<\SplFileObject>');
        $testpipeline = TestUtils::invalidizeValue("pipeline", "pipeline", $testpipeline, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        list($expectedCode, $expectedMessage) = $this->initialize("pipeline", "pipeline", $testpipeline, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->pipeline($testpipeline, $testfiles);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "pipeline", "pipeline", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "pipeline", "pipeline", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("pipeline", "pipeline", self::$okToFailValues);
        }
    }

    public function testPipelineInvalidfiles()
    {
        $testpipeline = TestUtils::getTestValue("pipeline", "pipeline", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $testfiles = TestUtils::getTestValue("pipeline", "files", self::$values, 'array<\SplFileObject>');
        $testfiles = TestUtils::invalidizeValue("files", "pipeline", $testfiles, self::$values, 'array<\SplFileObject>');
        list($expectedCode, $expectedMessage) = $this->initialize("pipeline", "files", $testfiles, 'array<\SplFileObject>');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->pipeline($testpipeline, $testfiles);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "pipeline", "files", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "pipeline", "files", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("pipeline", "files", self::$okToFailValues);
        }
    }

    /**
     * Test case for reorderSlides
     * Reorder presentation slides positions.
     */
    public function testReorderSlides()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "reorderSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReorderSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "reorderSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "name", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidoldPositions()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testoldPositions = TestUtils::invalidizeValue("oldPositions", "reorderSlides", $testoldPositions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "oldPositions", $testoldPositions, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "oldPositions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "oldPositions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "oldPositions", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidnewPositions()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testnewPositions = TestUtils::invalidizeValue("newPositions", "reorderSlides", $testnewPositions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "newPositions", $testnewPositions, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "newPositions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "newPositions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "newPositions", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "reorderSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "password", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "reorderSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "folder", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "reorderSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for replaceFont
     * Replaces specified font and returns presentation fonts info.
     */
    public function testReplaceFont()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replaceFont");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReplaceFontInvalidname()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "replaceFont", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "name", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidsourceFont()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testsourceFont = TestUtils::invalidizeValue("sourceFont", "replaceFont", $testsourceFont, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "sourceFont", $testsourceFont, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "sourceFont", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "sourceFont", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "sourceFont", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidtargetFont()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testtargetFont = TestUtils::invalidizeValue("targetFont", "replaceFont", $testtargetFont, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "targetFont", $testtargetFont, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "targetFont", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "targetFont", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "targetFont", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidembed()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testembed = TestUtils::invalidizeValue("embed", "replaceFont", $testembed, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "embed", $testembed, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "embed", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "embed", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "embed", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidpassword()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replaceFont", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "password", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidfolder()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "replaceFont", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "folder", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidstorage()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "replaceFont", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "storage", self::$okToFailValues);
        }
    }

    public function testReplaceFontInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("replaceFont", "name", self::$values, 'string');
        $testsourceFont = TestUtils::getTestValue("replaceFont", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFont", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFont", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFont", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "replaceFont", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFont", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFont($testname, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFont", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFont", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFont", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for replaceFontOnline
     * Replaces specified font and returns presentation.
     */
    public function testReplaceFontOnline()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replaceFontOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testReplaceFontOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "replaceFontOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFontOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFontOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFontOnline", "document", self::$okToFailValues);
        }
    }

    public function testReplaceFontOnlineInvalidsourceFont()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        $testsourceFont = TestUtils::invalidizeValue("sourceFont", "replaceFontOnline", $testsourceFont, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", "sourceFont", $testsourceFont, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFontOnline", "sourceFont", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFontOnline", "sourceFont", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFontOnline", "sourceFont", self::$okToFailValues);
        }
    }

    public function testReplaceFontOnlineInvalidtargetFont()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        $testtargetFont = TestUtils::invalidizeValue("targetFont", "replaceFontOnline", $testtargetFont, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", "targetFont", $testtargetFont, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFontOnline", "targetFont", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFontOnline", "targetFont", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFontOnline", "targetFont", self::$okToFailValues);
        }
    }

    public function testReplaceFontOnlineInvalidembed()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        $testembed = TestUtils::invalidizeValue("embed", "replaceFontOnline", $testembed, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", "embed", $testembed, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFontOnline", "embed", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFontOnline", "embed", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFontOnline", "embed", self::$okToFailValues);
        }
    }

    public function testReplaceFontOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replaceFontOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFontOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFontOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFontOnline", "password", self::$okToFailValues);
        }
    }

    public function testReplaceFontOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("replaceFontOnline", "document", self::$values, '\SplFileObject');
        $testsourceFont = TestUtils::getTestValue("replaceFontOnline", "sourceFont", self::$values, 'string');
        $testtargetFont = TestUtils::getTestValue("replaceFontOnline", "targetFont", self::$values, 'string');
        $testembed = TestUtils::getTestValue("replaceFontOnline", "embed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("replaceFontOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "replaceFontOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceFontOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceFontOnline($testdocument, $testsourceFont, $testtargetFont, $testembed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceFontOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceFontOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceFontOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for replacePresentationText
     * Replace text with a new value.
     */
    public function testReplacePresentationText()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replacePresentationText");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReplacePresentationTextInvalidname()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "replacePresentationText", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "name", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidoldValue()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replacePresentationText", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "oldValue", $testoldValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidnewValue()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replacePresentationText", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "newValue", $testnewValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "newValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidignoreCase()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replacePresentationText", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "ignoreCase", $testignoreCase, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidpassword()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replacePresentationText", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "password", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidfolder()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "replacePresentationText", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "folder", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidstorage()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "replacePresentationText", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for replacePresentationTextOnline
     * Replace text with a new value.
     */
    public function testReplacePresentationTextOnline()
    {
        $testdocument = TestUtils::getTestValue("replacePresentationTextOnline", "document", self::$values, '\SplFileObject');
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replacePresentationTextOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testReplacePresentationTextOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("replacePresentationTextOnline", "document", self::$values, '\SplFileObject');
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "replacePresentationTextOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "document", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidoldValue()
    {
        $testdocument = TestUtils::getTestValue("replacePresentationTextOnline", "document", self::$values, '\SplFileObject');
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replacePresentationTextOnline", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "oldValue", $testoldValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidnewValue()
    {
        $testdocument = TestUtils::getTestValue("replacePresentationTextOnline", "document", self::$values, '\SplFileObject');
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replacePresentationTextOnline", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "newValue", $testnewValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "newValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidignoreCase()
    {
        $testdocument = TestUtils::getTestValue("replacePresentationTextOnline", "document", self::$values, '\SplFileObject');
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replacePresentationTextOnline", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "ignoreCase", $testignoreCase, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("replacePresentationTextOnline", "document", self::$values, '\SplFileObject');
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replacePresentationTextOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for replaceSlideText
     * Replace text with a new value.
     */
    public function testReplaceSlideText()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replaceSlideText");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReplaceSlideTextInvalidname()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "replaceSlideText", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "name", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "replaceSlideText", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "slideIndex", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidoldValue()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replaceSlideText", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "oldValue", $testoldValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidnewValue()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replaceSlideText", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "newValue", $testnewValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "newValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidignoreCase()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replaceSlideText", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "ignoreCase", $testignoreCase, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidpassword()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replaceSlideText", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "password", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidfolder()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "replaceSlideText", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "folder", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidstorage()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "replaceSlideText", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for replaceSlideTextOnline
     * Replace slide text with a new value.
     */
    public function testReplaceSlideTextOnline()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replaceSlideTextOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testReplaceSlideTextOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "replaceSlideTextOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "document", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "replaceSlideTextOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidoldValue()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replaceSlideTextOnline", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "oldValue", $testoldValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidnewValue()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replaceSlideTextOnline", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "newValue", $testnewValue, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "newValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidignoreCase()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replaceSlideTextOnline", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "ignoreCase", $testignoreCase, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("replaceSlideTextOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replaceSlideTextOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for savePortionAsMathMl
     * Convert Mathematical Text to MathML Format and saves result to the storage
     */
    public function testSavePortionAsMathMl()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "savePortionAsMathMl");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSavePortionAsMathMlInvalidname()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "savePortionAsMathMl", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "name", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "savePortionAsMathMl", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "savePortionAsMathMl", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "savePortionAsMathMl", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "savePortionAsMathMl", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "portionIndex", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "savePortionAsMathMl", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "outPath", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidpassword()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "savePortionAsMathMl", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "password", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidfolder()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "savePortionAsMathMl", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "folder", self::$okToFailValues);
        }
    }

    public function testSavePortionAsMathMlInvalidstorage()
    {
        $testname = TestUtils::getTestValue("savePortionAsMathMl", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("savePortionAsMathMl", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("savePortionAsMathMl", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("savePortionAsMathMl", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("savePortionAsMathMl", "portionIndex", self::$values, 'int');
        $testoutPath = TestUtils::getTestValue("savePortionAsMathMl", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("savePortionAsMathMl", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePortionAsMathMl", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePortionAsMathMl", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "savePortionAsMathMl", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePortionAsMathMl", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePortionAsMathMl($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testoutPath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePortionAsMathMl", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePortionAsMathMl", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePortionAsMathMl", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for savePresentation
     * Save a presentation to a specified format.
     */
    public function testSavePresentation()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "savePresentation");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSavePresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testname = TestUtils::invalidizeValue("name", "savePresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "name", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidformat()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testformat = TestUtils::invalidizeValue("format", "savePresentation", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "format", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testoutPath = TestUtils::invalidizeValue("outPath", "savePresentation", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "outPath", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidoptions()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testoptions = TestUtils::invalidizeValue("options", "savePresentation", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "options", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testpassword = TestUtils::invalidizeValue("password", "savePresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "password", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testfolder = TestUtils::invalidizeValue("folder", "savePresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "folder", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $teststorage = TestUtils::invalidizeValue("storage", "savePresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "storage", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "savePresentation", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidslides()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testslides = TestUtils::getTestValue("savePresentation", "slides", self::$values, 'array');
        $testslides = TestUtils::invalidizeValue("slides", "savePresentation", $testslides, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "slides", $testslides, 'array');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testslides);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "slides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "slides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "slides", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveShape
     * Render shape to specified picture format.
     */
    public function testSaveShape()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveShape");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "name", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "format", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveShape", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "options", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "scaleX", $testscaleX, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "scaleY", $testscaleY, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "bounds", $testbounds, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "password", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "folder", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "storage", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "saveShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveShapeOnline
     * Render shape to specified picture format.
     */
    public function testSaveShapeOnline()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveShapeOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveShapeOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testdocument = TestUtils::invalidizeValue("document", "saveShapeOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "document", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveShapeOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidshapeIndex()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveShapeOnline", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testformat = TestUtils::invalidizeValue("format", "saveShapeOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "format", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidoutPath()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveShapeOnline", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidscaleX()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveShapeOnline", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "scaleX", $testscaleX, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidscaleY()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveShapeOnline", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "scaleY", $testscaleY, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidbounds()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveShapeOnline", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "bounds", $testbounds, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testpassword = TestUtils::invalidizeValue("password", "saveShapeOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "password", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $teststorage = TestUtils::invalidizeValue("storage", "saveShapeOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveShapeOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidoptions()
    {
        $testdocument = TestUtils::getTestValue("saveShapeOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShapeOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testoptions = TestUtils::invalidizeValue("options", "saveShapeOnline", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "options", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveSlide
     * Save a slide to a specified format.
     */
    public function testSaveSlide()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "name", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveSlide", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "format", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveSlide", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveSlide", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "options", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidwidth()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "saveSlide", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "width", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidheight()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "saveSlide", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "height", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "password", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "folder", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "storage", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveSlide", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveSlideOnline
     * Save a slide to a specified format.
     */
    public function testSaveSlideOnline()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testdocument = TestUtils::invalidizeValue("document", "saveSlideOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::invalidizeValue("format", "saveSlideOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "format", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidoutPath()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveSlideOnline", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::invalidizeValue("width", "saveSlideOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "width", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidheight()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testheight = TestUtils::invalidizeValue("height", "saveSlideOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "height", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::invalidizeValue("password", "saveSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "password", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $teststorage = TestUtils::invalidizeValue("storage", "saveSlideOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveSlideOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidoptions()
    {
        $testdocument = TestUtils::getTestValue("saveSlideOnline", "document", self::$values, '\SplFileObject');
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlideOnline", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testoptions = TestUtils::invalidizeValue("options", "saveSlideOnline", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder, $testoptions);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "options", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveSpecialSlideShape
     * Render shape to specified picture format.
     */
    public function testSaveSpecialSlideShape()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveSpecialSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveSpecialSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveSpecialSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveSpecialSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidslideType()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "saveSpecialSlideShape", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "slideType", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveSpecialSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveSpecialSlideShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "format", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveSpecialSlideShape", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "outPath", $testoutPath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveSpecialSlideShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "options", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveSpecialSlideShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "scaleX", $testscaleX, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveSpecialSlideShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "scaleY", $testscaleY, 'float');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveSpecialSlideShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "bounds", $testbounds, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveSpecialSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveSpecialSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveSpecialSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveSpecialSlideShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "fontsFolder", self::$okToFailValues);
        }
    }

    public function testSaveSpecialSlideShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("saveSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("saveSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSpecialSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSpecialSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSpecialSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSpecialSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSpecialSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSpecialSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSpecialSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSpecialSlideShape", "fontsFolder", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("saveSpecialSlideShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "saveSpecialSlideShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSpecialSlideShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSpecialSlideShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for setAnimation
     * Set slide animation.
     */
    public function testSetAnimation()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "name", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidanimation()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testanimation = TestUtils::invalidizeValue("animation", "setAnimation", $testanimation, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "animation", $testanimation, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "animation", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "animation", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "animation", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "password", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setBackground
     * Set background for a slide.
     */
    public function testSetBackground()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setBackground");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetBackgroundInvalidname()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setBackground", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "name", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setBackground", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidbackground()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testbackground = TestUtils::invalidizeValue("background", "setBackground", $testbackground, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "background", $testbackground, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "background", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "background", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "background", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setBackground", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "password", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setBackground", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "folder", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setBackground", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setBackgroundColor
     * Set background color for a slide.
     */
    public function testSetBackgroundColor()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setBackgroundColor");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetBackgroundColorInvalidname()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setBackgroundColor", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "name", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setBackgroundColor", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidcolor()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testcolor = TestUtils::invalidizeValue("color", "setBackgroundColor", $testcolor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "color", $testcolor, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "color", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "color", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "color", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setBackgroundColor", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "password", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setBackgroundColor", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "folder", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setBackgroundColor", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setChartAxis
     * Set chart axis.
     */
    public function testSetChartAxis()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setChartAxis");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetChartAxisInvalidname()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setChartAxis", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "name", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setChartAxis", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "setChartAxis", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidaxisType()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testaxisType = TestUtils::invalidizeValue("axisType", "setChartAxis", $testaxisType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "axisType", $testaxisType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "axisType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "axisType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "axisType", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidaxis()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testaxis = TestUtils::invalidizeValue("axis", "setChartAxis", $testaxis, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "axis", $testaxis, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "axis", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "axis", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "axis", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setChartAxis", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "password", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setChartAxis", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "folder", self::$okToFailValues);
        }
    }

    public function testSetChartAxisInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setChartAxis", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartAxis", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartAxis", "shapeIndex", self::$values, 'int');
        $testaxisType = TestUtils::getTestValue("setChartAxis", "axisType", self::$values, 'string');
        $testaxis = TestUtils::getTestValue("setChartAxis", "axis", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Axis');
        $testpassword = TestUtils::getTestValue("setChartAxis", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartAxis", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartAxis", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setChartAxis", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartAxis", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartAxis($testname, $testslideIndex, $testshapeIndex, $testaxisType, $testaxis, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartAxis", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartAxis", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartAxis", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setChartLegend
     * Set chart axis.
     */
    public function testSetChartLegend()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setChartLegend");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetChartLegendInvalidname()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setChartLegend", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "name", self::$okToFailValues);
        }
    }

    public function testSetChartLegendInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setChartLegend", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetChartLegendInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "setChartLegend", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSetChartLegendInvalidlegend()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $testlegend = TestUtils::invalidizeValue("legend", "setChartLegend", $testlegend, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "legend", $testlegend, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "legend", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "legend", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "legend", self::$okToFailValues);
        }
    }

    public function testSetChartLegendInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setChartLegend", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "password", self::$okToFailValues);
        }
    }

    public function testSetChartLegendInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setChartLegend", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "folder", self::$okToFailValues);
        }
    }

    public function testSetChartLegendInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setChartLegend", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartLegend", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartLegend", "shapeIndex", self::$values, 'int');
        $testlegend = TestUtils::getTestValue("setChartLegend", "legend", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Legend');
        $testpassword = TestUtils::getTestValue("setChartLegend", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartLegend", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartLegend", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setChartLegend", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartLegend", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartLegend($testname, $testslideIndex, $testshapeIndex, $testlegend, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartLegend", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartLegend", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartLegend", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setChartSeriesGroup
     * Set a series group in a chart.
     */
    public function testSetChartSeriesGroup()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setChartSeriesGroup");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetChartSeriesGroupInvalidname()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setChartSeriesGroup", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "name", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setChartSeriesGroup", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "setChartSeriesGroup", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidseriesGroupIndex()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testseriesGroupIndex = TestUtils::invalidizeValue("seriesGroupIndex", "setChartSeriesGroup", $testseriesGroupIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "seriesGroupIndex", $testseriesGroupIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "seriesGroupIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "seriesGroupIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "seriesGroupIndex", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidseriesGroup()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testseriesGroup = TestUtils::invalidizeValue("seriesGroup", "setChartSeriesGroup", $testseriesGroup, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "seriesGroup", $testseriesGroup, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "seriesGroup", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "seriesGroup", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "seriesGroup", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setChartSeriesGroup", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "password", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setChartSeriesGroup", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "folder", self::$okToFailValues);
        }
    }

    public function testSetChartSeriesGroupInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setChartSeriesGroup", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartSeriesGroup", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartSeriesGroup", "shapeIndex", self::$values, 'int');
        $testseriesGroupIndex = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroupIndex", self::$values, 'int');
        $testseriesGroup = TestUtils::getTestValue("setChartSeriesGroup", "seriesGroup", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartSeriesGroup');
        $testpassword = TestUtils::getTestValue("setChartSeriesGroup", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartSeriesGroup", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartSeriesGroup", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setChartSeriesGroup", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartSeriesGroup", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartSeriesGroup($testname, $testslideIndex, $testshapeIndex, $testseriesGroupIndex, $testseriesGroup, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartSeriesGroup", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartSeriesGroup", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartSeriesGroup", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setChartWall
     * Set 3D chart wall.
     */
    public function testSetChartWall()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setChartWall");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetChartWallInvalidname()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setChartWall", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "name", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setChartWall", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "setChartWall", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidchartWallType()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testchartWallType = TestUtils::invalidizeValue("chartWallType", "setChartWall", $testchartWallType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "chartWallType", $testchartWallType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "chartWallType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "chartWallType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "chartWallType", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidchartWall()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testchartWall = TestUtils::invalidizeValue("chartWall", "setChartWall", $testchartWall, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "chartWall", $testchartWall, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "chartWall", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "chartWall", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "chartWall", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setChartWall", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "password", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setChartWall", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "folder", self::$okToFailValues);
        }
    }

    public function testSetChartWallInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setChartWall", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setChartWall", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setChartWall", "shapeIndex", self::$values, 'int');
        $testchartWallType = TestUtils::getTestValue("setChartWall", "chartWallType", self::$values, 'string');
        $testchartWall = TestUtils::getTestValue("setChartWall", "chartWall", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartWall');
        $testpassword = TestUtils::getTestValue("setChartWall", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setChartWall", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setChartWall", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setChartWall", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setChartWall", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setChartWall($testname, $testslideIndex, $testshapeIndex, $testchartWallType, $testchartWall, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setChartWall", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setChartWall", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setChartWall", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setDocumentProperties
     * Set document properties.
     */
    public function testSetDocumentProperties()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setDocumentProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetDocumentPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setDocumentProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidproperties()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testproperties = TestUtils::invalidizeValue("properties", "setDocumentProperties", $testproperties, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "properties", $testproperties, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "properties", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "properties", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "properties", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setDocumentProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setDocumentProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setDocumentProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setDocumentProperty
     * Set document property.
     */
    public function testSetDocumentProperty()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setDocumentProperty");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetDocumentPropertyInvalidname()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setDocumentProperty", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "name", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidpropertyName()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testpropertyName = TestUtils::invalidizeValue("propertyName", "setDocumentProperty", $testpropertyName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "propertyName", $testpropertyName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "propertyName", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidproperty()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testproperty = TestUtils::invalidizeValue("property", "setDocumentProperty", $testproperty, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "property", $testproperty, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "property", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "property", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "property", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setDocumentProperty", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "password", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setDocumentProperty", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "folder", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setDocumentProperty", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setEmbeddedFont
     * Embeds specified font and returns presentation fonts info.
     */
    public function testSetEmbeddedFont()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setEmbeddedFont");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetEmbeddedFontInvalidname()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setEmbeddedFont", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "name", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontInvalidfontName()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "setEmbeddedFont", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "fontName", $testfontName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "fontName", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontInvalidonlyUsed()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $testonlyUsed = TestUtils::invalidizeValue("onlyUsed", "setEmbeddedFont", $testonlyUsed, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "onlyUsed", $testonlyUsed, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "onlyUsed", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "onlyUsed", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "onlyUsed", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setEmbeddedFont", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "password", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setEmbeddedFont", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "folder", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setEmbeddedFont", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "storage", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("setEmbeddedFont", "name", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("setEmbeddedFont", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFont", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFont", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFont", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFont", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFont", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "setEmbeddedFont", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFont", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFont($testname, $testfontName, $testonlyUsed, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFont", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFont", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFont", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for setEmbeddedFontFromRequest
     * Embeds font from request and returns presentation fonts info.
     */
    public function testSetEmbeddedFontFromRequest()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setEmbeddedFontFromRequest");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetEmbeddedFontFromRequestInvalidfont()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        $testfont = TestUtils::invalidizeValue("font", "setEmbeddedFontFromRequest", $testfont, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", "font", $testfont, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequest", "font", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequest", "font", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequest", "font", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestInvalidname()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setEmbeddedFontFromRequest", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequest", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequest", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequest", "name", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestInvalidonlyUsed()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        $testonlyUsed = TestUtils::invalidizeValue("onlyUsed", "setEmbeddedFontFromRequest", $testonlyUsed, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", "onlyUsed", $testonlyUsed, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequest", "onlyUsed", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequest", "onlyUsed", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequest", "onlyUsed", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestInvalidpassword()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setEmbeddedFontFromRequest", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequest", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequest", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequest", "password", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestInvalidfolder()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setEmbeddedFontFromRequest", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequest", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequest", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequest", "folder", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestInvalidstorage()
    {
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequest", "font", self::$values, '\SplFileObject');
        $testname = TestUtils::getTestValue("setEmbeddedFontFromRequest", "name", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequest", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequest", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setEmbeddedFontFromRequest", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setEmbeddedFontFromRequest", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setEmbeddedFontFromRequest", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequest", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequest($testfont, $testname, $testonlyUsed, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequest", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequest", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequest", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setEmbeddedFontFromRequestOnline
     * Embeds font from request and returns presentation.
     */
    public function testSetEmbeddedFontFromRequestOnline()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "document", self::$values, '\SplFileObject');
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "font", self::$values, '\SplFileObject');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequestOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequestOnline($testdocument, $testfont, $testonlyUsed, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setEmbeddedFontFromRequestOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testSetEmbeddedFontFromRequestOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "document", self::$values, '\SplFileObject');
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "font", self::$values, '\SplFileObject');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "setEmbeddedFontFromRequestOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequestOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequestOnline($testdocument, $testfont, $testonlyUsed, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequestOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequestOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequestOnline", "document", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestOnlineInvalidfont()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "document", self::$values, '\SplFileObject');
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "font", self::$values, '\SplFileObject');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "password", self::$values, 'string');
        $testfont = TestUtils::invalidizeValue("font", "setEmbeddedFontFromRequestOnline", $testfont, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequestOnline", "font", $testfont, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequestOnline($testdocument, $testfont, $testonlyUsed, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequestOnline", "font", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequestOnline", "font", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequestOnline", "font", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestOnlineInvalidonlyUsed()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "document", self::$values, '\SplFileObject');
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "font", self::$values, '\SplFileObject');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "password", self::$values, 'string');
        $testonlyUsed = TestUtils::invalidizeValue("onlyUsed", "setEmbeddedFontFromRequestOnline", $testonlyUsed, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequestOnline", "onlyUsed", $testonlyUsed, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequestOnline($testdocument, $testfont, $testonlyUsed, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequestOnline", "onlyUsed", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequestOnline", "onlyUsed", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequestOnline", "onlyUsed", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontFromRequestOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "document", self::$values, '\SplFileObject');
        $testfont = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "font", self::$values, '\SplFileObject');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontFromRequestOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setEmbeddedFontFromRequestOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontFromRequestOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontFromRequestOnline($testdocument, $testfont, $testonlyUsed, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontFromRequestOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontFromRequestOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontFromRequestOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for setEmbeddedFontOnline
     * Embeds specified font and returns presentation.
     */
    public function testSetEmbeddedFontOnline()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("setEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFontOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontOnline($testdocument, $testfontName, $testonlyUsed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setEmbeddedFontOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testSetEmbeddedFontOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("setEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFontOnline", "fontsFolder", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "setEmbeddedFontOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontOnline($testdocument, $testfontName, $testonlyUsed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontOnline", "document", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontOnlineInvalidfontName()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("setEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFontOnline", "fontsFolder", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "setEmbeddedFontOnline", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontOnline", "fontName", $testfontName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontOnline($testdocument, $testfontName, $testonlyUsed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontOnline", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontOnline", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontOnline", "fontName", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontOnlineInvalidonlyUsed()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("setEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFontOnline", "fontsFolder", self::$values, 'string');
        $testonlyUsed = TestUtils::invalidizeValue("onlyUsed", "setEmbeddedFontOnline", $testonlyUsed, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontOnline", "onlyUsed", $testonlyUsed, 'bool');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontOnline($testdocument, $testfontName, $testonlyUsed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontOnline", "onlyUsed", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontOnline", "onlyUsed", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontOnline", "onlyUsed", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("setEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFontOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setEmbeddedFontOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontOnline($testdocument, $testfontName, $testonlyUsed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontOnline", "password", self::$okToFailValues);
        }
    }

    public function testSetEmbeddedFontOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("setEmbeddedFontOnline", "document", self::$values, '\SplFileObject');
        $testfontName = TestUtils::getTestValue("setEmbeddedFontOnline", "fontName", self::$values, 'string');
        $testonlyUsed = TestUtils::getTestValue("setEmbeddedFontOnline", "onlyUsed", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("setEmbeddedFontOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("setEmbeddedFontOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "setEmbeddedFontOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setEmbeddedFontOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setEmbeddedFontOnline($testdocument, $testfontName, $testonlyUsed, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setEmbeddedFontOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setEmbeddedFontOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setEmbeddedFontOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for setNotesSlideHeaderFooter
     * Set header/footer the notes slide.
     */
    public function testSetNotesSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setNotesSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setNotesSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setNotesSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvaliddto()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setNotesSlideHeaderFooter", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "dto", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setNotesSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setNotesSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setNotesSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setPresentationHeaderFooter
     * Set footers for all slides in a presentation.
     */
    public function testSetPresentationHeaderFooter()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setPresentationHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetPresentationHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setPresentationHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvaliddto()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setPresentationHeaderFooter", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "dto", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setPresentationHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setPresentationHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setPresentationHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setProtection
     * Updates presentation protection properties.
     */
    public function testSetProtection()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setProtection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetProtectionInvalidname()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setProtection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "name", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvaliddto()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setProtection", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "dto", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setProtection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "password", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setProtection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "folder", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setProtection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setProtectionOnline
     * Sets presentation protection options.
     */
    public function testSetProtectionOnline()
    {
        $testdocument = TestUtils::getTestValue("setProtectionOnline", "document", self::$values, '\SplFileObject');
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setProtectionOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testSetProtectionOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("setProtectionOnline", "document", self::$values, '\SplFileObject');
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "setProtectionOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtectionOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtectionOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtectionOnline", "document", self::$okToFailValues);
        }
    }

    public function testSetProtectionOnlineInvaliddto()
    {
        $testdocument = TestUtils::getTestValue("setProtectionOnline", "document", self::$values, '\SplFileObject');
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setProtectionOnline", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtectionOnline", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtectionOnline", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtectionOnline", "dto", self::$okToFailValues);
        }
    }

    public function testSetProtectionOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("setProtectionOnline", "document", self::$values, '\SplFileObject');
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setProtectionOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtectionOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtectionOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtectionOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSections
     * Replace existing presentation sections with the ones provided in the sections DTO.
     */
    public function testSetSections()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSections");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSectionsInvalidname()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSections", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "name", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidsections()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testsections = TestUtils::invalidizeValue("sections", "setSections", $testsections, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "sections", $testsections, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "sections", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "sections", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "sections", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSections", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "password", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSections", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "folder", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSections", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setShapeGeometryPath
     * Sets geometry path to the shape
     */
    public function testSetShapeGeometryPath()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setShapeGeometryPath");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetShapeGeometryPathInvalidname()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setShapeGeometryPath", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "name", self::$okToFailValues);
        }
    }

    public function testSetShapeGeometryPathInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setShapeGeometryPath", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetShapeGeometryPathInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "setShapeGeometryPath", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSetShapeGeometryPathInvaliddto()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setShapeGeometryPath", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "dto", self::$okToFailValues);
        }
    }

    public function testSetShapeGeometryPathInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setShapeGeometryPath", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "password", self::$okToFailValues);
        }
    }

    public function testSetShapeGeometryPathInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setShapeGeometryPath", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "folder", self::$okToFailValues);
        }
    }

    public function testSetShapeGeometryPathInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setShapeGeometryPath", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setShapeGeometryPath", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("setShapeGeometryPath", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setShapeGeometryPath", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\GeometryPaths');
        $testpassword = TestUtils::getTestValue("setShapeGeometryPath", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setShapeGeometryPath", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setShapeGeometryPath", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setShapeGeometryPath", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setShapeGeometryPath", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setShapeGeometryPath($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setShapeGeometryPath", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setShapeGeometryPath", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setShapeGeometryPath", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSlideHeaderFooter
     * Set footer the slide.
     */
    public function testSetSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvaliddto()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setSlideHeaderFooter", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "dto", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSlideProperties
     * Update presentation slide properties.
     */
    public function testSetSlideProperties()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSlideProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSlidePropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSlideProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvaliddto()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setSlideProperties", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "dto", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSlideProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSlideProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSlideProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSlideShowProperties
     * Update presentation slide show properties.
     */
    public function testSetSlideShowProperties()
    {
        $testname = TestUtils::getTestValue("setSlideShowProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideShowProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $testpassword = TestUtils::getTestValue("setSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideShowProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideShowProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideShowProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSlideShowProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSlideShowPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setSlideShowProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideShowProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $testpassword = TestUtils::getTestValue("setSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideShowProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSlideShowProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideShowProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideShowProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideShowProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideShowProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideShowProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetSlideShowPropertiesInvaliddto()
    {
        $testname = TestUtils::getTestValue("setSlideShowProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideShowProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $testpassword = TestUtils::getTestValue("setSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideShowProperties", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setSlideShowProperties", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideShowProperties", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideShowProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideShowProperties", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideShowProperties", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideShowProperties", "dto", self::$okToFailValues);
        }
    }

    public function testSetSlideShowPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSlideShowProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideShowProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $testpassword = TestUtils::getTestValue("setSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideShowProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSlideShowProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideShowProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideShowProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideShowProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideShowProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideShowProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetSlideShowPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSlideShowProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideShowProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $testpassword = TestUtils::getTestValue("setSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideShowProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSlideShowProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideShowProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideShowProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideShowProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideShowProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideShowProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetSlideShowPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSlideShowProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideShowProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideShowProperties');
        $testpassword = TestUtils::getTestValue("setSlideShowProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideShowProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideShowProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSlideShowProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideShowProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideShowProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideShowProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideShowProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideShowProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSpecialSlideAnimation
     * Set special slide (master, layout, notes) animation.
     */
    public function testSetSpecialSlideAnimation()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSpecialSlideAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSpecialSlideAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSpecialSlideAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "name", self::$okToFailValues);
        }
    }

    public function testSetSpecialSlideAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setSpecialSlideAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetSpecialSlideAnimationInvalidslideType()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "setSpecialSlideAnimation", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "slideType", self::$okToFailValues);
        }
    }

    public function testSetSpecialSlideAnimationInvalidanimation()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $testanimation = TestUtils::invalidizeValue("animation", "setSpecialSlideAnimation", $testanimation, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "animation", $testanimation, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "animation", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "animation", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "animation", self::$okToFailValues);
        }
    }

    public function testSetSpecialSlideAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSpecialSlideAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "password", self::$okToFailValues);
        }
    }

    public function testSetSpecialSlideAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSpecialSlideAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testSetSpecialSlideAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSpecialSlideAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSpecialSlideAnimation", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("setSpecialSlideAnimation", "slideType", self::$values, 'string');
        $testanimation = TestUtils::getTestValue("setSpecialSlideAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setSpecialSlideAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSpecialSlideAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSpecialSlideAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSpecialSlideAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSpecialSlideAnimation", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSpecialSlideAnimation($testname, $testslideIndex, $testslideType, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSpecialSlideAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSpecialSlideAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSpecialSlideAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setViewProperties
     * Update presentation document properties.
     */
    public function testSetViewProperties()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setViewProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetViewPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setViewProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvaliddto()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setViewProperties", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "dto", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setViewProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setViewProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setViewProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for split
     * Splitting presentations. Create one image per slide.
     */
    public function testSplit()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "split");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSplitInvalidname()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "split", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "name", self::$okToFailValues);
        }
    }

    public function testSplitInvalidoptions()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "split", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "options", $testoptions, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "options", self::$okToFailValues);
        }
    }

    public function testSplitInvalidformat()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "split", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "format", self::$okToFailValues);
        }
    }

    public function testSplitInvalidwidth()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "split", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "width", self::$okToFailValues);
        }
    }

    public function testSplitInvalidheight()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "split", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "height", self::$okToFailValues);
        }
    }

    public function testSplitInvalidfrom()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testfrom = TestUtils::invalidizeValue("from", "split", $testfrom, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "from", $testfrom, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "from", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "from", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "from", self::$okToFailValues);
        }
    }

    public function testSplitInvalidto()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testto = TestUtils::invalidizeValue("to", "split", $testto, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "to", $testto, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "to", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "to", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "to", self::$okToFailValues);
        }
    }

    public function testSplitInvaliddestFolder()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testdestFolder = TestUtils::invalidizeValue("destFolder", "split", $testdestFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "destFolder", $testdestFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "destFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "destFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "destFolder", self::$okToFailValues);
        }
    }

    public function testSplitInvalidpassword()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "split", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "password", self::$okToFailValues);
        }
    }

    public function testSplitInvalidfolder()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "split", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "folder", self::$okToFailValues);
        }
    }

    public function testSplitInvalidstorage()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "split", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "storage", self::$okToFailValues);
        }
    }

    public function testSplitInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "split", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for splitAndSaveOnline
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.
     */
    public function testSplitAndSaveOnline()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "splitAndSaveOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSplitAndSaveOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "splitAndSaveOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "document", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "splitAndSaveOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "format", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvaliddestFolder()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testdestFolder = TestUtils::invalidizeValue("destFolder", "splitAndSaveOnline", $testdestFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "destFolder", $testdestFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "destFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "destFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "destFolder", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "splitAndSaveOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "width", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidheight()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "splitAndSaveOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "height", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidfrom()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testfrom = TestUtils::invalidizeValue("from", "splitAndSaveOnline", $testfrom, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "from", $testfrom, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "from", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "from", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "from", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidto()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testto = TestUtils::invalidizeValue("to", "splitAndSaveOnline", $testto, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "to", $testto, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "to", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "to", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "to", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "splitAndSaveOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "password", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "splitAndSaveOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("splitAndSaveOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "splitAndSaveOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for splitOnline
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.
     */
    public function testSplitOnline()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "splitOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testSplitOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testdocument = TestUtils::invalidizeValue("document", "splitOnline", $testdocument, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "document", $testdocument, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "document", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidformat()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "splitOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "format", $testformat, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "format", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "splitOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "width", $testwidth, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "width", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidheight()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "splitOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "height", $testheight, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "height", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidfrom()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testfrom = TestUtils::invalidizeValue("from", "splitOnline", $testfrom, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "from", $testfrom, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "from", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "from", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "from", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidto()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testto = TestUtils::invalidizeValue("to", "splitOnline", $testto, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "to", $testto, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "to", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "to", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "to", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "splitOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "password", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "splitOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getTestValue("splitOnline", "document", self::$values, '\SplFileObject');
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "splitOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "fontsFolder", $testfontsFolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for storageExists
     * Check if storage exists
     */
    public function testStorageExists()
    {
        $teststorageName = TestUtils::getTestValue("storageExists", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("storageExists", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->storageExists($teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "storageExists");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testStorageExistsInvalidstorageName()
    {
        $teststorageName = TestUtils::getTestValue("storageExists", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "storageExists", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("storageExists", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->storageExists($teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "storageExists", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "storageExists", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("storageExists", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateAnimationEffect
     * Modify an animation effect for a slide.
     */
    public function testUpdateAnimationEffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "updateAnimationEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "updateAnimationEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "effect", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateAnimationInteractiveSequenceEffect
     * Modify an animation effect for a slide interactive sequence.
     */
    public function testUpdateAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "updateAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "updateAnimationInteractiveSequenceEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "updateAnimationInteractiveSequenceEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "effect", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateChartCategory
     * Update a chart category.
     */
    public function testUpdateChartCategory()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateChartCategory");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateChartCategoryInvalidname()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateChartCategory", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "name", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateChartCategory", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateChartCategory", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidcategoryIndex()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testcategoryIndex = TestUtils::invalidizeValue("categoryIndex", "updateChartCategory", $testcategoryIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "categoryIndex", $testcategoryIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "categoryIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidcategory()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testcategory = TestUtils::invalidizeValue("category", "updateChartCategory", $testcategory, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "category", $testcategory, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "category", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "category", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "category", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateChartCategory", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "password", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateChartCategory", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateChartCategory", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateChartDataPoint
     * Update a data point in a chart series.
     */
    public function testUpdateChartDataPoint()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateChartDataPoint");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateChartDataPointInvalidname()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateChartDataPoint", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "name", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateChartDataPoint", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateChartDataPoint", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "updateChartDataPoint", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "seriesIndex", $testseriesIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidpointIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testpointIndex = TestUtils::invalidizeValue("pointIndex", "updateChartDataPoint", $testpointIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "pointIndex", $testpointIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "pointIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvaliddataPoint()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testdataPoint = TestUtils::invalidizeValue("dataPoint", "updateChartDataPoint", $testdataPoint, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "dataPoint", $testdataPoint, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "dataPoint", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateChartDataPoint", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "password", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateChartDataPoint", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateChartDataPoint", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateChartSeries
     * Update a series in a chart.
     */
    public function testUpdateChartSeries()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateChartSeries");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateChartSeriesInvalidname()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateChartSeries", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "name", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateChartSeries", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateChartSeries", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "updateChartSeries", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "seriesIndex", $testseriesIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidseries()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testseries = TestUtils::invalidizeValue("series", "updateChartSeries", $testseries, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "series", $testseries, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "series", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "series", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "series", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateChartSeries", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "password", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateChartSeries", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateChartSeries", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateLayoutSlide
     * Update a layoutSlide.
     */
    public function testUpdateLayoutSlide()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateLayoutSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateLayoutSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateLayoutSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "name", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateLayoutSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidslideDto()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testslideDto = TestUtils::invalidizeValue("slideDto", "updateLayoutSlide", $testslideDto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "slideDto", $testslideDto, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "slideDto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "slideDto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "slideDto", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateLayoutSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "password", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateLayoutSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateLayoutSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateNotesSlide
     * Update notes slide properties.
     */
    public function testUpdateNotesSlide()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateNotesSlide", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateParagraph
     * Update paragraph properties.
     */
    public function testUpdateParagraph()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "name", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "password", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "updateParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for updatePortion
     * Update portion properties.
     */
    public function testUpdatePortion()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updatePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdatePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updatePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "name", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updatePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updatePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updatePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "updatePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updatePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "dto", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updatePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "password", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updatePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "folder", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updatePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "storage", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updatePortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "updatePortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSection
     * Update section name.
     */
    public function testUpdateSection()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidsectionIndex()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testsectionIndex = TestUtils::invalidizeValue("sectionIndex", "updateSection", $testsectionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "sectionIndex", $testsectionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "sectionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "sectionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "sectionIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidsectionName()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testsectionName = TestUtils::invalidizeValue("sectionName", "updateSection", $testsectionName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "sectionName", $testsectionName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "sectionName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "sectionName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "sectionName", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateShape
     * Update shape properties.
     */
    public function testUpdateShape()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "name", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "password", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "storage", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "updateShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSlide
     * Update a slide.
     */
    public function testUpdateSlide()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidslideDto()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testslideDto = TestUtils::invalidizeValue("slideDto", "updateSlide", $testslideDto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "slideDto", $testslideDto, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "slideDto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "slideDto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "slideDto", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSpecialSlideAnimationEffect
     * Modify an animation effect for a special slide (master, layout, notes).
     */
    public function testUpdateSpecialSlideAnimationEffect()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSpecialSlideAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSpecialSlideAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSpecialSlideAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalidslideType()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "updateSpecialSlideAnimationEffect", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "slideType", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "updateSpecialSlideAnimationEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "updateSpecialSlideAnimationEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "effect", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSpecialSlideAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSpecialSlideAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "slideType", self::$values, 'string');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSpecialSlideAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationEffect($testname, $testslideIndex, $testslideType, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSpecialSlideAnimationInteractiveSequenceEffect
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     */
    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidslideType()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", $testeffectIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", $testeffect, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSpecialSlideAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "slideType", self::$values, 'string');
        $testsequenceIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSpecialSlideAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testslideType, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSpecialSlideParagraph
     * Update paragraph properties.
     */
    public function testUpdateSpecialSlideParagraph()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSpecialSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSpecialSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSpecialSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidslideType()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "updateSpecialSlideParagraph", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "slideType", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateSpecialSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateSpecialSlideParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateSpecialSlideParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSpecialSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSpecialSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSpecialSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideParagraphInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideParagraph", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideParagraph", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideParagraph", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "updateSpecialSlideParagraph", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideParagraph", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideParagraph($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideParagraph", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideParagraph", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSpecialSlidePortion
     * Update portion properties.
     */
    public function testUpdateSpecialSlidePortion()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSpecialSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSpecialSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSpecialSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidslideType()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "updateSpecialSlidePortion", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "slideType", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateSpecialSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateSpecialSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "paragraphIndex", $testparagraphIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "updateSpecialSlidePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "portionIndex", $testportionIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateSpecialSlidePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSpecialSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSpecialSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSpecialSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "storage", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlidePortionInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlidePortion", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSpecialSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSpecialSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlidePortion", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlidePortion", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "updateSpecialSlidePortion", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlidePortion", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlidePortion($testname, $testslideIndex, $testslideType, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlidePortion", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlidePortion", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSpecialSlideShape
     * Update shape properties.
     */
    public function testUpdateSpecialSlideShape()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSpecialSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSpecialSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "name", $testname, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSpecialSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "slideIndex", $testslideIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidslideType()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testslideType = TestUtils::invalidizeValue("slideType", "updateSpecialSlideShape", $testslideType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "slideType", $testslideType, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "slideType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "slideType", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateSpecialSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "shapeIndex", $testshapeIndex, 'int');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateSpecialSlideShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "dto", $testdto, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSpecialSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "password", $testpassword, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSpecialSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "folder", $testfolder, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSpecialSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "storage", $teststorage, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testUpdateSpecialSlideShapeInvalidsubShape()
    {
        $testname = TestUtils::getTestValue("updateSpecialSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSpecialSlideShape", "slideIndex", self::$values, 'int');
        $testslideType = TestUtils::getTestValue("updateSpecialSlideShape", "slideType", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSpecialSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSpecialSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSpecialSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSpecialSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSpecialSlideShape", "storage", self::$values, 'string');
        $testsubShape = TestUtils::getTestValue("updateSpecialSlideShape", "subShape", self::$values, 'string');
        $testsubShape = TestUtils::invalidizeValue("subShape", "updateSpecialSlideShape", $testsubShape, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSpecialSlideShape", "subShape", $testsubShape, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSpecialSlideShape($testname, $testslideIndex, $testslideType, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage, $testsubShape);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSpecialSlideShape", "subShape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSpecialSlideShape", "subShape", self::$okToFailValues);
        }
    }

    /**
     * Test case for uploadFile
     * Upload file
     */
    public function testUploadFile()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getTestValue("uploadFile", "file", self::$values, '\SplFileObject');
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", null, null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "uploadFile");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUploadFileInvalidpath()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getTestValue("uploadFile", "file", self::$values, '\SplFileObject');
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "uploadFile", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", "path", $testpath, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "uploadFile", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "uploadFile", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("uploadFile", "path", self::$okToFailValues);
        }
    }

    public function testUploadFileInvalidfile()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getTestValue("uploadFile", "file", self::$values, '\SplFileObject');
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        $testfile = TestUtils::invalidizeValue("file", "uploadFile", $testfile, self::$values, '\SplFileObject');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", "file", $testfile, '\SplFileObject');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "uploadFile", "file", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "uploadFile", "file", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("uploadFile", "file", self::$okToFailValues);
        }
    }

    public function testUploadFileInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getTestValue("uploadFile", "file", self::$values, '\SplFileObject');
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "uploadFile", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", "storageName", $teststorageName, 'string');
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "uploadFile", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "uploadFile", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("uploadFile", "storageName", self::$okToFailValues);
        }
    }
}
