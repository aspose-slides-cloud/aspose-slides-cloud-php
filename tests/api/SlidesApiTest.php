<?php
/**
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */


namespace Aspose\Slides\Cloud\Sdk\Tests\Api;
 
use \Exception;
use PHPUnit\Framework\Assert;
use Aspose\Slides\Cloud\Sdk\Api\SlidesApi;
use Aspose\Slides\Cloud\Sdk\Api\ApiException;
use Aspose\Slides\Cloud\Sdk\Tests\Utils\TestUtils;

class SlidesApiTest extends TestBase
{

    /**
     * Test case for alignShapes
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     */
    public function testAlignShapes()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "alignShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testAlignShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "alignShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "name", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "alignShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidalignmentType()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testalignmentType = TestUtils::invalidizeValue("alignmentType", "alignShapes", $testalignmentType, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "alignmentType", $testalignmentType);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "alignmentType", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "alignmentType", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "alignmentType", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidalignToSlide()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testalignToSlide = TestUtils::invalidizeValue("alignToSlide", "alignShapes", $testalignToSlide, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "alignToSlide", $testalignToSlide);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "alignToSlide", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "alignToSlide", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "alignToSlide", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "alignShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "shapes", $testshapes);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "alignShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "password", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "alignShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "folder", self::$okToFailValues);
        }
    }

    public function testAlignShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("alignShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("alignShapes", "slideIndex", self::$values, 'int');
        $testalignmentType = TestUtils::getTestValue("alignShapes", "alignmentType", self::$values, 'string');
        $testalignToSlide = TestUtils::getTestValue("alignShapes", "alignToSlide", self::$values, 'bool');
        $testshapes = TestUtils::getTestValue("alignShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("alignShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("alignShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("alignShapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "alignShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("alignShapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->alignShapes($testname, $testslideIndex, $testalignmentType, $testalignToSlide, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "alignShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "alignShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("alignShapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for convert
     * Convert presentation from request content to format specified.
     */
    public function testConvert()
    {
        $testdocument = TestUtils::getStreamValue("convert", "document");
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "convert");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testConvertInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("convert", "document");
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "document", self::$okToFailValues);
        }
    }

    public function testConvertInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("convert", "document");
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "convert", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "format", self::$okToFailValues);
        }
    }

    public function testConvertInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("convert", "document");
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "convert", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "password", self::$okToFailValues);
        }
    }

    public function testConvertInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("convert", "document");
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "convert", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "storage", self::$okToFailValues);
        }
    }

    public function testConvertInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("convert", "document");
        $testformat = TestUtils::getTestValue("convert", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convert", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convert", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convert", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "convert", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convert", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convert($testdocument, $testformat, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convert", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convert", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convert", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for convertAndSave
     * Convert presentation from request content to format specified.
     */
    public function testConvertAndSave()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "convertAndSave");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testConvertAndSaveInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "document", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "convertAndSave", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "format", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidoutPath()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "convertAndSave", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "outPath", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "convertAndSave", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "password", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "convertAndSave", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "storage", self::$okToFailValues);
        }
    }

    public function testConvertAndSaveInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("convertAndSave", "document");
        $testformat = TestUtils::getTestValue("convertAndSave", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("convertAndSave", "outPath", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("convertAndSave", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("convertAndSave", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("convertAndSave", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "convertAndSave", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("convertAndSave", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->convertAndSave($testdocument, $testformat, $testoutPath, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "convertAndSave", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "convertAndSave", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("convertAndSave", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyFile
     * Copy file
     */
    public function testCopyFile()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyFile");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCopyFileInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "copyFile", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "srcPath", $testsrcPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "srcPath", self::$okToFailValues);
        }
    }

    public function testCopyFileInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "copyFile", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "destPath", $testdestPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "destPath", self::$okToFailValues);
        }
    }

    public function testCopyFileInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "copyFile", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "srcStorageName", $testsrcStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testCopyFileInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "copyFile", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "destStorageName", $testdestStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "destStorageName", self::$okToFailValues);
        }
    }

    public function testCopyFileInvalidversionId()
    {
        $testsrcPath = TestUtils::getTestValue("copyFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("copyFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "copyFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFile", "versionId", $testversionId);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyFolder
     * Copy folder
     */
    public function testCopyFolder()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCopyFolderInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "copyFolder", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "srcPath", $testsrcPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "srcPath", self::$okToFailValues);
        }
    }

    public function testCopyFolderInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "copyFolder", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "destPath", $testdestPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "destPath", self::$okToFailValues);
        }
    }

    public function testCopyFolderInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "copyFolder", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "srcStorageName", $testsrcStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testCopyFolderInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("copyFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("copyFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("copyFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("copyFolder", "destStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "copyFolder", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyFolder", "destStorageName", $testdestStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyFolder", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyFolder", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyFolder", "destStorageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyLayoutSlide
     * Copy layoutSlide from source presentation.
     */
    public function testCopyLayoutSlide()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyLayoutSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCopyLayoutSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "copyLayoutSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "name", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFrom()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFrom = TestUtils::invalidizeValue("cloneFrom", "copyLayoutSlide", $testcloneFrom, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFrom", $testcloneFrom);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFrom", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFrom", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFrom", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFromPosition()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFromPosition = TestUtils::invalidizeValue("cloneFromPosition", "copyLayoutSlide", $testcloneFromPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFromPosition", $testcloneFromPosition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFromPosition", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFromPassword()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFromPassword = TestUtils::invalidizeValue("cloneFromPassword", "copyLayoutSlide", $testcloneFromPassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFromPassword", $testcloneFromPassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFromPassword", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidcloneFromStorage()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testcloneFromStorage = TestUtils::invalidizeValue("cloneFromStorage", "copyLayoutSlide", $testcloneFromStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "cloneFromStorage", $testcloneFromStorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "cloneFromStorage", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "copyLayoutSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "password", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "copyLayoutSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCopyLayoutSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("copyLayoutSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyLayoutSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyLayoutSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyLayoutSlide", "cloneFromStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copyLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyLayoutSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "copyLayoutSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyLayoutSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyLayoutSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyLayoutSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyLayoutSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyLayoutSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for copyMasterSlide
     * Copy masterSlide from source presentation.
     */
    public function testCopyMasterSlide()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copyMasterSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCopyMasterSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "copyMasterSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "name", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFrom()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFrom = TestUtils::invalidizeValue("cloneFrom", "copyMasterSlide", $testcloneFrom, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFrom", $testcloneFrom);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFrom", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFrom", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFrom", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFromPosition()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFromPosition = TestUtils::invalidizeValue("cloneFromPosition", "copyMasterSlide", $testcloneFromPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFromPosition", $testcloneFromPosition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFromPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFromPosition", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFromPassword()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFromPassword = TestUtils::invalidizeValue("cloneFromPassword", "copyMasterSlide", $testcloneFromPassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFromPassword", $testcloneFromPassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFromPassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFromPassword", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidcloneFromStorage()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testcloneFromStorage = TestUtils::invalidizeValue("cloneFromStorage", "copyMasterSlide", $testcloneFromStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "cloneFromStorage", $testcloneFromStorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "cloneFromStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "cloneFromStorage", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidapplyToAll()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testapplyToAll = TestUtils::invalidizeValue("applyToAll", "copyMasterSlide", $testapplyToAll, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "applyToAll", $testapplyToAll);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "applyToAll", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "applyToAll", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "applyToAll", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "copyMasterSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "password", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "copyMasterSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCopyMasterSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("copyMasterSlide", "name", self::$values, 'string');
        $testcloneFrom = TestUtils::getTestValue("copyMasterSlide", "cloneFrom", self::$values, 'string');
        $testcloneFromPosition = TestUtils::getTestValue("copyMasterSlide", "cloneFromPosition", self::$values, 'int');
        $testcloneFromPassword = TestUtils::getTestValue("copyMasterSlide", "cloneFromPassword", self::$values, 'string');
        $testcloneFromStorage = TestUtils::getTestValue("copyMasterSlide", "cloneFromStorage", self::$values, 'string');
        $testapplyToAll = TestUtils::getTestValue("copyMasterSlide", "applyToAll", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("copyMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copyMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copyMasterSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "copyMasterSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copyMasterSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copyMasterSlide($testname, $testcloneFrom, $testcloneFromPosition, $testcloneFromPassword, $testcloneFromStorage, $testapplyToAll, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copyMasterSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copyMasterSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copyMasterSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for copySlide
     * Copy a slide from the current or another presentation.
     */
    public function testCopySlide()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "copySlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCopySlideInvalidname()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "copySlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "name", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidslideToCopy()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testslideToCopy = TestUtils::invalidizeValue("slideToCopy", "copySlide", $testslideToCopy, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "slideToCopy", $testslideToCopy);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "slideToCopy", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "slideToCopy", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "slideToCopy", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidposition()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "copySlide", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "position", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidsource()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testsource = TestUtils::invalidizeValue("source", "copySlide", $testsource, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "source", $testsource);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "source", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "source", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "source", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidsourcePassword()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testsourcePassword = TestUtils::invalidizeValue("sourcePassword", "copySlide", $testsourcePassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "sourcePassword", $testsourcePassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "sourcePassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "sourcePassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "sourcePassword", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidsourceStorage()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testsourceStorage = TestUtils::invalidizeValue("sourceStorage", "copySlide", $testsourceStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "sourceStorage", $testsourceStorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "sourceStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "sourceStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "sourceStorage", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "copySlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "password", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "copySlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "folder", self::$okToFailValues);
        }
    }

    public function testCopySlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("copySlide", "name", self::$values, 'string');
        $testslideToCopy = TestUtils::getTestValue("copySlide", "slideToCopy", self::$values, 'int');
        $testposition = TestUtils::getTestValue("copySlide", "position", self::$values, 'int');
        $testsource = TestUtils::getTestValue("copySlide", "source", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("copySlide", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("copySlide", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("copySlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("copySlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("copySlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "copySlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("copySlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->copySlide($testname, $testslideToCopy, $testposition, $testsource, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "copySlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "copySlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("copySlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createAnimationEffect
     * Add an effect to slide animation.
     */
    public function testCreateAnimationEffect()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "createAnimationEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "effect", $testeffect);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "effect", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testCreateAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationEffect", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationEffect($testname, $testslideIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createAnimationInteractiveSequence
     * Set slide animation.
     */
    public function testCreateAnimationInteractiveSequence()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createAnimationInteractiveSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createAnimationInteractiveSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "name", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createAnimationInteractiveSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidsequence()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testsequence = TestUtils::invalidizeValue("sequence", "createAnimationInteractiveSequence", $testsequence, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "sequence", $testsequence);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "sequence", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "sequence", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "sequence", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createAnimationInteractiveSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "password", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createAnimationInteractiveSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "folder", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequence = TestUtils::getTestValue("createAnimationInteractiveSequence", "sequence", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\InteractiveSequence');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createAnimationInteractiveSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequence", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequence($testname, $testslideIndex, $testsequence, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createAnimationInteractiveSequenceEffect
     * Add an animation effect to a slide interactive sequence.
     */
    public function testCreateAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "createAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "createAnimationInteractiveSequenceEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "effect", $testeffect);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "effect", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testCreateAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createAnimationInteractiveSequenceEffect", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createChartCategory
     * Add a new category to a chart.
     */
    public function testCreateChartCategory()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createChartCategory");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateChartCategoryInvalidname()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createChartCategory", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "name", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createChartCategory", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createChartCategory", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidcategory()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testcategory = TestUtils::invalidizeValue("category", "createChartCategory", $testcategory, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "category", $testcategory);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "category", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "category", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "category", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createChartCategory", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "password", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createChartCategory", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "folder", self::$okToFailValues);
        }
    }

    public function testCreateChartCategoryInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartCategory", "shapeIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("createChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("createChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartCategory", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createChartCategory", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartCategory", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartCategory", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartCategory", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartCategory", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createChartDataPoint
     * Add a new data point to a chart series.
     */
    public function testCreateChartDataPoint()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createChartDataPoint");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateChartDataPointInvalidname()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createChartDataPoint", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "name", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createChartDataPoint", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createChartDataPoint", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "createChartDataPoint", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "seriesIndex", $testseriesIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvaliddataPoint()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testdataPoint = TestUtils::invalidizeValue("dataPoint", "createChartDataPoint", $testdataPoint, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "dataPoint", $testdataPoint);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "dataPoint", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createChartDataPoint", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "password", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createChartDataPoint", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "folder", self::$okToFailValues);
        }
    }

    public function testCreateChartDataPointInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("createChartDataPoint", "seriesIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("createChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("createChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartDataPoint", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createChartDataPoint", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartDataPoint", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartDataPoint", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartDataPoint", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartDataPoint", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createChartSeries
     * Add a new series to a chart.
     */
    public function testCreateChartSeries()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createChartSeries");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateChartSeriesInvalidname()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createChartSeries", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "name", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createChartSeries", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createChartSeries", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidseries()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testseries = TestUtils::invalidizeValue("series", "createChartSeries", $testseries, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "series", $testseries);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "series", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "series", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "series", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createChartSeries", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "password", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createChartSeries", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "folder", self::$okToFailValues);
        }
    }

    public function testCreateChartSeriesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createChartSeries", "shapeIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("createChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("createChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createChartSeries", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createChartSeries", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createChartSeries", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createChartSeries($testname, $testslideIndex, $testshapeIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createChartSeries", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createChartSeries", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createChartSeries", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createComment
     * Adds the comment on the slide.
     */
    public function testCreateComment()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createComment");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateCommentInvalidname()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createComment", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "name", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createComment", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvaliddto()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createComment", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "dto", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createComment", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "password", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createComment", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "folder", self::$okToFailValues);
        }
    }

    public function testCreateCommentInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createComment", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createComment", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createComment", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createComment", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createComment", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createComment", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createComment", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createComment", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createComment($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createComment", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createComment", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createComment", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createCommentOnline
     * Adds the comment on the slide.
     */
    public function testCreateCommentOnline()
    {
        $testdocument = TestUtils::getStreamValue("createCommentOnline", "document");
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createCommentOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testCreateCommentOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("createCommentOnline", "document");
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "document", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("createCommentOnline", "document");
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createCommentOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvaliddto()
    {
        $testdocument = TestUtils::getStreamValue("createCommentOnline", "document");
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createCommentOnline", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "dto", self::$okToFailValues);
        }
    }

    public function testCreateCommentOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("createCommentOnline", "document");
        $testslideIndex = TestUtils::getTestValue("createCommentOnline", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createCommentOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideComment');
        $testpassword = TestUtils::getTestValue("createCommentOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createCommentOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createCommentOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createCommentOnline($testdocument, $testslideIndex, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createCommentOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createCommentOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createCommentOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for createFolder
     * Create the folder
     */
    public function testCreateFolder()
    {
        $testpath = TestUtils::getTestValue("createFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("createFolder", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createFolder", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createFolder($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCreateFolderInvalidpath()
    {
        $testpath = TestUtils::getTestValue("createFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("createFolder", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "createFolder", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createFolder", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createFolder($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createFolder", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createFolder", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createFolder", "path", self::$okToFailValues);
        }
    }

    public function testCreateFolderInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("createFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("createFolder", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "createFolder", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createFolder", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createFolder($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createFolder", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createFolder", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createFolder", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for createImageWatermark
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateImageWatermark()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createImageWatermark");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCreateImageWatermarkInvalidname()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createImageWatermark", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "name", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidimage()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testimage = null;
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "image", $testimage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "image", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "image", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "image", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidpictureFrame()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testpictureFrame = TestUtils::invalidizeValue("pictureFrame", "createImageWatermark", $testpictureFrame, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "pictureFrame", $testpictureFrame);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "pictureFrame", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "pictureFrame", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "pictureFrame", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createImageWatermark", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "password", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createImageWatermark", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "folder", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createImageWatermark", "name", self::$values, 'string');
        $testimage = TestUtils::getStreamValue("createImageWatermark", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermark", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createImageWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createImageWatermark", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createImageWatermark", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermark", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermark($testname, $testimage, $testpictureFrame, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermark", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermark", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermark", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createImageWatermarkOnline
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateImageWatermarkOnline()
    {
        $testdocument = TestUtils::getStreamValue("createImageWatermarkOnline", "document");
        $testimage = TestUtils::getStreamValue("createImageWatermarkOnline", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createImageWatermarkOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testCreateImageWatermarkOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("createImageWatermarkOnline", "document");
        $testimage = TestUtils::getStreamValue("createImageWatermarkOnline", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "document", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkOnlineInvalidimage()
    {
        $testdocument = TestUtils::getStreamValue("createImageWatermarkOnline", "document");
        $testimage = TestUtils::getStreamValue("createImageWatermarkOnline", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testimage = null;
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "image", $testimage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "image", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "image", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "image", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkOnlineInvalidpictureFrame()
    {
        $testdocument = TestUtils::getStreamValue("createImageWatermarkOnline", "document");
        $testimage = TestUtils::getStreamValue("createImageWatermarkOnline", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testpictureFrame = TestUtils::invalidizeValue("pictureFrame", "createImageWatermarkOnline", $testpictureFrame, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "pictureFrame", $testpictureFrame);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "pictureFrame", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "pictureFrame", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "pictureFrame", self::$okToFailValues);
        }
    }

    public function testCreateImageWatermarkOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("createImageWatermarkOnline", "document");
        $testimage = TestUtils::getStreamValue("createImageWatermarkOnline", "image");
        $testpictureFrame = TestUtils::getTestValue("createImageWatermarkOnline", "pictureFrame", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PictureFrame');
        $testpassword = TestUtils::getTestValue("createImageWatermarkOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createImageWatermarkOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createImageWatermarkOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createImageWatermarkOnline($testdocument, $testimage, $testpictureFrame, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createImageWatermarkOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createImageWatermarkOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createImageWatermarkOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for createNotesSlide
     * Add new notes slide.
     */
    public function testCreateNotesSlide()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvaliddto()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createNotesSlide", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "dto", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("createNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createNotesSlideParagraph
     * Creates new paragraph.
     */
    public function testCreateNotesSlideParagraph()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createNotesSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateNotesSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createNotesSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createNotesSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createNotesSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createNotesSlideParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvalidposition()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createNotesSlideParagraph", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "position", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createNotesSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createNotesSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createNotesSlideParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createNotesSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createNotesSlidePortion
     * Creates new portion.
     */
    public function testCreateNotesSlidePortion()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createNotesSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateNotesSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createNotesSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createNotesSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createNotesSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "createNotesSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createNotesSlidePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "dto", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidposition()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createNotesSlidePortion", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "position", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createNotesSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createNotesSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createNotesSlidePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlidePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createNotesSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlidePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlidePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createNotesSlideShape
     * Create new shape.
     */
    public function testCreateNotesSlideShape()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createNotesSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateNotesSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createNotesSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createNotesSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createNotesSlideShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "dto", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvalidshapeToClone()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testshapeToClone = TestUtils::invalidizeValue("shapeToClone", "createNotesSlideShape", $testshapeToClone, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "shapeToClone", $testshapeToClone);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "shapeToClone", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "shapeToClone", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "shapeToClone", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvalidposition()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createNotesSlideShape", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "position", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createNotesSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createNotesSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testCreateNotesSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createNotesSlideShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createNotesSlideShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createNotesSlideShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createNotesSlideShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createNotesSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createNotesSlideShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createNotesSlideShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createNotesSlideShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createParagraph
     * Creates new paragraph.
     */
    public function testCreateParagraph()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "name", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidposition()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createParagraph", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "position", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "password", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testCreateParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createParagraph($testname, $testslideIndex, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPortion
     * Creates new portion.
     */
    public function testCreatePortion()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "name", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createPortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createPortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "createPortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createPortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "dto", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidposition()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createPortion", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "position", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "password", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("createPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createPortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createPortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createPortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPresentation
     * Create a presentation.
     */
    public function testCreatePresentation()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPresentation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "name", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvaliddata()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testdata = null;
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "data", $testdata);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "data", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "data", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "data", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidinputPassword()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testinputPassword = TestUtils::invalidizeValue("inputPassword", "createPresentation", $testinputPassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "inputPassword", $testinputPassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "inputPassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "inputPassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "inputPassword", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "password", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPresentation", "name", self::$values, 'string');
        $testdata = TestUtils::getStreamValue("createPresentation", "data");
        $testinputPassword = TestUtils::getTestValue("createPresentation", "inputPassword", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentation($testname, $testdata, $testinputPassword, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPresentationFromSource
     * Create a presentation from an existing source.
     */
    public function testCreatePresentationFromSource()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPresentationFromSource");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePresentationFromSourceInvalidname()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPresentationFromSource", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "name", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidsourcePath()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testsourcePath = TestUtils::invalidizeValue("sourcePath", "createPresentationFromSource", $testsourcePath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "sourcePath", $testsourcePath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "sourcePath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "sourcePath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "sourcePath", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidsourcePassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testsourcePassword = TestUtils::invalidizeValue("sourcePassword", "createPresentationFromSource", $testsourcePassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "sourcePassword", $testsourcePassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "sourcePassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "sourcePassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "sourcePassword", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidsourceStorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testsourceStorage = TestUtils::invalidizeValue("sourceStorage", "createPresentationFromSource", $testsourceStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "sourceStorage", $testsourceStorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "sourceStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "sourceStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "sourceStorage", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPresentationFromSource", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "password", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPresentationFromSource", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromSourceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromSource", "name", self::$values, 'string');
        $testsourcePath = TestUtils::getTestValue("createPresentationFromSource", "sourcePath", self::$values, 'string');
        $testsourcePassword = TestUtils::getTestValue("createPresentationFromSource", "sourcePassword", self::$values, 'string');
        $testsourceStorage = TestUtils::getTestValue("createPresentationFromSource", "sourceStorage", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createPresentationFromSource", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromSource", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromSource", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPresentationFromSource", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromSource", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromSource($testname, $testsourcePath, $testsourcePassword, $testsourceStorage, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromSource", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromSource", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromSource", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createPresentationFromTemplate
     * Create a presentation.
     */
    public function testCreatePresentationFromTemplate()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createPresentationFromTemplate");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreatePresentationFromTemplateInvalidname()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createPresentationFromTemplate", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "name", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidtemplatePath()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testtemplatePath = TestUtils::invalidizeValue("templatePath", "createPresentationFromTemplate", $testtemplatePath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "templatePath", $testtemplatePath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "templatePath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "templatePath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "templatePath", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvaliddata()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testdata = TestUtils::invalidizeValue("data", "createPresentationFromTemplate", $testdata, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "data", $testdata);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "data", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "data", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "data", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidtemplatePassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testtemplatePassword = TestUtils::invalidizeValue("templatePassword", "createPresentationFromTemplate", $testtemplatePassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "templatePassword", $testtemplatePassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "templatePassword", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "templatePassword", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "templatePassword", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidtemplateStorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testtemplateStorage = TestUtils::invalidizeValue("templateStorage", "createPresentationFromTemplate", $testtemplateStorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "templateStorage", $testtemplateStorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "templateStorage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "templateStorage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "templateStorage", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidisImageDataEmbedded()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::invalidizeValue("isImageDataEmbedded", "createPresentationFromTemplate", $testisImageDataEmbedded, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "isImageDataEmbedded", $testisImageDataEmbedded);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "isImageDataEmbedded", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "isImageDataEmbedded", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "isImageDataEmbedded", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createPresentationFromTemplate", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "password", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createPresentationFromTemplate", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "folder", self::$okToFailValues);
        }
    }

    public function testCreatePresentationFromTemplateInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createPresentationFromTemplate", "name", self::$values, 'string');
        $testtemplatePath = TestUtils::getTestValue("createPresentationFromTemplate", "templatePath", self::$values, 'string');
        $testdata = TestUtils::getTestValue("createPresentationFromTemplate", "data", self::$values, 'string');
        $testtemplatePassword = TestUtils::getTestValue("createPresentationFromTemplate", "templatePassword", self::$values, 'string');
        $testtemplateStorage = TestUtils::getTestValue("createPresentationFromTemplate", "templateStorage", self::$values, 'string');
        $testisImageDataEmbedded = TestUtils::getTestValue("createPresentationFromTemplate", "isImageDataEmbedded", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("createPresentationFromTemplate", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createPresentationFromTemplate", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createPresentationFromTemplate", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createPresentationFromTemplate", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createPresentationFromTemplate", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createPresentationFromTemplate($testname, $testtemplatePath, $testdata, $testtemplatePassword, $testtemplateStorage, $testisImageDataEmbedded, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createPresentationFromTemplate", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createPresentationFromTemplate", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createPresentationFromTemplate", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSection
     * Create a section starting at a specified slide index.
     */
    public function testCreateSection()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "name", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidsectionName()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testsectionName = TestUtils::invalidizeValue("sectionName", "createSection", $testsectionName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "sectionName", $testsectionName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "sectionName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "sectionName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "sectionName", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSection", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "password", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSection", "name", self::$values, 'string');
        $testsectionName = TestUtils::getTestValue("createSection", "sectionName", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSection", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSection", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSection($testname, $testsectionName, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createShape
     * Create new shape.
     */
    public function testCreateShape()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "name", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "dto", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidshapeToClone()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testshapeToClone = TestUtils::invalidizeValue("shapeToClone", "createShape", $testshapeToClone, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "shapeToClone", $testshapeToClone);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "shapeToClone", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "shapeToClone", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "shapeToClone", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidposition()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createShape", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "position", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "password", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "folder", self::$okToFailValues);
        }
    }

    public function testCreateShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createShape", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createShape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createShape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createShape($testname, $testslideIndex, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSlide
     * Create a slide.
     */
    public function testCreateSlide()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "name", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidlayoutAlias()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testlayoutAlias = TestUtils::invalidizeValue("layoutAlias", "createSlide", $testlayoutAlias, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "layoutAlias", $testlayoutAlias);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "layoutAlias", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "layoutAlias", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "layoutAlias", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSlide", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "position", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "password", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSlide", "name", self::$values, 'string');
        $testlayoutAlias = TestUtils::getTestValue("createSlide", "layoutAlias", self::$values, 'string');
        $testposition = TestUtils::getTestValue("createSlide", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSlide($testname, $testlayoutAlias, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSubshape
     * Create new shape (for smart art and group shapes).
     */
    public function testCreateSubshape()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSubshape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSubshapeInvalidname()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSubshape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "name", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSubshape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidpath()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "createSubshape", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "path", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createSubshape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "dto", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidshapeToClone()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testshapeToClone = TestUtils::invalidizeValue("shapeToClone", "createSubshape", $testshapeToClone, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "shapeToClone", $testshapeToClone);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "shapeToClone", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "shapeToClone", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "shapeToClone", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSubshape", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "position", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSubshape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "password", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSubshape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshape", "path", self::$values, 'string');
        $testdto = TestUtils::getTestValue("createSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testshapeToClone = TestUtils::getTestValue("createSubshape", "shapeToClone", self::$values, 'int');
        $testposition = TestUtils::getTestValue("createSubshape", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSubshape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshape($testname, $testslideIndex, $testpath, $testdto, $testshapeToClone, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSubshapeParagraph
     * Creates new paragraph (for smart art and group shapes).
     */
    public function testCreateSubshapeParagraph()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSubshapeParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSubshapeParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSubshapeParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "name", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSubshapeParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidpath()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "createSubshapeParagraph", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "path", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createSubshapeParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createSubshapeParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSubshapeParagraph", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "position", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSubshapeParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "password", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSubshapeParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSubshapeParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testposition = TestUtils::getTestValue("createSubshapeParagraph", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapeParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSubshapeParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapeParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapeParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createSubshapePortion
     * Creates new portion (for smart art and group shapes).
     */
    public function testCreateSubshapePortion()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createSubshapePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testCreateSubshapePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createSubshapePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "name", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "createSubshapePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidpath()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "createSubshapePortion", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "path", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "createSubshapePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "createSubshapePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "createSubshapePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "dto", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidposition()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testposition = TestUtils::invalidizeValue("position", "createSubshapePortion", $testposition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "position", $testposition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "position", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "position", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "position", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createSubshapePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "password", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createSubshapePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "folder", self::$okToFailValues);
        }
    }

    public function testCreateSubshapePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("createSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("createSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("createSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("createSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("createSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testposition = TestUtils::getTestValue("createSubshapePortion", "position", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("createSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createSubshapePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createSubshapePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createSubshapePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testposition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createSubshapePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createSubshapePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createSubshapePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createWatermark
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateWatermark()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createWatermark");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testCreateWatermarkInvalidname()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "createWatermark", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "name", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidshape()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testshape = TestUtils::invalidizeValue("shape", "createWatermark", $testshape, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "shape", $testshape);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "shape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "shape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "shape", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfontHeight()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfontHeight = TestUtils::invalidizeValue("fontHeight", "createWatermark", $testfontHeight, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "fontHeight", $testfontHeight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "fontHeight", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "fontHeight", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "fontHeight", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidtext()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testtext = TestUtils::invalidizeValue("text", "createWatermark", $testtext, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "text", $testtext);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "text", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "text", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "text", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfontName()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "createWatermark", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "fontName", $testfontName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "fontName", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfontColor()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfontColor = TestUtils::invalidizeValue("fontColor", "createWatermark", $testfontColor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "fontColor", $testfontColor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "fontColor", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "fontColor", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "fontColor", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidpassword()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createWatermark", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "password", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidfolder()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "createWatermark", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "folder", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkInvalidstorage()
    {
        $testname = TestUtils::getTestValue("createWatermark", "name", self::$values, 'string');
        $testshape = TestUtils::getTestValue("createWatermark", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermark", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermark", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermark", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermark", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("createWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("createWatermark", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "createWatermark", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermark", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermark($testname, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermark", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermark", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermark", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for createWatermarkOnline
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.
     */
    public function testCreateWatermarkOnline()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "createWatermarkOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testCreateWatermarkOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "document", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidshape()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testshape = TestUtils::invalidizeValue("shape", "createWatermarkOnline", $testshape, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "shape", $testshape);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "shape", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "shape", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "shape", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidfontHeight()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testfontHeight = TestUtils::invalidizeValue("fontHeight", "createWatermarkOnline", $testfontHeight, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "fontHeight", $testfontHeight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "fontHeight", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "fontHeight", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "fontHeight", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidtext()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testtext = TestUtils::invalidizeValue("text", "createWatermarkOnline", $testtext, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "text", $testtext);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "text", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "text", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "text", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidfontName()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testfontName = TestUtils::invalidizeValue("fontName", "createWatermarkOnline", $testfontName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "fontName", $testfontName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "fontName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "fontName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "fontName", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidfontColor()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testfontColor = TestUtils::invalidizeValue("fontColor", "createWatermarkOnline", $testfontColor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "fontColor", $testfontColor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "fontColor", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "fontColor", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "fontColor", self::$okToFailValues);
        }
    }

    public function testCreateWatermarkOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("createWatermarkOnline", "document");
        $testshape = TestUtils::getTestValue("createWatermarkOnline", "shape", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Shape');
        $testfontHeight = TestUtils::getTestValue("createWatermarkOnline", "fontHeight", self::$values, 'float');
        $testtext = TestUtils::getTestValue("createWatermarkOnline", "text", self::$values, 'string');
        $testfontName = TestUtils::getTestValue("createWatermarkOnline", "fontName", self::$values, 'string');
        $testfontColor = TestUtils::getTestValue("createWatermarkOnline", "fontColor", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("createWatermarkOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "createWatermarkOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("createWatermarkOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->createWatermarkOnline($testdocument, $testshape, $testfontHeight, $testtext, $testfontName, $testfontColor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "createWatermarkOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "createWatermarkOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("createWatermarkOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimation
     * Remove animation from a slide.
     */
    public function testDeleteAnimation()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimation", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimation($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationEffect
     * Remove an effect from slide animation.
     */
    public function testDeleteAnimationEffect()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "deleteAnimationEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "effectIndex", $testeffectIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationEffect", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationInteractiveSequence
     * Remove an interactive sequence from slide animation.
     */
    public function testDeleteAnimationInteractiveSequence()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationInteractiveSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationInteractiveSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationInteractiveSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "deleteAnimationInteractiveSequence", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "sequenceIndex", $testsequenceIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationInteractiveSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationInteractiveSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "sequenceIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationInteractiveSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequence", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequence($testname, $testslideIndex, $testsequenceIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationInteractiveSequenceEffect
     * Remove an effect from slide animation interactive sequence.
     */
    public function testDeleteAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "deleteAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "deleteAnimationInteractiveSequenceEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "effectIndex", $testeffectIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequenceEffect", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationInteractiveSequences
     * Clear all interactive sequences from slide animation.
     */
    public function testDeleteAnimationInteractiveSequences()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationInteractiveSequences");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationInteractiveSequences", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationInteractiveSequences", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationInteractiveSequences", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationInteractiveSequences", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationInteractiveSequencesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationInteractiveSequences", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationInteractiveSequences", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationInteractiveSequences", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationInteractiveSequences($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationInteractiveSequences", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationInteractiveSequences", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationInteractiveSequences", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteAnimationMainSequence
     * Clear main sequence in slide animation.
     */
    public function testDeleteAnimationMainSequence()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteAnimationMainSequence");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteAnimationMainSequence", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "name", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteAnimationMainSequence", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteAnimationMainSequence", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "password", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteAnimationMainSequence", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteAnimationMainSequenceInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteAnimationMainSequence", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteAnimationMainSequence", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteAnimationMainSequence", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteAnimationMainSequence", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteAnimationMainSequence", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteAnimationMainSequence", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteAnimationMainSequence", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteAnimationMainSequence($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteAnimationMainSequence", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteAnimationMainSequence", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteAnimationMainSequence", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteBackground
     * Remove background from a slide.
     */
    public function testDeleteBackground()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteBackground");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteBackgroundInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteBackground", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "name", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteBackground", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteBackground", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "password", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteBackground", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteBackgroundInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteBackground", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteBackground", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteBackground", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteBackground", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteBackground", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteBackground", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteChartCategory
     * Delete a category from a chart.
     */
    public function testDeleteChartCategory()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteChartCategory");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteChartCategoryInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteChartCategory", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "name", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteChartCategory", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteChartCategory", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidcategoryIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testcategoryIndex = TestUtils::invalidizeValue("categoryIndex", "deleteChartCategory", $testcategoryIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "categoryIndex", $testcategoryIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "categoryIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteChartCategory", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "password", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteChartCategory", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteChartCategoryInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("deleteChartCategory", "categoryIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartCategory", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteChartCategory", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartCategory", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartCategory", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartCategory", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartCategory", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteChartDataPoint
     * Delete a data point from a chart series.
     */
    public function testDeleteChartDataPoint()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteChartDataPoint");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteChartDataPointInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteChartDataPoint", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "name", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteChartDataPoint", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteChartDataPoint", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "deleteChartDataPoint", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "seriesIndex", $testseriesIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidpointIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testpointIndex = TestUtils::invalidizeValue("pointIndex", "deleteChartDataPoint", $testpointIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "pointIndex", $testpointIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "pointIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteChartDataPoint", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "password", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteChartDataPoint", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteChartDataPointInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("deleteChartDataPoint", "pointIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartDataPoint", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteChartDataPoint", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartDataPoint", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartDataPoint", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartDataPoint", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartDataPoint", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteChartSeries
     * Delete a series from a chart.
     */
    public function testDeleteChartSeries()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteChartSeries");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteChartSeriesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteChartSeries", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "name", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteChartSeries", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteChartSeries", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "deleteChartSeries", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "seriesIndex", $testseriesIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteChartSeries", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "password", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteChartSeries", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteChartSeriesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("deleteChartSeries", "seriesIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteChartSeries", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteChartSeries", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteChartSeries", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteChartSeries", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteChartSeries", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteChartSeries", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteComments
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.
     */
    public function testDeleteComments()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteComments");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteCommentsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteComments", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "name", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidauthor()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteComments", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "author", $testauthor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "author", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteComments", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "password", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteComments", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteComments", "name", self::$values, 'string');
        $testauthor = TestUtils::getTestValue("deleteComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteComments", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteComments", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteComments", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteComments($testname, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteComments", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteComments", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteComments", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteCommentsOnline
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.
     */
    public function testDeleteCommentsOnline()
    {
        $testdocument = TestUtils::getStreamValue("deleteCommentsOnline", "document");
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteCommentsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteCommentsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("deleteCommentsOnline", "document");
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteCommentsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteCommentsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteCommentsOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsOnlineInvalidauthor()
    {
        $testdocument = TestUtils::getStreamValue("deleteCommentsOnline", "document");
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteCommentsOnline", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", "author", $testauthor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteCommentsOnline", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteCommentsOnline", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteCommentsOnline", "author", self::$okToFailValues);
        }
    }

    public function testDeleteCommentsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("deleteCommentsOnline", "document");
        $testauthor = TestUtils::getTestValue("deleteCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteCommentsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteCommentsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteCommentsOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteCommentsOnline($testdocument, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteCommentsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteCommentsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteCommentsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteDocumentProperties
     * Clean document properties.
     */
    public function testDeleteDocumentProperties()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteDocumentProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteDocumentPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteDocumentProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "name", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteDocumentProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "password", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteDocumentProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteDocumentProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteDocumentProperty
     * Delete document property.
     */
    public function testDeleteDocumentProperty()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteDocumentProperty");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteDocumentPropertyInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteDocumentProperty", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "name", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidpropertyName()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testpropertyName = TestUtils::invalidizeValue("propertyName", "deleteDocumentProperty", $testpropertyName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "propertyName", $testpropertyName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "propertyName", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteDocumentProperty", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "password", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteDocumentProperty", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteDocumentPropertyInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("deleteDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteDocumentProperty", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteDocumentProperty", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteDocumentProperty", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteDocumentProperty", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteDocumentProperty", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteDocumentProperty", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteFile
     * Delete file
     */
    public function testDeleteFile()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteFile");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteFileInvalidpath()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteFile", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFile", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFile", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFile", "path", self::$okToFailValues);
        }
    }

    public function testDeleteFileInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "deleteFile", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFile", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFile", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFile", "storageName", self::$okToFailValues);
        }
    }

    public function testDeleteFileInvalidversionId()
    {
        $testpath = TestUtils::getTestValue("deleteFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("deleteFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "deleteFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFile", "versionId", $testversionId);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteFolder
     * Delete folder
     */
    public function testDeleteFolder()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteFolderInvalidpath()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        $testpath = TestUtils::invalidizeValue("path", "deleteFolder", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFolder", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFolder", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFolder", "path", self::$okToFailValues);
        }
    }

    public function testDeleteFolderInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        $teststorageName = TestUtils::invalidizeValue("storageName", "deleteFolder", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFolder", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFolder", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFolder", "storageName", self::$okToFailValues);
        }
    }

    public function testDeleteFolderInvalidrecursive()
    {
        $testpath = TestUtils::getTestValue("deleteFolder", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("deleteFolder", "storageName", self::$values, 'string');
        $testrecursive = TestUtils::getTestValue("deleteFolder", "recursive", self::$values, 'bool');
        $testrecursive = TestUtils::invalidizeValue("recursive", "deleteFolder", $testrecursive, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteFolder", "recursive", $testrecursive);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteFolder($testpath, $teststorageName, $testrecursive);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteFolder", "recursive", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteFolder", "recursive", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteFolder", "recursive", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlide
     * Remove notes slide.
     */
    public function testDeleteNotesSlide()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlideParagraph
     * Remove a paragraph.
     */
    public function testDeleteNotesSlideParagraph()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteNotesSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteNotesSlideParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlideParagraphs
     * Remove a range of paragraphs.
     */
    public function testDeleteNotesSlideParagraphs()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlideParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlideParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlideParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteNotesSlideParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidparagraphs()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $testparagraphs = TestUtils::invalidizeValue("paragraphs", "deleteNotesSlideParagraphs", $testparagraphs, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "paragraphs", $testparagraphs);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "paragraphs", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlideParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlideParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteNotesSlideParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideParagraphs", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlideParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideParagraphs", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideParagraphs", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlidePortion
     * Remove a portion.
     */
    public function testDeleteNotesSlidePortion()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteNotesSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteNotesSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "deleteNotesSlidePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlidePortions
     * Remove a range of portions.
     */
    public function testDeleteNotesSlidePortions()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlidePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlidePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlidePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteNotesSlidePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteNotesSlidePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidportions()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testportions = TestUtils::invalidizeValue("portions", "deleteNotesSlidePortions", $testportions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "portions", $testportions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "portions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "portions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "portions", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlidePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlidePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlidePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteNotesSlidePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlidePortions", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlidePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlidePortions", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlidePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlidePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlidePortions", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlideShape
     * Remove a shape.
     */
    public function testDeleteNotesSlideShape()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteNotesSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteNotesSlideShapes
     * Remove a range of shapes.
     */
    public function testDeleteNotesSlideShapes()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteNotesSlideShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteNotesSlideShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteNotesSlideShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShapes", "name", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteNotesSlideShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "deleteNotesSlideShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", "shapes", $testshapes);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteNotesSlideShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShapes", "password", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteNotesSlideShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShapes", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteNotesSlideShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteNotesSlideShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteNotesSlideShapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteNotesSlideShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteNotesSlideShapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteNotesSlideShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteNotesSlideShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteNotesSlideShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteNotesSlideShapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteParagraph
     * Remove a paragraph.
     */
    public function testDeleteParagraph()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "name", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "password", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteParagraphs
     * Remove a range of paragraphs.
     */
    public function testDeleteParagraphs()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidparagraphs()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testparagraphs = TestUtils::invalidizeValue("paragraphs", "deleteParagraphs", $testparagraphs, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "paragraphs", $testparagraphs);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "paragraphs", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteParagraphs", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteParagraphs", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteParagraphs($testname, $testslideIndex, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteParagraphs", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deletePortion
     * Remove a portion.
     */
    public function testDeletePortion()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deletePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeletePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deletePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "name", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deletePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deletePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deletePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "deletePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deletePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "password", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deletePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "folder", self::$okToFailValues);
        }
    }

    public function testDeletePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deletePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deletePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deletePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deletePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deletePortions
     * Remove a range of portions.
     */
    public function testDeletePortions()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deletePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeletePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deletePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "name", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deletePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deletePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deletePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidportions()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testportions = TestUtils::invalidizeValue("portions", "deletePortions", $testportions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "portions", $testportions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "portions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "portions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "portions", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deletePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "password", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deletePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "folder", self::$okToFailValues);
        }
    }

    public function testDeletePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deletePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deletePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deletePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deletePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deletePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deletePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deletePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deletePortions", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deletePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deletePortions", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deletePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deletePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deletePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deletePortions", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteProtection
     * Resets all presentation protection settings.
     */
    public function testDeleteProtection()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteProtection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteProtectionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteProtection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "name", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteProtection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "password", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteProtection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteProtection", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteProtection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteProtection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtection", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtection($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteProtectionOnline
     * Resets all presentation protection settings.
     */
    public function testDeleteProtectionOnline()
    {
        $testdocument = TestUtils::getStreamValue("deleteProtectionOnline", "document");
        $testpassword = TestUtils::getTestValue("deleteProtectionOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtectionOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtectionOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteProtectionOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteProtectionOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("deleteProtectionOnline", "document");
        $testpassword = TestUtils::getTestValue("deleteProtectionOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtectionOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtectionOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtectionOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtectionOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtectionOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteProtectionOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("deleteProtectionOnline", "document");
        $testpassword = TestUtils::getTestValue("deleteProtectionOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteProtectionOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteProtectionOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteProtectionOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteProtectionOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteProtectionOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteProtectionOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSection
     * Delete a presentation section.
     */
    public function testDeleteSection()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidsectionIndex()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testsectionIndex = TestUtils::invalidizeValue("sectionIndex", "deleteSection", $testsectionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "sectionIndex", $testsectionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "sectionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "sectionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "sectionIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidwithSlides()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testwithSlides = TestUtils::invalidizeValue("withSlides", "deleteSection", $testwithSlides, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "withSlides", $testwithSlides);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "withSlides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "withSlides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "withSlides", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("deleteSection", "sectionIndex", self::$values, 'int');
        $testwithSlides = TestUtils::getTestValue("deleteSection", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSection", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSection($testname, $testsectionIndex, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSections
     * Delete presentation sections.
     */
    public function testDeleteSections()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSections");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSectionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSections", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidsections()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testsections = TestUtils::invalidizeValue("sections", "deleteSections", $testsections, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "sections", $testsections);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "sections", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "sections", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "sections", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidwithSlides()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testwithSlides = TestUtils::invalidizeValue("withSlides", "deleteSections", $testwithSlides, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "withSlides", $testwithSlides);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "withSlides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "withSlides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "withSlides", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSections", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSections", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSectionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("deleteSections", "sections", self::$values, 'array');
        $testwithSlides = TestUtils::getTestValue("deleteSections", "withSlides", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("deleteSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSections", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSections", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSections", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSections($testname, $testsections, $testwithSlides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSections", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSections", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSections", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteShape
     * Remove a shape.
     */
    public function testDeleteShape()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "name", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "password", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("deleteShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteShapes
     * Remove a range of shapes.
     */
    public function testDeleteShapes()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "name", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "deleteShapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "shapes", $testshapes);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "shapes", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "password", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteShapes", "slideIndex", self::$values, 'int');
        $testshapes = TestUtils::getTestValue("deleteShapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteShapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteShapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteShapes($testname, $testslideIndex, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteShapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlide
     * Delete a presentation slide by index.
     */
    public function testDeleteSlide()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlideComments
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.
     */
    public function testDeleteSlideComments()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlideComments");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSlideCommentsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSlideComments", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSlideComments", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidauthor()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteSlideComments", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "author", $testauthor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "author", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlideComments", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSlideComments", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSlideComments", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideComments", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlideComments", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSlideComments", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideComments", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideComments($testname, $testslideIndex, $testauthor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideComments", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideComments", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideComments", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlideCommentsOnline
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.
     */
    public function testDeleteSlideCommentsOnline()
    {
        $testdocument = TestUtils::getStreamValue("deleteSlideCommentsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlideCommentsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteSlideCommentsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("deleteSlideCommentsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("deleteSlideCommentsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSlideCommentsOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsOnlineInvalidauthor()
    {
        $testdocument = TestUtils::getStreamValue("deleteSlideCommentsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testauthor = TestUtils::invalidizeValue("author", "deleteSlideCommentsOnline", $testauthor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "author", $testauthor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "author", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "author", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "author", self::$okToFailValues);
        }
    }

    public function testDeleteSlideCommentsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("deleteSlideCommentsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("deleteSlideCommentsOnline", "slideIndex", self::$values, 'int');
        $testauthor = TestUtils::getTestValue("deleteSlideCommentsOnline", "author", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteSlideCommentsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlideCommentsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlideCommentsOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlideCommentsOnline($testdocument, $testslideIndex, $testauthor, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlideCommentsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlideCommentsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlideCommentsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSlides
     * Delete presentation slides.
     */
    public function testDeleteSlides()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidslides()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testslides = TestUtils::invalidizeValue("slides", "deleteSlides", $testslides, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "slides", $testslides);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "slides", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "slides", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "slides", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSlides", "name", self::$values, 'string');
        $testslides = TestUtils::getTestValue("deleteSlides", "slides", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSlides", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSlides($testname, $testslides, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSubshape
     * Remove a shape (for smart art and group shapes).
     */
    public function testDeleteSubshape()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSubshape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSubshapeInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSubshape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSubshape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeInvalidpath()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteSubshape", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "path", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSubshape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSubshape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSubshape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSubshape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSubshapeParagraph
     * Remove a paragraph (for smart art and group shapes).
     */
    public function testDeleteSubshapeParagraph()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSubshapeParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSubshapeParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSubshapeParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSubshapeParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidpath()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteSubshapeParagraph", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "path", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSubshapeParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteSubshapeParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSubshapeParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSubshapeParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSubshapeParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSubshapeParagraphs
     * Remove a range of paragraphs (for smart art and group shapes).
     */
    public function testDeleteSubshapeParagraphs()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSubshapeParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSubshapeParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSubshapeParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidpath()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteSubshapeParagraphs", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "path", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSubshapeParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidparagraphs()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testparagraphs = TestUtils::invalidizeValue("paragraphs", "deleteSubshapeParagraphs", $testparagraphs, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "paragraphs", $testparagraphs);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "paragraphs", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "paragraphs", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSubshapeParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSubshapeParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapeParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testparagraphs = TestUtils::getTestValue("deleteSubshapeParagraphs", "paragraphs", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapeParagraphs", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSubshapeParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapeParagraphs", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphs, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapeParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapeParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapeParagraphs", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSubshapePortion
     * Remove a portion (for smart art and group shapes).
     */
    public function testDeleteSubshapePortion()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSubshapePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSubshapePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSubshapePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSubshapePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidpath()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteSubshapePortion", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "path", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSubshapePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteSubshapePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "deleteSubshapePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSubshapePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSubshapePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("deleteSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSubshapePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSubshapePortions
     * Remove a range of portions (for smart art and group shapes).
     */
    public function testDeleteSubshapePortions()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSubshapePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSubshapePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSubshapePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSubshapePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidpath()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteSubshapePortions", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "path", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "deleteSubshapePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "deleteSubshapePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidportions()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testportions = TestUtils::invalidizeValue("portions", "deleteSubshapePortions", $testportions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "portions", $testportions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "portions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "portions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "portions", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSubshapePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSubshapePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("deleteSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("deleteSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testportions = TestUtils::getTestValue("deleteSubshapePortions", "portions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapePortions", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSubshapePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapePortions", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapePortions", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteSubshapes
     * Remove a range of shapes (for smart art and group shapes).
     */
    public function testDeleteSubshapes()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteSubshapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testDeleteSubshapesInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteSubshapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "name", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "deleteSubshapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapesInvalidpath()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "deleteSubshapes", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "path", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapesInvalidshapes()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $testshapes = TestUtils::invalidizeValue("shapes", "deleteSubshapes", $testshapes, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "shapes", $testshapes);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "shapes", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "shapes", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "shapes", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteSubshapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "password", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteSubshapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteSubshapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("deleteSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("deleteSubshapes", "path", self::$values, 'string');
        $testshapes = TestUtils::getTestValue("deleteSubshapes", "shapes", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("deleteSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteSubshapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteSubshapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteSubshapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteSubshapes($testname, $testslideIndex, $testpath, $testshapes, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteSubshapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteSubshapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteSubshapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteWatermark
     * Removes shapes with name \"watermark\" from the presentation.
     */
    public function testDeleteWatermark()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteWatermark");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testDeleteWatermarkInvalidname()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "deleteWatermark", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "name", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidshapeName()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testshapeName = TestUtils::invalidizeValue("shapeName", "deleteWatermark", $testshapeName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "shapeName", $testshapeName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "shapeName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "shapeName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "shapeName", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidpassword()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteWatermark", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "password", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidfolder()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "deleteWatermark", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "folder", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkInvalidstorage()
    {
        $testname = TestUtils::getTestValue("deleteWatermark", "name", self::$values, 'string');
        $testshapeName = TestUtils::getTestValue("deleteWatermark", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermark", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("deleteWatermark", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("deleteWatermark", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "deleteWatermark", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermark", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermark($testname, $testshapeName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermark", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermark", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermark", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for deleteWatermarkOnline
     * Removes shapes with name \"watermark\" from the presentation.
     */
    public function testDeleteWatermarkOnline()
    {
        $testdocument = TestUtils::getStreamValue("deleteWatermarkOnline", "document");
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "deleteWatermarkOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDeleteWatermarkOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("deleteWatermarkOnline", "document");
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermarkOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermarkOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermarkOnline", "document", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkOnlineInvalidshapeName()
    {
        $testdocument = TestUtils::getStreamValue("deleteWatermarkOnline", "document");
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        $testshapeName = TestUtils::invalidizeValue("shapeName", "deleteWatermarkOnline", $testshapeName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", "shapeName", $testshapeName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermarkOnline", "shapeName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermarkOnline", "shapeName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermarkOnline", "shapeName", self::$okToFailValues);
        }
    }

    public function testDeleteWatermarkOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("deleteWatermarkOnline", "document");
        $testshapeName = TestUtils::getTestValue("deleteWatermarkOnline", "shapeName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("deleteWatermarkOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "deleteWatermarkOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("deleteWatermarkOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->deleteWatermarkOnline($testdocument, $testshapeName, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "deleteWatermarkOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "deleteWatermarkOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("deleteWatermarkOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadFile
     * Download file
     */
    public function testDownloadFile()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadFile");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadFileInvalidpath()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "downloadFile", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadFile", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadFile", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadFile", "path", self::$okToFailValues);
        }
    }

    public function testDownloadFileInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "downloadFile", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadFile", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadFile", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadFile", "storageName", self::$okToFailValues);
        }
    }

    public function testDownloadFileInvalidversionId()
    {
        $testpath = TestUtils::getTestValue("downloadFile", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("downloadFile", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("downloadFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "downloadFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadFile", "versionId", $testversionId);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadFile($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImage
     * Get image in specified format.
     */
    public function testDownloadImage()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImage");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImage", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidindex()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImage", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "index", $testindex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImage", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImage", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImage", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImageInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImage", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImage", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImage", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImage", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImage", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImage", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImage", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImage", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImage($testname, $testindex, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImage", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImage", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImage", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImageDefaultFormat
     * Get image binary data.
     */
    public function testDownloadImageDefaultFormat()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImageDefaultFormat");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageDefaultFormatInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImageDefaultFormat", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidindex()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImageDefaultFormat", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "index", $testindex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImageDefaultFormat", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImageDefaultFormat", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImageDefaultFormat", "name", self::$values, 'string');
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormat", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImageDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImageDefaultFormat", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImageDefaultFormat", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormat", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormat($testname, $testindex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormat", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormat", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormat", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImageDefaultFormatOnline
     * Get image binary data.
     */
    public function testDownloadImageDefaultFormatOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageDefaultFormatOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImageDefaultFormatOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageDefaultFormatOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageDefaultFormatOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormatOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatOnlineInvalidindex()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageDefaultFormatOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImageDefaultFormatOnline", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", "index", $testindex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormatOnline", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormatOnline", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormatOnline", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageDefaultFormatOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageDefaultFormatOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "index", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadImageDefaultFormatOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImageDefaultFormatOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageDefaultFormatOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageDefaultFormatOnline($testdocument, $testindex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageDefaultFormatOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImageOnline
     * Get image in specified format.
     */
    public function testDownloadImageOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImageOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImageOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImageOnlineInvalidindex()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testindex = TestUtils::invalidizeValue("index", "downloadImageOnline", $testindex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "index", $testindex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "index", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "index", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "index", self::$okToFailValues);
        }
    }

    public function testDownloadImageOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImageOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImageOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadImageOnline", "document");
        $testindex = TestUtils::getTestValue("downloadImageOnline", "index", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadImageOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImageOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImageOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImageOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImageOnline($testdocument, $testindex, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImageOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImageOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImageOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImages
     * Get all presentation images in specified format.
     */
    public function testDownloadImages()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImages");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImages", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImages", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImages", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImages", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImagesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImages", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadImages", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImages", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImages", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImages", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImages($testname, $testformat, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImages", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImages", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImages", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImagesDefaultFormat
     * Get all presentation images.
     */
    public function testDownloadImagesDefaultFormat()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImagesDefaultFormat");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesDefaultFormatInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadImagesDefaultFormat", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "name", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImagesDefaultFormat", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "password", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadImagesDefaultFormat", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadImagesDefaultFormat", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormat", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadImagesDefaultFormat", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadImagesDefaultFormat", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadImagesDefaultFormat", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormat", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormat($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormat", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormat", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormat", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImagesDefaultFormatOnline
     * Get all presentation images.
     */
    public function testDownloadImagesDefaultFormatOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesDefaultFormatOnline", "document");
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormatOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormatOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImagesDefaultFormatOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesDefaultFormatOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesDefaultFormatOnline", "document");
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormatOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormatOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormatOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormatOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImagesDefaultFormatOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesDefaultFormatOnline", "document");
        $testpassword = TestUtils::getTestValue("downloadImagesDefaultFormatOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImagesDefaultFormatOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesDefaultFormatOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesDefaultFormatOnline($testdocument, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesDefaultFormatOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesDefaultFormatOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadImagesOnline
     * Get all presentation images in specified format.
     */
    public function testDownloadImagesOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesOnline", "document");
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadImagesOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadImagesOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesOnline", "document");
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadImagesOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesOnline", "document");
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadImagesOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadImagesOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadImagesOnline", "document");
        $testformat = TestUtils::getTestValue("downloadImagesOnline", "format", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadImagesOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadImagesOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadImagesOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadImagesOnline($testdocument, $testformat, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadImagesOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadImagesOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadImagesOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadNotesSlide
     * Convert notes slide to the specified image format.
     */
    public function testDownloadNotesSlide()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadNotesSlide", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "format", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidwidth()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadNotesSlide", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "width", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidheight()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadNotesSlide", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "height", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlide", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlide", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadNotesSlide", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlide", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlide($testname, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlide", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlide", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlide", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadNotesSlideOnline
     * Convert notes slide to the specified image format.
     */
    public function testDownloadNotesSlideOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadNotesSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadNotesSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadNotesSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadNotesSlideOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadNotesSlideOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "width", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidheight()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadNotesSlideOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "height", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadNotesSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "password", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("downloadNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadNotesSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadNotesSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideOnline", "password", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadNotesSlideOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadNotesSlideShape
     * Render shape to specified picture format.
     */
    public function testDownloadNotesSlideShape()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadNotesSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadNotesSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadNotesSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadNotesSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadNotesSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadNotesSlideShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "format", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadNotesSlideShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "options", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadNotesSlideShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadNotesSlideShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadNotesSlideShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadNotesSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadNotesSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadNotesSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadNotesSlideShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadNotesSlideShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadNotesSlideShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadNotesSlideShape", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadNotesSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadNotesSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadNotesSlideShape", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadPresentation
     * Save a presentation to a specified format.
     */
    public function testDownloadPresentation()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadPresentation");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadPresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadPresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "name", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadPresentation", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "format", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadPresentation", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "options", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadPresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "password", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadPresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadPresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadPresentationInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadPresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("downloadPresentation", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadPresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("downloadPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadPresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadPresentation", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadPresentation", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadPresentation", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadPresentation($testname, $testformat, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadPresentation", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadPresentation", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadPresentation", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadShape
     * Render shape to specified picture format.
     */
    public function testDownloadShape()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadShape");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "name", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "format", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "options", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "password", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShape", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShape", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShape", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadShapeOnline
     * Render shape to specified picture format.
     */
    public function testDownloadShapeOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadShapeOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadShapeOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadShapeOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidshapeIndex()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadShapeOnline", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadShapeOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidscaleX()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadShapeOnline", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidscaleY()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadShapeOnline", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidbounds()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadShapeOnline", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadShapeOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "password", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadShapeOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadShapeOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("downloadShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("downloadShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadShapeOnline", "format", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("downloadShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadShapeOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadShapeOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadShapeOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadShapeOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadSlide
     * Save a slide to a specified format.
     */
    public function testDownloadSlide()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadSlide");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "name", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadSlide", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "format", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadSlide", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "options", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidwidth()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadSlide", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "width", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidheight()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadSlide", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "height", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "password", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadSlideInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlide", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("downloadSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlide", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadSlide", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlide", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlide($testname, $testslideIndex, $testformat, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlide", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlide", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlide", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadSlideOnline
     * Save a slide to a specified format.
     */
    public function testDownloadSlideOnline()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadSlideOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "format", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "downloadSlideOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "width", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidheight()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "downloadSlideOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "height", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "password", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadSlideOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadSlideOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("downloadSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("downloadSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSlideOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("downloadSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("downloadSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("downloadSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSlideOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadSlideOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSlideOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSlideOnline($testdocument, $testslideIndex, $testformat, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSlideOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for downloadSubshape
     * Render shape to specified picture format (for smart art and group shapes).
     */
    public function testDownloadSubshape()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "downloadSubshape");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testDownloadSubshapeInvalidname()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "downloadSubshape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "name", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "downloadSubshape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidpath()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "downloadSubshape", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "path", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "downloadSubshape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "downloadSubshape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "format", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "downloadSubshape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "options", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "downloadSubshape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "scaleX", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "downloadSubshape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "scaleY", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "downloadSubshape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "bounds", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "downloadSubshape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "password", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "downloadSubshape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "folder", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "downloadSubshape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "storage", self::$okToFailValues);
        }
    }

    public function testDownloadSubshapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("downloadSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("downloadSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("downloadSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("downloadSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("downloadSubshape", "format", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("downloadSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("downloadSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("downloadSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("downloadSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("downloadSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("downloadSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("downloadSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("downloadSubshape", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "downloadSubshape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("downloadSubshape", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->downloadSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "downloadSubshape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "downloadSubshape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("downloadSubshape", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for getAnimation
     * Read slide animation effects.
     */
    public function testGetAnimation()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "name", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getAnimation", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "password", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testGetAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getAnimation", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getAnimation", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getAnimation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getAnimation($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getApiInfo
     * Get API info.
     */
    public function testGetApiInfo()
    {
        list($expectedCode, $expectedMessage) = $this->initialize("getApiInfo", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getApiInfo();
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getApiInfo");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    /**
     * Test case for getBackground
     * Read slide background info.
     */
    public function testGetBackground()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getBackground");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetBackgroundInvalidname()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getBackground", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "name", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getBackground", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getBackground", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "password", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getBackground", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "folder", self::$okToFailValues);
        }
    }

    public function testGetBackgroundInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getBackground", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getBackground", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getBackground", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getBackground", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getBackground($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getBackground", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getBackground", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getBackground", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getColorScheme
     * Read slide theme color scheme info.
     */
    public function testGetColorScheme()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getColorScheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetColorSchemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getColorScheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "name", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getColorScheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getColorScheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "password", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getColorScheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetColorSchemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getColorScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getColorScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getColorScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getColorScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getColorScheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getColorScheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getColorScheme", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getColorScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getColorScheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getColorScheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getColorScheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getDiscUsage
     * Get disc usage
     */
    public function testGetDiscUsage()
    {
        $teststorageName = TestUtils::getTestValue("getDiscUsage", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDiscUsage", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDiscUsage($teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getDiscUsage");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetDiscUsageInvalidstorageName()
    {
        $teststorageName = TestUtils::getTestValue("getDiscUsage", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "getDiscUsage", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDiscUsage", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDiscUsage($teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDiscUsage", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDiscUsage", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDiscUsage", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for getDocumentProperties
     * Read presentation document properties.
     */
    public function testGetDocumentProperties()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getDocumentProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetDocumentPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getDocumentProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getDocumentProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getDocumentProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getDocumentProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getDocumentProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getDocumentProperty
     * Read presentation document property.
     */
    public function testGetDocumentProperty()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getDocumentProperty");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetDocumentPropertyInvalidname()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getDocumentProperty", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "name", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidpropertyName()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testpropertyName = TestUtils::invalidizeValue("propertyName", "getDocumentProperty", $testpropertyName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "propertyName", $testpropertyName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "propertyName", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getDocumentProperty", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "password", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getDocumentProperty", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "folder", self::$okToFailValues);
        }
    }

    public function testGetDocumentPropertyInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("getDocumentProperty", "propertyName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getDocumentProperty", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getDocumentProperty", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getDocumentProperty", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getDocumentProperty($testname, $testpropertyName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getDocumentProperty", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getDocumentProperty", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getDocumentProperty", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFileVersions
     * Get file versions
     */
    public function testGetFileVersions()
    {
        $testpath = TestUtils::getTestValue("getFileVersions", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFileVersions", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFileVersions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFileVersions($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFileVersions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFileVersionsInvalidpath()
    {
        $testpath = TestUtils::getTestValue("getFileVersions", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFileVersions", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getFileVersions", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFileVersions", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFileVersions($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFileVersions", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFileVersions", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFileVersions", "path", self::$okToFailValues);
        }
    }

    public function testGetFileVersionsInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("getFileVersions", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFileVersions", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "getFileVersions", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFileVersions", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFileVersions($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFileVersions", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFileVersions", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFileVersions", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFilesList
     * Get all files and folders within a folder
     */
    public function testGetFilesList()
    {
        $testpath = TestUtils::getTestValue("getFilesList", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFilesList", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFilesList", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFilesList($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFilesList");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFilesListInvalidpath()
    {
        $testpath = TestUtils::getTestValue("getFilesList", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFilesList", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getFilesList", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFilesList", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFilesList($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFilesList", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFilesList", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFilesList", "path", self::$okToFailValues);
        }
    }

    public function testGetFilesListInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("getFilesList", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("getFilesList", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "getFilesList", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFilesList", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFilesList($testpath, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFilesList", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFilesList", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFilesList", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFontScheme
     * Read slide theme font scheme info.
     */
    public function testGetFontScheme()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFontScheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFontSchemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getFontScheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "name", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getFontScheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getFontScheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "password", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getFontScheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetFontSchemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getFontScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFontScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFontScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFontScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFontScheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getFontScheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFontScheme", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFontScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFontScheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFontScheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFontScheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getFormatScheme
     * Read slide theme format scheme info.
     */
    public function testGetFormatScheme()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getFormatScheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetFormatSchemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getFormatScheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "name", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getFormatScheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getFormatScheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "password", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getFormatScheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetFormatSchemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getFormatScheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getFormatScheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getFormatScheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getFormatScheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getFormatScheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getFormatScheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getFormatScheme", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getFormatScheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getFormatScheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getFormatScheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getFormatScheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getLayoutSlide
     * Read presentation layoutSlide info.
     */
    public function testGetLayoutSlide()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getLayoutSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetLayoutSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getLayoutSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getLayoutSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getLayoutSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getLayoutSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getLayoutSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getLayoutSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getLayoutSlides
     * Read presentation layoutSlides info.
     */
    public function testGetLayoutSlides()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getLayoutSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetLayoutSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getLayoutSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "name", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getLayoutSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "password", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getLayoutSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "folder", self::$okToFailValues);
        }
    }

    public function testGetLayoutSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getLayoutSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getLayoutSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getLayoutSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getLayoutSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getLayoutSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getLayoutSlides", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getLayoutSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getLayoutSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getLayoutSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getLayoutSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getMasterSlide
     * Read presentation masterSlide info.
     */
    public function testGetMasterSlide()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getMasterSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetMasterSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getMasterSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getMasterSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getMasterSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getMasterSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetMasterSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getMasterSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getMasterSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getMasterSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getMasterSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getMasterSlides
     * Read presentation masterSlides info.
     */
    public function testGetMasterSlides()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getMasterSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetMasterSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getMasterSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "name", self::$okToFailValues);
        }
    }

    public function testGetMasterSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getMasterSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "password", self::$okToFailValues);
        }
    }

    public function testGetMasterSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getMasterSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "folder", self::$okToFailValues);
        }
    }

    public function testGetMasterSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getMasterSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getMasterSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getMasterSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getMasterSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getMasterSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getMasterSlides", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getMasterSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getMasterSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getMasterSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getMasterSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlide
     * Read notes slide info.
     */
    public function testGetNotesSlide()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideHeaderFooter
     * Get header/footer info for the notes slide.
     */
    public function testGetNotesSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideHeaderFooter", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideOnline
     * Read notes slide info.
     */
    public function testGetNotesSlideOnline()
    {
        $testdocument = TestUtils::getStreamValue("getNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("getNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("getNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("getNotesSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("getNotesSlideOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideParagraph
     * Read shape paragraph info.
     */
    public function testGetNotesSlideParagraph()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getNotesSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getNotesSlideParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideParagraphs
     * Read shape paragraphs info.
     */
    public function testGetNotesSlideParagraphs()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlideParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getNotesSlideParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlideParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlideParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideParagraphs", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlideParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideParagraphs", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideParagraphs", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlidePortion
     * Read paragraph portion info.
     */
    public function testGetNotesSlidePortion()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getNotesSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getNotesSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getNotesSlidePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlidePortions
     * Read paragraph portions info.
     */
    public function testGetNotesSlidePortions()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlidePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlidePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlidePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlidePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getNotesSlidePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getNotesSlidePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlidePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlidePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlidePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlidePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlidePortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlidePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getNotesSlidePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlidePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlidePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlidePortions", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlidePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlidePortions", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlidePortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlidePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlidePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlidePortions", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideShape
     * Read slide shape info.
     */
    public function testGetNotesSlideShape()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getNotesSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getNotesSlideShapes
     * Read slide shapes info.
     */
    public function testGetNotesSlideShapes()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getNotesSlideShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetNotesSlideShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getNotesSlideShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShapes", "name", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getNotesSlideShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getNotesSlideShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShapes", "password", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getNotesSlideShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShapes", "folder", self::$okToFailValues);
        }
    }

    public function testGetNotesSlideShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getNotesSlideShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getNotesSlideShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getNotesSlideShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getNotesSlideShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getNotesSlideShapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getNotesSlideShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getNotesSlideShapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getNotesSlideShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getNotesSlideShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getNotesSlideShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getNotesSlideShapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getParagraph
     * Read shape paragraph info.
     */
    public function testGetParagraph()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "name", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "password", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testGetParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getParagraphs
     * Read shape paragraphs info.
     */
    public function testGetParagraphs()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testGetParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getParagraphs", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getParagraphs", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getParagraphs", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getParagraphs($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getParagraphs", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPlaceholder
     * Read slide placeholder info.
     */
    public function testGetPlaceholder()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPlaceholder");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPlaceholderInvalidname()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPlaceholder", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "name", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPlaceholder", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidplaceholderIndex()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testplaceholderIndex = TestUtils::invalidizeValue("placeholderIndex", "getPlaceholder", $testplaceholderIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "placeholderIndex", $testplaceholderIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "placeholderIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "placeholderIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "placeholderIndex", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPlaceholder", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "password", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPlaceholder", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "folder", self::$okToFailValues);
        }
    }

    public function testGetPlaceholderInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPlaceholder", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholder", "slideIndex", self::$values, 'int');
        $testplaceholderIndex = TestUtils::getTestValue("getPlaceholder", "placeholderIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholder", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholder", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholder", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPlaceholder", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholder", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholder($testname, $testslideIndex, $testplaceholderIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholder", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholder", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholder", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPlaceholders
     * Read slide placeholders info.
     */
    public function testGetPlaceholders()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPlaceholders");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPlaceholdersInvalidname()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPlaceholders", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "name", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPlaceholders", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPlaceholders", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "password", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPlaceholders", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "folder", self::$okToFailValues);
        }
    }

    public function testGetPlaceholdersInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPlaceholders", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPlaceholders", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPlaceholders", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPlaceholders", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPlaceholders", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPlaceholders", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPlaceholders", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPlaceholders($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPlaceholders", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPlaceholders", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPlaceholders", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPortion
     * Read paragraph portion info.
     */
    public function testGetPortion()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPortionInvalidname()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "name", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getPortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getPortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getPortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "password", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "folder", self::$okToFailValues);
        }
    }

    public function testGetPortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getPortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPortions
     * Read paragraph portions info.
     */
    public function testGetPortions()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "name", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getPortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getPortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getPortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "password", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "folder", self::$okToFailValues);
        }
    }

    public function testGetPortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getPortions", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getPortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getPortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getPortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPortions", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPortions", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPortions($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPortions", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPresentation
     * Read presentation info.
     */
    public function testGetPresentation()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPresentation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "name", self::$okToFailValues);
        }
    }

    public function testGetPresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "password", self::$okToFailValues);
        }
    }

    public function testGetPresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "folder", self::$okToFailValues);
        }
    }

    public function testGetPresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPresentation", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentation($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPresentationImages
     * Read presentation images info.
     */
    public function testGetPresentationImages()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPresentationImages");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPresentationImagesInvalidname()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPresentationImages", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "name", self::$okToFailValues);
        }
    }

    public function testGetPresentationImagesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPresentationImages", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "password", self::$okToFailValues);
        }
    }

    public function testGetPresentationImagesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPresentationImages", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "folder", self::$okToFailValues);
        }
    }

    public function testGetPresentationImagesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPresentationImages", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getPresentationImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationImages", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPresentationImages", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationImages", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationImages($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationImages", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationImages", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationImages", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getPresentationTextItems
     * Extract presentation text items.
     */
    public function testGetPresentationTextItems()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getPresentationTextItems");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetPresentationTextItemsInvalidname()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getPresentationTextItems", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "name", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidwithEmpty()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testwithEmpty = TestUtils::invalidizeValue("withEmpty", "getPresentationTextItems", $testwithEmpty, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "withEmpty", $testwithEmpty);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "withEmpty", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "withEmpty", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "withEmpty", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getPresentationTextItems", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "password", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getPresentationTextItems", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "folder", self::$okToFailValues);
        }
    }

    public function testGetPresentationTextItemsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getPresentationTextItems", "name", self::$values, 'string');
        $testwithEmpty = TestUtils::getTestValue("getPresentationTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getPresentationTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getPresentationTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getPresentationTextItems", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getPresentationTextItems", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getPresentationTextItems", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getPresentationTextItems($testname, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getPresentationTextItems", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getPresentationTextItems", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getPresentationTextItems", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getProtectionProperties
     * Read presentation protection properties.
     */
    public function testGetProtectionProperties()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getProtectionProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetProtectionPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getProtectionProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetProtectionPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getProtectionProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetProtectionPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getProtectionProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetProtectionPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getProtectionProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getProtectionProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getProtectionProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getProtectionProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getProtectionProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getProtectionProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getProtectionProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getProtectionProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getProtectionProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getProtectionProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSections
     * Read presentation sections info.
     */
    public function testGetSections()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSections");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSectionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSections", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "name", self::$okToFailValues);
        }
    }

    public function testGetSectionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSections", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "password", self::$okToFailValues);
        }
    }

    public function testGetSectionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSections", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "folder", self::$okToFailValues);
        }
    }

    public function testGetSectionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSections", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSections", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSections", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSections", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSections($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSections", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSections", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSections", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getShape
     * Read slide shape info.
     */
    public function testGetShape()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "name", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "password", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "folder", self::$okToFailValues);
        }
    }

    public function testGetShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("getShape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShape($testname, $testslideIndex, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getShapes
     * Read slide shapes info.
     */
    public function testGetShapes()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getShapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetShapesInvalidname()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getShapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "name", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getShapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getShapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "password", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getShapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "folder", self::$okToFailValues);
        }
    }

    public function testGetShapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getShapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getShapes", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getShapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getShapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getShapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getShapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getShapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getShapes($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getShapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getShapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getShapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlide
     * Read presentation slide info.
     */
    public function testGetSlide()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlide", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlide($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideComments
     * Read presentation slide comments.
     */
    public function testGetSlideComments()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideComments");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideCommentsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideComments", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideComments", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideComments", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideComments", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideCommentsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideComments", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideComments", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideComments", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideComments", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideComments", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideComments", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideComments", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideComments($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideComments", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideComments", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideComments", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideHeaderFooter
     * Get footer info for the slide.
     */
    public function testGetSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideHeaderFooter", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideHeaderFooter($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideImages
     * Read slide images info.
     */
    public function testGetSlideImages()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideImages");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideImagesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideImages", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideImages", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideImages", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideImages", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideImagesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideImages", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideImages", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSlideImages", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideImages", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideImages", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideImages", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideImages", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideImages($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideImages", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideImages", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideImages", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideProperties
     * Read presentation slide properties.
     */
    public function testGetSlideProperties()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlidePropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetSlidePropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetSlidePropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlidePropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlideTextItems
     * Extract slide text items.
     */
    public function testGetSlideTextItems()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlideTextItems");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlideTextItemsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlideTextItems", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "name", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSlideTextItems", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidwithEmpty()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testwithEmpty = TestUtils::invalidizeValue("withEmpty", "getSlideTextItems", $testwithEmpty, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "withEmpty", $testwithEmpty);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "withEmpty", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "withEmpty", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "withEmpty", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlideTextItems", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "password", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlideTextItems", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlideTextItemsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlideTextItems", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSlideTextItems", "slideIndex", self::$values, 'int');
        $testwithEmpty = TestUtils::getTestValue("getSlideTextItems", "withEmpty", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("getSlideTextItems", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlideTextItems", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlideTextItems", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlideTextItems", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlideTextItems", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlideTextItems($testname, $testslideIndex, $testwithEmpty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlideTextItems", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlideTextItems", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlideTextItems", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSlides
     * Read presentation slides info.
     */
    public function testGetSlides()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "name", self::$okToFailValues);
        }
    }

    public function testGetSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "password", self::$okToFailValues);
        }
    }

    public function testGetSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "folder", self::$okToFailValues);
        }
    }

    public function testGetSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSlides", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSlides", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSlides($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSubshape
     * Read slide shape info (for smart art and group shapes).
     */
    public function testGetSubshape()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSubshape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSubshapeInvalidname()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSubshape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "name", self::$okToFailValues);
        }
    }

    public function testGetSubshapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSubshape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeInvalidpath()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getSubshape", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "path", self::$okToFailValues);
        }
    }

    public function testGetSubshapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSubshape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSubshape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "password", self::$okToFailValues);
        }
    }

    public function testGetSubshapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSubshape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "folder", self::$okToFailValues);
        }
    }

    public function testGetSubshapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshape", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSubshape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSubshapeParagraph
     * Read shape paragraph info (for smart art and group shapes).
     */
    public function testGetSubshapeParagraph()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSubshapeParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSubshapeParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSubshapeParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "name", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSubshapeParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidpath()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getSubshapeParagraph", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "path", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSubshapeParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSubshapeParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSubshapeParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "password", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSubshapeParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSubshapeParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSubshapeParagraphs
     * Read shape paragraphs info (for smart art and group shapes).
     */
    public function testGetSubshapeParagraphs()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSubshapeParagraphs");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSubshapeParagraphsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSubshapeParagraphs", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "name", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSubshapeParagraphs", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphsInvalidpath()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getSubshapeParagraphs", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "path", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSubshapeParagraphs", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSubshapeParagraphs", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "password", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSubshapeParagraphs", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "folder", self::$okToFailValues);
        }
    }

    public function testGetSubshapeParagraphsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSubshapeParagraphs", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapeParagraphs", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapeParagraphs", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapeParagraphs", "shapeIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapeParagraphs", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapeParagraphs", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapeParagraphs", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSubshapeParagraphs", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapeParagraphs", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapeParagraphs($testname, $testslideIndex, $testpath, $testshapeIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapeParagraphs", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapeParagraphs", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapeParagraphs", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSubshapePortion
     * Read paragraph portion info (for smart art and group shapes).
     */
    public function testGetSubshapePortion()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSubshapePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSubshapePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSubshapePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "name", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSubshapePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidpath()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getSubshapePortion", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "path", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSubshapePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSubshapePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "getSubshapePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSubshapePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "password", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSubshapePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "folder", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("getSubshapePortion", "portionIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSubshapePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSubshapePortions
     * Read paragraph portions info (for smart art and group shapes).
     */
    public function testGetSubshapePortions()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSubshapePortions");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSubshapePortionsInvalidname()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSubshapePortions", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "name", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSubshapePortions", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidpath()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getSubshapePortions", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "path", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "getSubshapePortions", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "getSubshapePortions", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSubshapePortions", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "password", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSubshapePortions", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "folder", self::$okToFailValues);
        }
    }

    public function testGetSubshapePortionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSubshapePortions", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapePortions", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapePortions", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("getSubshapePortions", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("getSubshapePortions", "paragraphIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getSubshapePortions", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapePortions", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapePortions", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSubshapePortions", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapePortions", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapePortions($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapePortions", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapePortions", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapePortions", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getSubshapes
     * Read slide shapes info.
     */
    public function testGetSubshapes()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getSubshapes");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetSubshapesInvalidname()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getSubshapes", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapes", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapes", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapes", "name", self::$okToFailValues);
        }
    }

    public function testGetSubshapesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getSubshapes", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapes", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapes", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapes", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetSubshapesInvalidpath()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "getSubshapes", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapes", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapes", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapes", "path", self::$okToFailValues);
        }
    }

    public function testGetSubshapesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getSubshapes", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapes", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapes", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapes", "password", self::$okToFailValues);
        }
    }

    public function testGetSubshapesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getSubshapes", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapes", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapes", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapes", "folder", self::$okToFailValues);
        }
    }

    public function testGetSubshapesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getSubshapes", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getSubshapes", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("getSubshapes", "path", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getSubshapes", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getSubshapes", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getSubshapes", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getSubshapes", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getSubshapes", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getSubshapes($testname, $testslideIndex, $testpath, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getSubshapes", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getSubshapes", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getSubshapes", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getTheme
     * Read slide theme info.
     */
    public function testGetTheme()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getTheme");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetThemeInvalidname()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getTheme", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "name", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "getTheme", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "slideIndex", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getTheme", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "password", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getTheme", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "folder", self::$okToFailValues);
        }
    }

    public function testGetThemeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getTheme", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("getTheme", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("getTheme", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getTheme", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getTheme", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getTheme", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getTheme", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getTheme($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getTheme", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getTheme", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getTheme", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for getViewProperties
     * Read presentation document properties.
     */
    public function testGetViewProperties()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "getViewProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testGetViewPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "getViewProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "name", self::$okToFailValues);
        }
    }

    public function testGetViewPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "getViewProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "password", self::$okToFailValues);
        }
    }

    public function testGetViewPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "getViewProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "folder", self::$okToFailValues);
        }
    }

    public function testGetViewPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("getViewProperties", "name", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("getViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("getViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("getViewProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "getViewProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("getViewProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->getViewProperties($testname, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "getViewProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "getViewProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("getViewProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for importFromHtml
     * Create presentation document from html.
     */
    public function testImportFromHtml()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "importFromHtml");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testImportFromHtmlInvalidname()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "importFromHtml", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "name", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidhtml()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testhtml = TestUtils::invalidizeValue("html", "importFromHtml", $testhtml, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "html", $testhtml);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "html", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "html", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "html", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidpassword()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "importFromHtml", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "password", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidfolder()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "importFromHtml", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "folder", self::$okToFailValues);
        }
    }

    public function testImportFromHtmlInvalidstorage()
    {
        $testname = TestUtils::getTestValue("importFromHtml", "name", self::$values, 'string');
        $testhtml = TestUtils::getTestValue("importFromHtml", "html", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("importFromHtml", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromHtml", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromHtml", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "importFromHtml", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromHtml", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromHtml($testname, $testhtml, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromHtml", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromHtml", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromHtml", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for importFromPdf
     * Create presentation document from pdf or append pdf to an existing presentation.
     */
    public function testImportFromPdf()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getStreamValue("importFromPdf", "pdf");
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "importFromPdf");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testImportFromPdfInvalidname()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getStreamValue("importFromPdf", "pdf");
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "importFromPdf", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "name", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidpdf()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getStreamValue("importFromPdf", "pdf");
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testpdf = null;
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "pdf", $testpdf);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "pdf", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "pdf", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "pdf", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidpassword()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getStreamValue("importFromPdf", "pdf");
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "importFromPdf", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "password", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidfolder()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getStreamValue("importFromPdf", "pdf");
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "importFromPdf", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "folder", self::$okToFailValues);
        }
    }

    public function testImportFromPdfInvalidstorage()
    {
        $testname = TestUtils::getTestValue("importFromPdf", "name", self::$values, 'string');
        $testpdf = TestUtils::getStreamValue("importFromPdf", "pdf");
        $testpassword = TestUtils::getTestValue("importFromPdf", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("importFromPdf", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("importFromPdf", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "importFromPdf", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("importFromPdf", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->importFromPdf($testname, $testpdf, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "importFromPdf", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "importFromPdf", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("importFromPdf", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for merge
     * Merge the presentation with other presentations specified in the request parameter.
     */
    public function testMerge()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "merge");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testMergeInvalidname()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "merge", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "name", self::$okToFailValues);
        }
    }

    public function testMergeInvalidrequest()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "merge", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "request", $testrequest);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "request", self::$okToFailValues);
        }
    }

    public function testMergeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "merge", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "password", self::$okToFailValues);
        }
    }

    public function testMergeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "merge", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "folder", self::$okToFailValues);
        }
    }

    public function testMergeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("merge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("merge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\PresentationsMergeRequest');
        $testpassword = TestUtils::getTestValue("merge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("merge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("merge", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "merge", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("merge", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->merge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "merge", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "merge", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("merge", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for mergeAndSaveOnline
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     */
    public function testMergeAndSaveOnline()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "mergeAndSaveOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testMergeAndSaveOnlineInvalidoutPath()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "mergeAndSaveOnline", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "outPath", self::$okToFailValues);
        }
    }

    public function testMergeAndSaveOnlineInvalidfiles()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $testfiles = TestUtils::invalidizeValue("files", "mergeAndSaveOnline", $testfiles, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "files", $testfiles);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "files", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "files", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "files", self::$okToFailValues);
        }
    }

    public function testMergeAndSaveOnlineInvalidrequest()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "mergeAndSaveOnline", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "request", $testrequest);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "request", self::$okToFailValues);
        }
    }

    public function testMergeAndSaveOnlineInvalidstorage()
    {
        $testoutPath = TestUtils::getTestValue("mergeAndSaveOnline", "outPath", self::$values, 'string');
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeAndSaveOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeAndSaveOnline", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "mergeAndSaveOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeAndSaveOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeAndSaveOnline($testoutPath, $testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeAndSaveOnline", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for mergeOnline
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response.
     */
    public function testMergeOnline()
    {
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "mergeOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testMergeOnlineInvalidfiles()
    {
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        $testfiles = TestUtils::invalidizeValue("files", "mergeOnline", $testfiles, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", "files", $testfiles);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeOnline", "files", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeOnline", "files", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeOnline", "files", self::$okToFailValues);
        }
    }

    public function testMergeOnlineInvalidrequest()
    {
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "mergeOnline", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", "request", $testrequest);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeOnline", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeOnline", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeOnline", "request", self::$okToFailValues);
        }
    }

    public function testMergeOnlineInvalidstorage()
    {
        $testfiles = TestUtils::getFilesValue();
        $testrequest = TestUtils::getTestValue("mergeOnline", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $teststorage = TestUtils::getTestValue("mergeOnline", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "mergeOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("mergeOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->mergeOnline($testfiles, $testrequest, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "mergeOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "mergeOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("mergeOnline", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveFile
     * Move file
     */
    public function testMoveFile()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveFile");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testMoveFileInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "moveFile", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "srcPath", $testsrcPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "srcPath", self::$okToFailValues);
        }
    }

    public function testMoveFileInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "moveFile", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "destPath", $testdestPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "destPath", self::$okToFailValues);
        }
    }

    public function testMoveFileInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "moveFile", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "srcStorageName", $testsrcStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testMoveFileInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "moveFile", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "destStorageName", $testdestStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "destStorageName", self::$okToFailValues);
        }
    }

    public function testMoveFileInvalidversionId()
    {
        $testsrcPath = TestUtils::getTestValue("moveFile", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFile", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFile", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFile", "destStorageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("moveFile", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "moveFile", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFile", "versionId", $testversionId);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFile($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFile", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFile", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFile", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveFolder
     * Move folder
     */
    public function testMoveFolder()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveFolder");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testMoveFolderInvalidsrcPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testsrcPath = TestUtils::invalidizeValue("srcPath", "moveFolder", $testsrcPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "srcPath", $testsrcPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "srcPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "srcPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "srcPath", self::$okToFailValues);
        }
    }

    public function testMoveFolderInvaliddestPath()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testdestPath = TestUtils::invalidizeValue("destPath", "moveFolder", $testdestPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "destPath", $testdestPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "destPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "destPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "destPath", self::$okToFailValues);
        }
    }

    public function testMoveFolderInvalidsrcStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testsrcStorageName = TestUtils::invalidizeValue("srcStorageName", "moveFolder", $testsrcStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "srcStorageName", $testsrcStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "srcStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "srcStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "srcStorageName", self::$okToFailValues);
        }
    }

    public function testMoveFolderInvaliddestStorageName()
    {
        $testsrcPath = TestUtils::getTestValue("moveFolder", "srcPath", self::$values, 'string');
        $testdestPath = TestUtils::getTestValue("moveFolder", "destPath", self::$values, 'string');
        $testsrcStorageName = TestUtils::getTestValue("moveFolder", "srcStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::getTestValue("moveFolder", "destStorageName", self::$values, 'string');
        $testdestStorageName = TestUtils::invalidizeValue("destStorageName", "moveFolder", $testdestStorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveFolder", "destStorageName", $testdestStorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveFolder($testsrcPath, $testdestPath, $testsrcStorageName, $testdestStorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveFolder", "destStorageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveFolder", "destStorageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveFolder", "destStorageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveSection
     * Move presentation section to a specified position.
     */
    public function testMoveSection()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testMoveSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "moveSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "name", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidsectionIndex()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testsectionIndex = TestUtils::invalidizeValue("sectionIndex", "moveSection", $testsectionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "sectionIndex", $testsectionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "sectionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "sectionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "sectionIndex", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidnewPosition()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testnewPosition = TestUtils::invalidizeValue("newPosition", "moveSection", $testnewPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "newPosition", $testnewPosition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "newPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "newPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "newPosition", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "moveSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "password", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "moveSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "folder", self::$okToFailValues);
        }
    }

    public function testMoveSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("moveSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("moveSection", "sectionIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSection", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "moveSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSection", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSection($testname, $testsectionIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for moveSlide
     * Reorder presentation slide position.
     */
    public function testMoveSlide()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "moveSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testMoveSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "moveSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "name", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "moveSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidnewPosition()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testnewPosition = TestUtils::invalidizeValue("newPosition", "moveSlide", $testnewPosition, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "newPosition", $testnewPosition);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "newPosition", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "newPosition", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "newPosition", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "moveSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "password", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "moveSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "folder", self::$okToFailValues);
        }
    }

    public function testMoveSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("moveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("moveSlide", "slideIndex", self::$values, 'int');
        $testnewPosition = TestUtils::getTestValue("moveSlide", "newPosition", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("moveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("moveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("moveSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "moveSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("moveSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->moveSlide($testname, $testslideIndex, $testnewPosition, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "moveSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "moveSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("moveSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for notesSlideExists
     * Get info whether a notes slide exists.
     */
    public function testNotesSlideExists()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "notesSlideExists");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testNotesSlideExistsInvalidname()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "notesSlideExists", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "name", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "notesSlideExists", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "slideIndex", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "notesSlideExists", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "password", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "notesSlideExists", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "folder", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("notesSlideExists", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("notesSlideExists", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExists", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("notesSlideExists", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("notesSlideExists", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "notesSlideExists", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExists", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExists($testname, $testslideIndex, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExists", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExists", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExists", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for notesSlideExistsOnline
     * Get info whether a notes slide exists.
     */
    public function testNotesSlideExistsOnline()
    {
        $testdocument = TestUtils::getStreamValue("notesSlideExistsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "notesSlideExistsOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testNotesSlideExistsOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("notesSlideExistsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExistsOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExistsOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExistsOnline", "document", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("notesSlideExistsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "notesSlideExistsOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExistsOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExistsOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExistsOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testNotesSlideExistsOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("notesSlideExistsOnline", "document");
        $testslideIndex = TestUtils::getTestValue("notesSlideExistsOnline", "slideIndex", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("notesSlideExistsOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "notesSlideExistsOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("notesSlideExistsOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->notesSlideExistsOnline($testdocument, $testslideIndex, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "notesSlideExistsOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "notesSlideExistsOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("notesSlideExistsOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for objectExists
     * Check if file or folder exists
     */
    public function testObjectExists()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "objectExists");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testObjectExistsInvalidpath()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "objectExists", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "objectExists", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "objectExists", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("objectExists", "path", self::$okToFailValues);
        }
    }

    public function testObjectExistsInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "objectExists", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "objectExists", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "objectExists", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("objectExists", "storageName", self::$okToFailValues);
        }
    }

    public function testObjectExistsInvalidversionId()
    {
        $testpath = TestUtils::getTestValue("objectExists", "path", self::$values, 'string');
        $teststorageName = TestUtils::getTestValue("objectExists", "storageName", self::$values, 'string');
        $testversionId = TestUtils::getTestValue("objectExists", "versionId", self::$values, 'string');
        $testversionId = TestUtils::invalidizeValue("versionId", "objectExists", $testversionId, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("objectExists", "versionId", $testversionId);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->objectExists($testpath, $teststorageName, $testversionId);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "objectExists", "versionId", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "objectExists", "versionId", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("objectExists", "versionId", self::$okToFailValues);
        }
    }

    /**
     * Test case for orderedMerge
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     */
    public function testOrderedMerge()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "orderedMerge");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testOrderedMergeInvalidname()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "orderedMerge", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "name", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidrequest()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testrequest = TestUtils::invalidizeValue("request", "orderedMerge", $testrequest, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "request", $testrequest);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "request", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "request", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "request", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "orderedMerge", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "password", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "orderedMerge", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "folder", self::$okToFailValues);
        }
    }

    public function testOrderedMergeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("orderedMerge", "name", self::$values, 'string');
        $testrequest = TestUtils::getTestValue("orderedMerge", "request", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\OrderedMergeRequest');
        $testpassword = TestUtils::getTestValue("orderedMerge", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("orderedMerge", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("orderedMerge", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "orderedMerge", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("orderedMerge", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->orderedMerge($testname, $testrequest, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "orderedMerge", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "orderedMerge", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("orderedMerge", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for pipeline
     * Performs slides pipeline.
     */
    public function testPipeline()
    {
        $testpipeline = TestUtils::getTestValue("pipeline", "pipeline", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $testfiles = TestUtils::getFilesValue();
        list($expectedCode, $expectedMessage) = $this->initialize("pipeline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->pipeline($testpipeline, $testfiles);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "pipeline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testPipelineInvalidpipeline()
    {
        $testpipeline = TestUtils::getTestValue("pipeline", "pipeline", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $testfiles = TestUtils::getFilesValue();
        $testpipeline = TestUtils::invalidizeValue("pipeline", "pipeline", $testpipeline, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        list($expectedCode, $expectedMessage) = $this->initialize("pipeline", "pipeline", $testpipeline);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->pipeline($testpipeline, $testfiles);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "pipeline", "pipeline", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "pipeline", "pipeline", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("pipeline", "pipeline", self::$okToFailValues);
        }
    }

    public function testPipelineInvalidfiles()
    {
        $testpipeline = TestUtils::getTestValue("pipeline", "pipeline", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Pipeline');
        $testfiles = TestUtils::getFilesValue();
        $testfiles = TestUtils::invalidizeValue("files", "pipeline", $testfiles, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("pipeline", "files", $testfiles);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->pipeline($testpipeline, $testfiles);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "pipeline", "files", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "pipeline", "files", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("pipeline", "files", self::$okToFailValues);
        }
    }

    /**
     * Test case for reorderSlides
     * Reorder presentation slides positions.
     */
    public function testReorderSlides()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "reorderSlides");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReorderSlidesInvalidname()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "reorderSlides", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "name", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidoldPositions()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testoldPositions = TestUtils::invalidizeValue("oldPositions", "reorderSlides", $testoldPositions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "oldPositions", $testoldPositions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "oldPositions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "oldPositions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "oldPositions", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidnewPositions()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testnewPositions = TestUtils::invalidizeValue("newPositions", "reorderSlides", $testnewPositions, self::$values, 'array');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "newPositions", $testnewPositions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "newPositions", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "newPositions", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "newPositions", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "reorderSlides", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "password", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "reorderSlides", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "folder", self::$okToFailValues);
        }
    }

    public function testReorderSlidesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("reorderSlides", "name", self::$values, 'string');
        $testoldPositions = TestUtils::getTestValue("reorderSlides", "oldPositions", self::$values, 'array');
        $testnewPositions = TestUtils::getTestValue("reorderSlides", "newPositions", self::$values, 'array');
        $testpassword = TestUtils::getTestValue("reorderSlides", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("reorderSlides", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("reorderSlides", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "reorderSlides", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("reorderSlides", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->reorderSlides($testname, $testoldPositions, $testnewPositions, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "reorderSlides", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "reorderSlides", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("reorderSlides", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for replacePresentationText
     * Replace text with a new value.
     */
    public function testReplacePresentationText()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replacePresentationText");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReplacePresentationTextInvalidname()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "replacePresentationText", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "name", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidoldValue()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replacePresentationText", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "oldValue", $testoldValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidnewValue()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replacePresentationText", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "newValue", $testnewValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "newValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidignoreCase()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replacePresentationText", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "ignoreCase", $testignoreCase);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidpassword()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replacePresentationText", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "password", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidfolder()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "replacePresentationText", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "folder", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextInvalidstorage()
    {
        $testname = TestUtils::getTestValue("replacePresentationText", "name", self::$values, 'string');
        $testoldValue = TestUtils::getTestValue("replacePresentationText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replacePresentationText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replacePresentationText", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "replacePresentationText", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationText", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationText($testname, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationText", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationText", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationText", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for replacePresentationTextOnline
     * Replace text with a new value.
     */
    public function testReplacePresentationTextOnline()
    {
        $testdocument = TestUtils::getStreamValue("replacePresentationTextOnline", "document");
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replacePresentationTextOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testReplacePresentationTextOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("replacePresentationTextOnline", "document");
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "document", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidoldValue()
    {
        $testdocument = TestUtils::getStreamValue("replacePresentationTextOnline", "document");
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replacePresentationTextOnline", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "oldValue", $testoldValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidnewValue()
    {
        $testdocument = TestUtils::getStreamValue("replacePresentationTextOnline", "document");
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replacePresentationTextOnline", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "newValue", $testnewValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "newValue", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidignoreCase()
    {
        $testdocument = TestUtils::getStreamValue("replacePresentationTextOnline", "document");
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replacePresentationTextOnline", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "ignoreCase", $testignoreCase);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplacePresentationTextOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("replacePresentationTextOnline", "document");
        $testoldValue = TestUtils::getTestValue("replacePresentationTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replacePresentationTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replacePresentationTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replacePresentationTextOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replacePresentationTextOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replacePresentationTextOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replacePresentationTextOnline($testdocument, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replacePresentationTextOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replacePresentationTextOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replacePresentationTextOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for replaceSlideText
     * Replace text with a new value.
     */
    public function testReplaceSlideText()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replaceSlideText");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testReplaceSlideTextInvalidname()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "replaceSlideText", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "name", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "replaceSlideText", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "slideIndex", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidoldValue()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replaceSlideText", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "oldValue", $testoldValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidnewValue()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replaceSlideText", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "newValue", $testnewValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "newValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidignoreCase()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replaceSlideText", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "ignoreCase", $testignoreCase);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidpassword()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replaceSlideText", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "password", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidfolder()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "replaceSlideText", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "folder", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextInvalidstorage()
    {
        $testname = TestUtils::getTestValue("replaceSlideText", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("replaceSlideText", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideText", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideText", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideText", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideText", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("replaceSlideText", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("replaceSlideText", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "replaceSlideText", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideText", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideText($testname, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideText", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideText", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideText", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for replaceSlideTextOnline
     * Replace slide text with a new value.
     */
    public function testReplaceSlideTextOnline()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "replaceSlideTextOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testReplaceSlideTextOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "document", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "replaceSlideTextOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidoldValue()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testoldValue = TestUtils::invalidizeValue("oldValue", "replaceSlideTextOnline", $testoldValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "oldValue", $testoldValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "oldValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "oldValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "oldValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidnewValue()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testnewValue = TestUtils::invalidizeValue("newValue", "replaceSlideTextOnline", $testnewValue, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "newValue", $testnewValue);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "newValue", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "newValue", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "newValue", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidignoreCase()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testignoreCase = TestUtils::invalidizeValue("ignoreCase", "replaceSlideTextOnline", $testignoreCase, self::$values, 'bool');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "ignoreCase", $testignoreCase);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "ignoreCase", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "ignoreCase", self::$okToFailValues);
        }
    }

    public function testReplaceSlideTextOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("replaceSlideTextOnline", "document");
        $testslideIndex = TestUtils::getTestValue("replaceSlideTextOnline", "slideIndex", self::$values, 'int');
        $testoldValue = TestUtils::getTestValue("replaceSlideTextOnline", "oldValue", self::$values, 'string');
        $testnewValue = TestUtils::getTestValue("replaceSlideTextOnline", "newValue", self::$values, 'string');
        $testignoreCase = TestUtils::getTestValue("replaceSlideTextOnline", "ignoreCase", self::$values, 'bool');
        $testpassword = TestUtils::getTestValue("replaceSlideTextOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "replaceSlideTextOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("replaceSlideTextOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->replaceSlideTextOnline($testdocument, $testslideIndex, $testoldValue, $testnewValue, $testignoreCase, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "replaceSlideTextOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "replaceSlideTextOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("replaceSlideTextOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveNotesSlideShape
     * Render shape to specified picture format.
     */
    public function testSaveNotesSlideShape()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveNotesSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveNotesSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveNotesSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveNotesSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveNotesSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveNotesSlideShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "format", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveNotesSlideShape", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveNotesSlideShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "options", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveNotesSlideShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveNotesSlideShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveNotesSlideShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveNotesSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveNotesSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveNotesSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "storage", self::$okToFailValues);
        }
    }

    public function testSaveNotesSlideShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveNotesSlideShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveNotesSlideShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveNotesSlideShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveNotesSlideShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveNotesSlideShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveNotesSlideShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveNotesSlideShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveNotesSlideShape", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveNotesSlideShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveNotesSlideShape", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveNotesSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveNotesSlideShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveNotesSlideShape", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for savePresentation
     * Save a presentation to a specified format.
     */
    public function testSavePresentation()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "savePresentation");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSavePresentationInvalidname()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "savePresentation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "name", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidformat()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "savePresentation", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "format", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "savePresentation", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "outPath", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidoptions()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "savePresentation", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "options", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "savePresentation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "password", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "savePresentation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "folder", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "savePresentation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "storage", self::$okToFailValues);
        }
    }

    public function testSavePresentationInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("savePresentation", "name", self::$values, 'string');
        $testformat = TestUtils::getTestValue("savePresentation", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("savePresentation", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("savePresentation", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testpassword = TestUtils::getTestValue("savePresentation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("savePresentation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("savePresentation", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("savePresentation", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "savePresentation", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("savePresentation", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->savePresentation($testname, $testformat, $testoutPath, $testoptions, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "savePresentation", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "savePresentation", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("savePresentation", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveShape
     * Render shape to specified picture format.
     */
    public function testSaveShape()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveShape");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "name", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveShape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "format", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveShape", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveShape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "options", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveShape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveShape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveShape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "password", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "folder", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "storage", self::$okToFailValues);
        }
    }

    public function testSaveShapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveShape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveShape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShape", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveShape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShape", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShape($testname, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShape", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveShapeOnline
     * Render shape to specified picture format.
     */
    public function testSaveShapeOnline()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveShapeOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveShapeOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "document", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveShapeOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidshapeIndex()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveShapeOnline", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveShapeOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "format", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidoutPath()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveShapeOnline", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidscaleX()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveShapeOnline", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidscaleY()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveShapeOnline", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidbounds()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveShapeOnline", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveShapeOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "password", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveShapeOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSaveShapeOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("saveShapeOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveShapeOnline", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("saveShapeOnline", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveShapeOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveShapeOnline", "outPath", self::$values, 'string');
        $testscaleX = TestUtils::getTestValue("saveShapeOnline", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveShapeOnline", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveShapeOnline", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveShapeOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveShapeOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveShapeOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveShapeOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveShapeOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveShapeOnline($testdocument, $testslideIndex, $testshapeIndex, $testformat, $testoutPath, $testscaleX, $testscaleY, $testbounds, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveShapeOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveShapeOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveSlide
     * Save a slide to a specified format.
     */
    public function testSaveSlide()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "name", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveSlide", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "format", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveSlide", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveSlide", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "options", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidwidth()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "saveSlide", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "width", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidheight()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "saveSlide", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "height", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "password", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "folder", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "storage", self::$okToFailValues);
        }
    }

    public function testSaveSlideInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSlide", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlide", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlide", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSlide", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testwidth = TestUtils::getTestValue("saveSlide", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlide", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlide", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlide", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveSlide", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlide", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlide($testname, $testslideIndex, $testformat, $testoutPath, $testoptions, $testwidth, $testheight, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlide", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlide", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlide", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveSlideOnline
     * Save a slide to a specified format.
     */
    public function testSaveSlideOnline()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveSlideOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveSlideOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "document", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidslideIndex()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveSlideOnline", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveSlideOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "format", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidoutPath()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveSlideOnline", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "saveSlideOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "width", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidheight()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "saveSlideOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "height", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveSlideOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "password", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveSlideOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSaveSlideOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("saveSlideOnline", "document");
        $testslideIndex = TestUtils::getTestValue("saveSlideOnline", "slideIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSlideOnline", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSlideOnline", "outPath", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("saveSlideOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("saveSlideOnline", "height", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("saveSlideOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSlideOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSlideOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveSlideOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSlideOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSlideOnline($testdocument, $testslideIndex, $testformat, $testoutPath, $testwidth, $testheight, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSlideOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSlideOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for saveSubshape
     * Render shape to specified picture format.
     */
    public function testSaveSubshape()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "saveSubshape");
        }
        if ($needAssertResponse) {
            Assert::assertNull($result);
        }
    }

    public function testSaveSubshapeInvalidname()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "saveSubshape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "name", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "saveSubshape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidpath()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "saveSubshape", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "path", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "saveSubshape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidformat()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "saveSubshape", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "format", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidoutPath()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testoutPath = TestUtils::invalidizeValue("outPath", "saveSubshape", $testoutPath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "outPath", $testoutPath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "outPath", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "outPath", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "outPath", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidoptions()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "saveSubshape", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "options", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidscaleX()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testscaleX = TestUtils::invalidizeValue("scaleX", "saveSubshape", $testscaleX, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "scaleX", $testscaleX);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "scaleX", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "scaleX", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "scaleX", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidscaleY()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testscaleY = TestUtils::invalidizeValue("scaleY", "saveSubshape", $testscaleY, self::$values, 'float');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "scaleY", $testscaleY);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "scaleY", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "scaleY", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "scaleY", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidbounds()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testbounds = TestUtils::invalidizeValue("bounds", "saveSubshape", $testbounds, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "bounds", $testbounds);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "bounds", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "bounds", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "bounds", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "saveSubshape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "password", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "saveSubshape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "folder", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "saveSubshape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "storage", self::$okToFailValues);
        }
    }

    public function testSaveSubshapeInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("saveSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("saveSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("saveSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("saveSubshape", "shapeIndex", self::$values, 'int');
        $testformat = TestUtils::getTestValue("saveSubshape", "format", self::$values, 'string');
        $testoutPath = TestUtils::getTestValue("saveSubshape", "outPath", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("saveSubshape", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\IShapeExportOptions');
        $testscaleX = TestUtils::getTestValue("saveSubshape", "scaleX", self::$values, 'float');
        $testscaleY = TestUtils::getTestValue("saveSubshape", "scaleY", self::$values, 'float');
        $testbounds = TestUtils::getTestValue("saveSubshape", "bounds", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("saveSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("saveSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("saveSubshape", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("saveSubshape", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "saveSubshape", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("saveSubshape", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->saveSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testformat, $testoutPath, $testoptions, $testscaleX, $testscaleY, $testbounds, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "saveSubshape", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "saveSubshape", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("saveSubshape", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for setAnimation
     * Set slide animation.
     */
    public function testSetAnimation()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setAnimation");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetAnimationInvalidname()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setAnimation", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "name", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setAnimation", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidanimation()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testanimation = TestUtils::invalidizeValue("animation", "setAnimation", $testanimation, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "animation", $testanimation);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "animation", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "animation", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "animation", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setAnimation", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "password", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setAnimation", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "folder", self::$okToFailValues);
        }
    }

    public function testSetAnimationInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setAnimation", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setAnimation", "slideIndex", self::$values, 'int');
        $testanimation = TestUtils::getTestValue("setAnimation", "animation", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideAnimation');
        $testpassword = TestUtils::getTestValue("setAnimation", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setAnimation", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setAnimation", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setAnimation", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setAnimation", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setAnimation($testname, $testslideIndex, $testanimation, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setAnimation", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setAnimation", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setAnimation", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setBackground
     * Set background for a slide.
     */
    public function testSetBackground()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setBackground");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetBackgroundInvalidname()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setBackground", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "name", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setBackground", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidbackground()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testbackground = TestUtils::invalidizeValue("background", "setBackground", $testbackground, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "background", $testbackground);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "background", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "background", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "background", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setBackground", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "password", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setBackground", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "folder", self::$okToFailValues);
        }
    }

    public function testSetBackgroundInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setBackground", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackground", "slideIndex", self::$values, 'int');
        $testbackground = TestUtils::getTestValue("setBackground", "background", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideBackground');
        $testpassword = TestUtils::getTestValue("setBackground", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackground", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackground", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setBackground", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackground", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackground($testname, $testslideIndex, $testbackground, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackground", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackground", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackground", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setBackgroundColor
     * Set background color for a slide.
     */
    public function testSetBackgroundColor()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setBackgroundColor");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetBackgroundColorInvalidname()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setBackgroundColor", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "name", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setBackgroundColor", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidcolor()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testcolor = TestUtils::invalidizeValue("color", "setBackgroundColor", $testcolor, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "color", $testcolor);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "color", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "color", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "color", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setBackgroundColor", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "password", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setBackgroundColor", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "folder", self::$okToFailValues);
        }
    }

    public function testSetBackgroundColorInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setBackgroundColor", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setBackgroundColor", "slideIndex", self::$values, 'int');
        $testcolor = TestUtils::getTestValue("setBackgroundColor", "color", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("setBackgroundColor", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setBackgroundColor", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setBackgroundColor", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setBackgroundColor", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setBackgroundColor", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setBackgroundColor($testname, $testslideIndex, $testcolor, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setBackgroundColor", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setBackgroundColor", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setBackgroundColor", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setDocumentProperties
     * Set document properties.
     */
    public function testSetDocumentProperties()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setDocumentProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetDocumentPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setDocumentProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidproperties()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testproperties = TestUtils::invalidizeValue("properties", "setDocumentProperties", $testproperties, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "properties", $testproperties);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "properties", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "properties", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "properties", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setDocumentProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setDocumentProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setDocumentProperties", "name", self::$values, 'string');
        $testproperties = TestUtils::getTestValue("setDocumentProperties", "properties", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperties');
        $testpassword = TestUtils::getTestValue("setDocumentProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setDocumentProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperties($testname, $testproperties, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setDocumentProperty
     * Set document property.
     */
    public function testSetDocumentProperty()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setDocumentProperty");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetDocumentPropertyInvalidname()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setDocumentProperty", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "name", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidpropertyName()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testpropertyName = TestUtils::invalidizeValue("propertyName", "setDocumentProperty", $testpropertyName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "propertyName", $testpropertyName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "propertyName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "propertyName", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidproperty()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testproperty = TestUtils::invalidizeValue("property", "setDocumentProperty", $testproperty, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "property", $testproperty);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "property", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "property", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "property", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setDocumentProperty", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "password", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setDocumentProperty", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "folder", self::$okToFailValues);
        }
    }

    public function testSetDocumentPropertyInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setDocumentProperty", "name", self::$values, 'string');
        $testpropertyName = TestUtils::getTestValue("setDocumentProperty", "propertyName", self::$values, 'string');
        $testproperty = TestUtils::getTestValue("setDocumentProperty", "property", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DocumentProperty');
        $testpassword = TestUtils::getTestValue("setDocumentProperty", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setDocumentProperty", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setDocumentProperty", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setDocumentProperty", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setDocumentProperty", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setDocumentProperty($testname, $testpropertyName, $testproperty, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setDocumentProperty", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setDocumentProperty", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setDocumentProperty", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setNotesSlideHeaderFooter
     * Set header/footer the notes slide.
     */
    public function testSetNotesSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setNotesSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setNotesSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setNotesSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvaliddto()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setNotesSlideHeaderFooter", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "dto", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setNotesSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setNotesSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testSetNotesSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setNotesSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setNotesSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setNotesSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlideHeaderFooter');
        $testpassword = TestUtils::getTestValue("setNotesSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setNotesSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setNotesSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setNotesSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setNotesSlideHeaderFooter", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setNotesSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setNotesSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setNotesSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setPresentationHeaderFooter
     * Set footers for all slides in a presentation.
     */
    public function testSetPresentationHeaderFooter()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setPresentationHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetPresentationHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setPresentationHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvaliddto()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setPresentationHeaderFooter", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "dto", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setPresentationHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setPresentationHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testSetPresentationHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setPresentationHeaderFooter", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setPresentationHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setPresentationHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setPresentationHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setPresentationHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setPresentationHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setPresentationHeaderFooter", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setPresentationHeaderFooter($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setPresentationHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setPresentationHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setPresentationHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setProtection
     * Updates presentation protection properties.
     */
    public function testSetProtection()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setProtection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetProtectionInvalidname()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setProtection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "name", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvaliddto()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setProtection", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "dto", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setProtection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "password", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setProtection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "folder", self::$okToFailValues);
        }
    }

    public function testSetProtectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setProtection", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setProtection", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setProtection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setProtection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setProtection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtection", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtection($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setProtectionOnline
     * Sets presentation protection options.
     */
    public function testSetProtectionOnline()
    {
        $testdocument = TestUtils::getStreamValue("setProtectionOnline", "document");
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setProtectionOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testSetProtectionOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("setProtectionOnline", "document");
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtectionOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtectionOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtectionOnline", "document", self::$okToFailValues);
        }
    }

    public function testSetProtectionOnlineInvaliddto()
    {
        $testdocument = TestUtils::getStreamValue("setProtectionOnline", "document");
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setProtectionOnline", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtectionOnline", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtectionOnline", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtectionOnline", "dto", self::$okToFailValues);
        }
    }

    public function testSetProtectionOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("setProtectionOnline", "document");
        $testdto = TestUtils::getTestValue("setProtectionOnline", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ProtectionProperties');
        $testpassword = TestUtils::getTestValue("setProtectionOnline", "password", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setProtectionOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setProtectionOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setProtectionOnline($testdocument, $testdto, $testpassword);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setProtectionOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setProtectionOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setProtectionOnline", "password", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSections
     * Replace existing presentation sections with the ones provided in the sections DTO.
     */
    public function testSetSections()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSections");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSectionsInvalidname()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSections", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "name", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidsections()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testsections = TestUtils::invalidizeValue("sections", "setSections", $testsections, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "sections", $testsections);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "sections", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "sections", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "sections", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSections", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "password", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSections", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "folder", self::$okToFailValues);
        }
    }

    public function testSetSectionsInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSections", "name", self::$values, 'string');
        $testsections = TestUtils::getTestValue("setSections", "sections", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Sections');
        $testpassword = TestUtils::getTestValue("setSections", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSections", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSections", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSections", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSections", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSections($testname, $testsections, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSections", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSections", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSections", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSlideHeaderFooter
     * Set footer the slide.
     */
    public function testSetSlideHeaderFooter()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSlideHeaderFooter");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSlideHeaderFooterInvalidname()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSlideHeaderFooter", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "name", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "setSlideHeaderFooter", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "slideIndex", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvaliddto()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setSlideHeaderFooter", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "dto", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSlideHeaderFooter", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "password", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSlideHeaderFooter", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "folder", self::$okToFailValues);
        }
    }

    public function testSetSlideHeaderFooterInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSlideHeaderFooter", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("setSlideHeaderFooter", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("setSlideHeaderFooter", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\HeaderFooter');
        $testpassword = TestUtils::getTestValue("setSlideHeaderFooter", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideHeaderFooter", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideHeaderFooter", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSlideHeaderFooter", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideHeaderFooter", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideHeaderFooter($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideHeaderFooter", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideHeaderFooter", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setSlideProperties
     * Update presentation slide properties.
     */
    public function testSetSlideProperties()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setSlideProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetSlidePropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setSlideProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvaliddto()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setSlideProperties", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "dto", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setSlideProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setSlideProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetSlidePropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setSlideProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setSlideProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\SlideProperties');
        $testpassword = TestUtils::getTestValue("setSlideProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setSlideProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setSlideProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setSlideProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setSlideProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setSlideProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setSlideProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setSlideProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setSlideProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for setViewProperties
     * Update presentation document properties.
     */
    public function testSetViewProperties()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "setViewProperties");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSetViewPropertiesInvalidname()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "setViewProperties", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "name", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvaliddto()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "setViewProperties", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "dto", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "setViewProperties", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "password", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "setViewProperties", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "folder", self::$okToFailValues);
        }
    }

    public function testSetViewPropertiesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("setViewProperties", "name", self::$values, 'string');
        $testdto = TestUtils::getTestValue("setViewProperties", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ViewProperties');
        $testpassword = TestUtils::getTestValue("setViewProperties", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("setViewProperties", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("setViewProperties", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "setViewProperties", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("setViewProperties", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->setViewProperties($testname, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "setViewProperties", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "setViewProperties", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("setViewProperties", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for split
     * Splitting presentations. Create one image per slide.
     */
    public function testSplit()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "split");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSplitInvalidname()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "split", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "name", self::$okToFailValues);
        }
    }

    public function testSplitInvalidoptions()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testoptions = TestUtils::invalidizeValue("options", "split", $testoptions, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "options", $testoptions);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "options", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "options", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "options", self::$okToFailValues);
        }
    }

    public function testSplitInvalidformat()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "split", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "format", self::$okToFailValues);
        }
    }

    public function testSplitInvalidwidth()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "split", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "width", self::$okToFailValues);
        }
    }

    public function testSplitInvalidheight()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "split", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "height", self::$okToFailValues);
        }
    }

    public function testSplitInvalidfrom()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testfrom = TestUtils::invalidizeValue("from", "split", $testfrom, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "from", $testfrom);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "from", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "from", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "from", self::$okToFailValues);
        }
    }

    public function testSplitInvalidto()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testto = TestUtils::invalidizeValue("to", "split", $testto, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "to", $testto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "to", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "to", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "to", self::$okToFailValues);
        }
    }

    public function testSplitInvaliddestFolder()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testdestFolder = TestUtils::invalidizeValue("destFolder", "split", $testdestFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "destFolder", $testdestFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "destFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "destFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "destFolder", self::$okToFailValues);
        }
    }

    public function testSplitInvalidpassword()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "split", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "password", self::$okToFailValues);
        }
    }

    public function testSplitInvalidfolder()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "split", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "folder", self::$okToFailValues);
        }
    }

    public function testSplitInvalidstorage()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "split", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "storage", self::$okToFailValues);
        }
    }

    public function testSplitInvalidfontsFolder()
    {
        $testname = TestUtils::getTestValue("split", "name", self::$values, 'string');
        $testoptions = TestUtils::getTestValue("split", "options", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ExportOptions');
        $testformat = TestUtils::getTestValue("split", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("split", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("split", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("split", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("split", "to", self::$values, 'int');
        $testdestFolder = TestUtils::getTestValue("split", "destFolder", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("split", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("split", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("split", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("split", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "split", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("split", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->split($testname, $testoptions, $testformat, $testwidth, $testheight, $testfrom, $testto, $testdestFolder, $testpassword, $testfolder, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "split", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "split", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("split", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for splitAndSaveOnline
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.
     */
    public function testSplitAndSaveOnline()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "splitAndSaveOnline");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testSplitAndSaveOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "document", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "splitAndSaveOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "format", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvaliddestFolder()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testdestFolder = TestUtils::invalidizeValue("destFolder", "splitAndSaveOnline", $testdestFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "destFolder", $testdestFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "destFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "destFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "destFolder", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "splitAndSaveOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "width", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidheight()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "splitAndSaveOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "height", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidfrom()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testfrom = TestUtils::invalidizeValue("from", "splitAndSaveOnline", $testfrom, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "from", $testfrom);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "from", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "from", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "from", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidto()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testto = TestUtils::invalidizeValue("to", "splitAndSaveOnline", $testto, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "to", $testto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "to", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "to", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "to", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "splitAndSaveOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "password", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "splitAndSaveOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSplitAndSaveOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("splitAndSaveOnline", "document");
        $testformat = TestUtils::getTestValue("splitAndSaveOnline", "format", self::$values, 'string');
        $testdestFolder = TestUtils::getTestValue("splitAndSaveOnline", "destFolder", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitAndSaveOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitAndSaveOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitAndSaveOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitAndSaveOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitAndSaveOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitAndSaveOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitAndSaveOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "splitAndSaveOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitAndSaveOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitAndSaveOnline($testdocument, $testformat, $testdestFolder, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitAndSaveOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitAndSaveOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitAndSaveOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for splitOnline
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.
     */
    public function testSplitOnline()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "splitOnline");
        }
        if ($needAssertResponse) {
            Assert::assertTrue($result->isFile());
        }
    }

    public function testSplitOnlineInvaliddocument()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testdocument = null;
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "document", $testdocument);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "document", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "document", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "document", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidformat()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testformat = TestUtils::invalidizeValue("format", "splitOnline", $testformat, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "format", $testformat);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "format", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "format", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "format", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidwidth()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testwidth = TestUtils::invalidizeValue("width", "splitOnline", $testwidth, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "width", $testwidth);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "width", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "width", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "width", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidheight()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testheight = TestUtils::invalidizeValue("height", "splitOnline", $testheight, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "height", $testheight);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "height", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "height", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "height", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidfrom()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testfrom = TestUtils::invalidizeValue("from", "splitOnline", $testfrom, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "from", $testfrom);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "from", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "from", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "from", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidto()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testto = TestUtils::invalidizeValue("to", "splitOnline", $testto, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "to", $testto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "to", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "to", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "to", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidpassword()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "splitOnline", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "password", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidstorage()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "splitOnline", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "storage", self::$okToFailValues);
        }
    }

    public function testSplitOnlineInvalidfontsFolder()
    {
        $testdocument = TestUtils::getStreamValue("splitOnline", "document");
        $testformat = TestUtils::getTestValue("splitOnline", "format", self::$values, 'string');
        $testwidth = TestUtils::getTestValue("splitOnline", "width", self::$values, 'int');
        $testheight = TestUtils::getTestValue("splitOnline", "height", self::$values, 'int');
        $testfrom = TestUtils::getTestValue("splitOnline", "from", self::$values, 'int');
        $testto = TestUtils::getTestValue("splitOnline", "to", self::$values, 'int');
        $testpassword = TestUtils::getTestValue("splitOnline", "password", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("splitOnline", "storage", self::$values, 'string');
        $testfontsFolder = TestUtils::getTestValue("splitOnline", "fontsFolder", self::$values, 'string');
        $testfontsFolder = TestUtils::invalidizeValue("fontsFolder", "splitOnline", $testfontsFolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("splitOnline", "fontsFolder", $testfontsFolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->splitOnline($testdocument, $testformat, $testwidth, $testheight, $testfrom, $testto, $testpassword, $teststorage, $testfontsFolder);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "splitOnline", "fontsFolder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "splitOnline", "fontsFolder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("splitOnline", "fontsFolder", self::$okToFailValues);
        }
    }

    /**
     * Test case for storageExists
     * Check if storage exists
     */
    public function testStorageExists()
    {
        $teststorageName = TestUtils::getTestValue("storageExists", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("storageExists", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->storageExists($teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "storageExists");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testStorageExistsInvalidstorageName()
    {
        $teststorageName = TestUtils::getTestValue("storageExists", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "storageExists", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("storageExists", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->storageExists($teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "storageExists", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "storageExists", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("storageExists", "storageName", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateAnimationEffect
     * Modify an animation effect for a slide.
     */
    public function testUpdateAnimationEffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateAnimationEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateAnimationEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateAnimationEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "name", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateAnimationEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "updateAnimationEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "effectIndex", $testeffectIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "updateAnimationEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "effect", $testeffect);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "effect", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateAnimationEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "password", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateAnimationEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateAnimationEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationEffect", "slideIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateAnimationEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationEffect", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationEffect($testname, $testslideIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateAnimationInteractiveSequenceEffect
     * Modify an animation effect for a slide interactive sequence.
     */
    public function testUpdateAnimationInteractiveSequenceEffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateAnimationInteractiveSequenceEffect");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidname()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateAnimationInteractiveSequenceEffect", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "name", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateAnimationInteractiveSequenceEffect", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidsequenceIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testsequenceIndex = TestUtils::invalidizeValue("sequenceIndex", "updateAnimationInteractiveSequenceEffect", $testsequenceIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "sequenceIndex", $testsequenceIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "sequenceIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalideffectIndex()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffectIndex = TestUtils::invalidizeValue("effectIndex", "updateAnimationInteractiveSequenceEffect", $testeffectIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "effectIndex", $testeffectIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "effectIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalideffect()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testeffect = TestUtils::invalidizeValue("effect", "updateAnimationInteractiveSequenceEffect", $testeffect, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "effect", $testeffect);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "effect", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "effect", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateAnimationInteractiveSequenceEffect", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "password", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateAnimationInteractiveSequenceEffect", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateAnimationInteractiveSequenceEffectInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "slideIndex", self::$values, 'int');
        $testsequenceIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "sequenceIndex", self::$values, 'int');
        $testeffectIndex = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effectIndex", self::$values, 'int');
        $testeffect = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "effect", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Effect');
        $testpassword = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateAnimationInteractiveSequenceEffect", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateAnimationInteractiveSequenceEffect", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateAnimationInteractiveSequenceEffect", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateAnimationInteractiveSequenceEffect($testname, $testslideIndex, $testsequenceIndex, $testeffectIndex, $testeffect, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateAnimationInteractiveSequenceEffect", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateAnimationInteractiveSequenceEffect", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateChartCategory
     * Update a chart category.
     */
    public function testUpdateChartCategory()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateChartCategory");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateChartCategoryInvalidname()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateChartCategory", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "name", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateChartCategory", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateChartCategory", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidcategoryIndex()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testcategoryIndex = TestUtils::invalidizeValue("categoryIndex", "updateChartCategory", $testcategoryIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "categoryIndex", $testcategoryIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "categoryIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "categoryIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidcategory()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testcategory = TestUtils::invalidizeValue("category", "updateChartCategory", $testcategory, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "category", $testcategory);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "category", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "category", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "category", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateChartCategory", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "password", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateChartCategory", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateChartCategoryInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateChartCategory", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartCategory", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartCategory", "shapeIndex", self::$values, 'int');
        $testcategoryIndex = TestUtils::getTestValue("updateChartCategory", "categoryIndex", self::$values, 'int');
        $testcategory = TestUtils::getTestValue("updateChartCategory", "category", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ChartCategory');
        $testpassword = TestUtils::getTestValue("updateChartCategory", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartCategory", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartCategory", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateChartCategory", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartCategory", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartCategory($testname, $testslideIndex, $testshapeIndex, $testcategoryIndex, $testcategory, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartCategory", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartCategory", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartCategory", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateChartDataPoint
     * Update a data point in a chart series.
     */
    public function testUpdateChartDataPoint()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateChartDataPoint");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateChartDataPointInvalidname()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateChartDataPoint", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "name", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateChartDataPoint", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateChartDataPoint", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "updateChartDataPoint", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "seriesIndex", $testseriesIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidpointIndex()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testpointIndex = TestUtils::invalidizeValue("pointIndex", "updateChartDataPoint", $testpointIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "pointIndex", $testpointIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "pointIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "pointIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvaliddataPoint()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testdataPoint = TestUtils::invalidizeValue("dataPoint", "updateChartDataPoint", $testdataPoint, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "dataPoint", $testdataPoint);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "dataPoint", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "dataPoint", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateChartDataPoint", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "password", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateChartDataPoint", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateChartDataPointInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateChartDataPoint", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartDataPoint", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartDataPoint", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartDataPoint", "seriesIndex", self::$values, 'int');
        $testpointIndex = TestUtils::getTestValue("updateChartDataPoint", "pointIndex", self::$values, 'int');
        $testdataPoint = TestUtils::getTestValue("updateChartDataPoint", "dataPoint", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\DataPoint');
        $testpassword = TestUtils::getTestValue("updateChartDataPoint", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartDataPoint", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartDataPoint", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateChartDataPoint", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartDataPoint", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartDataPoint($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testpointIndex, $testdataPoint, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartDataPoint", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartDataPoint", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartDataPoint", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateChartSeries
     * Update a series in a chart.
     */
    public function testUpdateChartSeries()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateChartSeries");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateChartSeriesInvalidname()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateChartSeries", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "name", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateChartSeries", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateChartSeries", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidseriesIndex()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testseriesIndex = TestUtils::invalidizeValue("seriesIndex", "updateChartSeries", $testseriesIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "seriesIndex", $testseriesIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "seriesIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "seriesIndex", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidseries()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testseries = TestUtils::invalidizeValue("series", "updateChartSeries", $testseries, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "series", $testseries);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "series", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "series", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "series", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateChartSeries", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "password", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateChartSeries", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateChartSeriesInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateChartSeries", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateChartSeries", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateChartSeries", "shapeIndex", self::$values, 'int');
        $testseriesIndex = TestUtils::getTestValue("updateChartSeries", "seriesIndex", self::$values, 'int');
        $testseries = TestUtils::getTestValue("updateChartSeries", "series", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Series');
        $testpassword = TestUtils::getTestValue("updateChartSeries", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateChartSeries", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateChartSeries", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateChartSeries", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateChartSeries", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateChartSeries($testname, $testslideIndex, $testshapeIndex, $testseriesIndex, $testseries, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateChartSeries", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateChartSeries", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateChartSeries", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateLayoutSlide
     * Update a layoutSlide.
     */
    public function testUpdateLayoutSlide()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateLayoutSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateLayoutSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateLayoutSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "name", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateLayoutSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidslideDto()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testslideDto = TestUtils::invalidizeValue("slideDto", "updateLayoutSlide", $testslideDto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "slideDto", $testslideDto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "slideDto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "slideDto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "slideDto", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateLayoutSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "password", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateLayoutSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateLayoutSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateLayoutSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateLayoutSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateLayoutSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\LayoutSlide');
        $testpassword = TestUtils::getTestValue("updateLayoutSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateLayoutSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateLayoutSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateLayoutSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateLayoutSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateLayoutSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateLayoutSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateLayoutSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateLayoutSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateNotesSlide
     * Update notes slide properties.
     */
    public function testUpdateNotesSlide()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateNotesSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateNotesSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateNotesSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "name", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateNotesSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateNotesSlide", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateNotesSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "password", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateNotesSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateNotesSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlide", "slideIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlide", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\NotesSlide');
        $testpassword = TestUtils::getTestValue("updateNotesSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateNotesSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlide($testname, $testslideIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateNotesSlideParagraph
     * Update paragraph properties.
     */
    public function testUpdateNotesSlideParagraph()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateNotesSlideParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateNotesSlideParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "name", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateNotesSlideParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateNotesSlideParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateNotesSlideParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateNotesSlideParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateNotesSlideParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "password", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateNotesSlideParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlideParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateNotesSlideParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateNotesSlideParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateNotesSlidePortion
     * Update portion properties.
     */
    public function testUpdateNotesSlidePortion()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateNotesSlidePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateNotesSlidePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateNotesSlidePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "name", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateNotesSlidePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateNotesSlidePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateNotesSlidePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "updateNotesSlidePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateNotesSlidePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateNotesSlidePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "password", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateNotesSlidePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlidePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateNotesSlidePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlidePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlidePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateNotesSlidePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateNotesSlidePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlidePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateNotesSlidePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlidePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlidePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateNotesSlidePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlidePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlidePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlidePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlidePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateNotesSlideShape
     * Update shape properties.
     */
    public function testUpdateNotesSlideShape()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateNotesSlideShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateNotesSlideShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateNotesSlideShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "name", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateNotesSlideShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateNotesSlideShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateNotesSlideShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateNotesSlideShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "password", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateNotesSlideShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateNotesSlideShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateNotesSlideShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateNotesSlideShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateNotesSlideShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateNotesSlideShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateNotesSlideShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateNotesSlideShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateNotesSlideShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateNotesSlideShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateNotesSlideShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateNotesSlideShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateNotesSlideShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateNotesSlideShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateParagraph
     * Update paragraph properties.
     */
    public function testUpdateParagraph()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "name", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "password", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateParagraph", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateParagraph($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updatePortion
     * Update portion properties.
     */
    public function testUpdatePortion()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updatePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdatePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updatePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "name", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updatePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updatePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updatePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "updatePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updatePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "dto", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updatePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "password", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updatePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "folder", self::$okToFailValues);
        }
    }

    public function testUpdatePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updatePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updatePortion", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updatePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updatePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updatePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updatePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updatePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updatePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updatePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updatePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updatePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updatePortion($testname, $testslideIndex, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updatePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updatePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updatePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSection
     * Update section name.
     */
    public function testUpdateSection()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSection");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSectionInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSection", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidsectionIndex()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testsectionIndex = TestUtils::invalidizeValue("sectionIndex", "updateSection", $testsectionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "sectionIndex", $testsectionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "sectionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "sectionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "sectionIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidsectionName()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testsectionName = TestUtils::invalidizeValue("sectionName", "updateSection", $testsectionName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "sectionName", $testsectionName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "sectionName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "sectionName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "sectionName", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSection", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSection", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSectionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSection", "name", self::$values, 'string');
        $testsectionIndex = TestUtils::getTestValue("updateSection", "sectionIndex", self::$values, 'int');
        $testsectionName = TestUtils::getTestValue("updateSection", "sectionName", self::$values, 'string');
        $testpassword = TestUtils::getTestValue("updateSection", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSection", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSection", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSection", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSection", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSection($testname, $testsectionIndex, $testsectionName, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSection", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSection", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSection", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateShape
     * Update shape properties.
     */
    public function testUpdateShape()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateShape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateShapeInvalidname()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateShape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "name", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateShape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateShape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateShape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateShape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "password", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateShape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateShapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateShape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateShape", "slideIndex", self::$values, 'int');
        $testshapeIndex = TestUtils::getTestValue("updateShape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateShape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateShape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateShape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateShape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateShape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateShape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateShape($testname, $testslideIndex, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateShape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateShape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateShape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSlide
     * Update a slide.
     */
    public function testUpdateSlide()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSlide");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSlideInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSlide", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSlide", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidslideDto()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testslideDto = TestUtils::invalidizeValue("slideDto", "updateSlide", $testslideDto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "slideDto", $testslideDto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "slideDto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "slideDto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "slideDto", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSlide", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSlide", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSlideInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSlide", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSlide", "slideIndex", self::$values, 'int');
        $testslideDto = TestUtils::getTestValue("updateSlide", "slideDto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Slide');
        $testpassword = TestUtils::getTestValue("updateSlide", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSlide", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSlide", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSlide", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSlide", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSlide($testname, $testslideIndex, $testslideDto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSlide", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSlide", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSlide", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSubshape
     * Update shape properties (for smart art and group shapes).
     */
    public function testUpdateSubshape()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSubshape");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSubshapeInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSubshape", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSubshape", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvalidpath()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "updateSubshape", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "path", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateSubshape", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateSubshape", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSubshape", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSubshape", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSubshape", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshape", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshape", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshape", "shapeIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshape", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\ShapeBase');
        $testpassword = TestUtils::getTestValue("updateSubshape", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshape", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshape", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSubshape", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshape", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshape($testname, $testslideIndex, $testpath, $testshapeIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshape", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshape", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshape", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSubshapeParagraph
     * Update paragraph properties (for smart art and group shapes).
     */
    public function testUpdateSubshapeParagraph()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSubshapeParagraph");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSubshapeParagraphInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSubshapeParagraph", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSubshapeParagraph", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidpath()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "updateSubshapeParagraph", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "path", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateSubshapeParagraph", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateSubshapeParagraph", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateSubshapeParagraph", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSubshapeParagraph", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSubshapeParagraph", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapeParagraphInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSubshapeParagraph", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapeParagraph", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapeParagraph", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapeParagraph", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapeParagraph", "paragraphIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapeParagraph", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Paragraph');
        $testpassword = TestUtils::getTestValue("updateSubshapeParagraph", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapeParagraph", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapeParagraph", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSubshapeParagraph", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapeParagraph", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapeParagraph($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapeParagraph", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapeParagraph", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for updateSubshapePortion
     * Update portion properties (for smart art and group shapes).
     */
    public function testUpdateSubshapePortion()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "updateSubshapePortion");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUpdateSubshapePortionInvalidname()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testname = TestUtils::invalidizeValue("name", "updateSubshapePortion", $testname, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "name", $testname);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "name", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "name", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "name", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidslideIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testslideIndex = TestUtils::invalidizeValue("slideIndex", "updateSubshapePortion", $testslideIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "slideIndex", $testslideIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "slideIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "slideIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidpath()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "updateSubshapePortion", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "path", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidshapeIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testshapeIndex = TestUtils::invalidizeValue("shapeIndex", "updateSubshapePortion", $testshapeIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "shapeIndex", $testshapeIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "shapeIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "shapeIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidparagraphIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testparagraphIndex = TestUtils::invalidizeValue("paragraphIndex", "updateSubshapePortion", $testparagraphIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "paragraphIndex", $testparagraphIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "paragraphIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "paragraphIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidportionIndex()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testportionIndex = TestUtils::invalidizeValue("portionIndex", "updateSubshapePortion", $testportionIndex, self::$values, 'int');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "portionIndex", $testportionIndex);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "portionIndex", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "portionIndex", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "portionIndex", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvaliddto()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testdto = TestUtils::invalidizeValue("dto", "updateSubshapePortion", $testdto, self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "dto", $testdto);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "dto", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "dto", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "dto", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidpassword()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testpassword = TestUtils::invalidizeValue("password", "updateSubshapePortion", $testpassword, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "password", $testpassword);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "password", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "password", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "password", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidfolder()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $testfolder = TestUtils::invalidizeValue("folder", "updateSubshapePortion", $testfolder, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "folder", $testfolder);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "folder", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "folder", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "folder", self::$okToFailValues);
        }
    }

    public function testUpdateSubshapePortionInvalidstorage()
    {
        $testname = TestUtils::getTestValue("updateSubshapePortion", "name", self::$values, 'string');
        $testslideIndex = TestUtils::getTestValue("updateSubshapePortion", "slideIndex", self::$values, 'int');
        $testpath = TestUtils::getTestValue("updateSubshapePortion", "path", self::$values, 'string');
        $testshapeIndex = TestUtils::getTestValue("updateSubshapePortion", "shapeIndex", self::$values, 'int');
        $testparagraphIndex = TestUtils::getTestValue("updateSubshapePortion", "paragraphIndex", self::$values, 'int');
        $testportionIndex = TestUtils::getTestValue("updateSubshapePortion", "portionIndex", self::$values, 'int');
        $testdto = TestUtils::getTestValue("updateSubshapePortion", "dto", self::$values, '\Aspose\Slides\Cloud\Sdk\Model\Portion');
        $testpassword = TestUtils::getTestValue("updateSubshapePortion", "password", self::$values, 'string');
        $testfolder = TestUtils::getTestValue("updateSubshapePortion", "folder", self::$values, 'string');
        $teststorage = TestUtils::getTestValue("updateSubshapePortion", "storage", self::$values, 'string');
        $teststorage = TestUtils::invalidizeValue("storage", "updateSubshapePortion", $teststorage, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("updateSubshapePortion", "storage", $teststorage);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->updateSubshapePortion($testname, $testslideIndex, $testpath, $testshapeIndex, $testparagraphIndex, $testportionIndex, $testdto, $testpassword, $testfolder, $teststorage);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "updateSubshapePortion", "storage", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "updateSubshapePortion", "storage", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("updateSubshapePortion", "storage", self::$okToFailValues);
        }
    }

    /**
     * Test case for uploadFile
     * Upload file
     */
    public function testUploadFile()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getStreamValue("uploadFile", "file");
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", null, null);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (Exception $ex) {
            TestUtils::assertSuccessfulException($ex, "uploadFile");
        }
        if ($needAssertResponse) {
            Assert::assertNotNull($result);
        }
    }

    public function testUploadFileInvalidpath()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getStreamValue("uploadFile", "file");
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        $testpath = TestUtils::invalidizeValue("path", "uploadFile", $testpath, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", "path", $testpath);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "uploadFile", "path", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "uploadFile", "path", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("uploadFile", "path", self::$okToFailValues);
        }
    }

    public function testUploadFileInvalidfile()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getStreamValue("uploadFile", "file");
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        $testfile = null;
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", "file", $testfile);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "uploadFile", "file", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "uploadFile", "file", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("uploadFile", "file", self::$okToFailValues);
        }
    }

    public function testUploadFileInvalidstorageName()
    {
        $testpath = TestUtils::getTestValue("uploadFile", "path", self::$values, 'string');
        $testfile = TestUtils::getStreamValue("uploadFile", "file");
        $teststorageName = TestUtils::getTestValue("uploadFile", "storageName", self::$values, 'string');
        $teststorageName = TestUtils::invalidizeValue("storageName", "uploadFile", $teststorageName, self::$values, 'string');
        list($expectedCode, $expectedMessage) = $this->initialize("uploadFile", "storageName", $teststorageName);
        $needAssertResponse = false;
        try {
            $result = $this->getApi()->uploadFile($testpath, $testfile, $teststorageName);
            $needAssertResponse = true;
        } catch (ApiException $ex) {
            TestUtils::assertException($ex, "uploadFile", "storageName", $expectedCode, $expectedMessage);
        } catch (\InvalidArgumentException $ex) {
            TestUtils::assertInvalidArgumentException($ex, "uploadFile", "storageName", $expectedCode, $expectedMessage);
        }
        if ($needAssertResponse) {
            TestUtils::assertResponse("uploadFile", "storageName", self::$okToFailValues);
        }
    }
}
